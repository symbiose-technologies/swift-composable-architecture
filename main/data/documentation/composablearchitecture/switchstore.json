{"abstract":[{"type":"text","text":"A view that observes when enum state held in a store changes cases, and provides stores to"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CaseLet"},{"type":"text","text":" views."}],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIDeprecations"]]},"seeAlsoSections":[{"anchor":"View-containers","generated":true,"title":"View containers","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/NavigationLinkStore","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/NavigationStackStore"]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"kind":"attribute","text":"@"},{"preciseIdentifier":"s:ScM","kind":"attribute","text":"MainActor"},{"kind":"text","text":" "},{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"SwitchStore"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"State"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Action"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Content"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Content"},{"kind":"text","text":" : "},{"preciseIdentifier":"s:7SwiftUI4ViewP","kind":"typeIdentifier","text":"View"}]}]},{"kind":"content","content":[{"text":"Overview","type":"heading","level":2,"anchor":"overview"},{"inlineContent":[{"text":"An application may model parts of its state with enums. For example, app state may differ if a","type":"text"},{"text":" ","type":"text"},{"text":"user is logged-in or not:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["@Reducer","struct AppFeature {","  enum State {","    case loggedIn(LoggedInState)","    case loggedOut(LoggedOutState)","  }","  \/\/ ...","}"]},{"inlineContent":[{"type":"text","text":"In the view layer, a store on this state can switch over each case using a "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore","isActive":true},{"type":"text","text":" and"},{"type":"text","text":" "},{"type":"text","text":"a "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CaseLet","isActive":true},{"type":"text","text":" view per case:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["struct AppView: View {","  let store: StoreOf<AppFeature>","","  var body: some View {","    SwitchStore(self.store) { state in","      switch state {","      case .loggedIn:","        CaseLet(","          \/AppFeature.State.loggedIn, action: AppFeature.Action.loggedIn","        ) { loggedInStore in","          LoggedInView(store: loggedInStore)","        }","      case .loggedOut:","        CaseLet(","          \/AppFeature.State.loggedOut, action: AppFeature.Action.loggedOut","        ) { loggedOutStore in","          LoggedOutView(store: loggedOutStore)","        }","      }","    }","  }","}"]},{"name":"Important","type":"aside","style":"important","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"SwitchStore"},{"type":"text","text":" view builder is only evaluated when the case of state passed to"},{"type":"text","text":" "},{"type":"text","text":"it changes. As such, you should not rely on this value for anything other than checking the"},{"type":"text","text":" "},{"type":"text","text":"current case, "},{"type":"emphasis","inlineContent":[{"type":"text","text":"e.g."}]},{"type":"text","text":" by switching on it and routing to an appropriate "},{"type":"codeVoice","code":"CaseLet"},{"type":"text","text":"."}]}]},{"inlineContent":[{"text":"See ","type":"text"},{"code":"Reducer\/ifCaseLet(_:action:then:fileID:filePath:line:column:)-7sg8d","type":"codeVoice"},{"text":" and","type":"text"},{"text":" ","type":"text"},{"code":"Scope\/init(state:action:child:fileID:filePath:line:column:)-9g44g","type":"codeVoice"},{"text":" for embedding reducers","type":"text"},{"text":" ","type":"text"},{"text":"that operate on each case of an enum in reducers that operate on the entire enum.","type":"text"}],"type":"paragraph"}]}],"deprecationSummary":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use 'switch' with a store of observable state, instead. For more information, see the following article: https:\/\/pointfreeco.github.io\/swift-composable-architecture\/main\/documentation\/composablearchitecture\/migratingto1.7#Replacing-SwitchStore-and-CaseLet-with-switch-and-case]"}]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"relationshipsSections":[{"type":"conformsTo","kind":"relationships","title":"Conforms To","identifiers":["doc:\/\/ComposableArchitecture\/s8SendableP","doc:\/\/ComposableArchitecture\/7SwiftUI4ViewP"]}],"kind":"symbol","metadata":{"modules":[{"name":"ComposableArchitecture"}],"symbolKind":"struct","externalID":"s:22ComposableArchitecture11SwitchStoreV","platforms":[],"title":"SwitchStore","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"SwitchStore"}],"navigatorTitle":[{"kind":"identifier","text":"SwitchStore"}],"role":"symbol","roleHeading":"Structure"},"variants":[{"paths":["\/documentation\/composablearchitecture\/switchstore"],"traits":[{"interfaceLanguage":"swift"}]}],"topicSections":[{"anchor":"Building-Content","title":"Building Content","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CaseLet"]},{"anchor":"Initializers","generated":true,"title":"Initializers","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore\/init(_:content:)"]},{"anchor":"Instance-Properties","generated":true,"title":"Instance Properties","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore\/body","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore\/content","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore\/store"]},{"anchor":"Default-Implementations","generated":true,"title":"Default Implementations","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore\/View-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore\/View-Implementations"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore"},"sections":[],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwitchStore":{"kind":"symbol","abstract":[{"text":"A view that observes when enum state held in a store changes cases, and provides stores to","type":"text"},{"text":" ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CaseLet","type":"reference"},{"text":" views.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SwitchStore","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/switchstore","deprecated":true,"role":"symbol","navigatorTitle":[{"text":"SwitchStore","kind":"identifier"}],"title":"SwitchStore","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IfLetStore":{"url":"\/documentation\/composablearchitecture\/ifletstore","role":"symbol","abstract":[{"text":"A view that safely unwraps a store of optional state in order to show one of two views.","type":"text"}],"type":"topic","deprecated":true,"title":"IfLetStore","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"IfLetStore"}],"navigatorTitle":[{"kind":"identifier","text":"IfLetStore"}]},"doc://ComposableArchitecture/7SwiftUI4ViewP":{"type":"unresolvable","identifier":"doc:\/\/ComposableArchitecture\/7SwiftUI4ViewP","title":"SwiftUICore.View"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore":{"title":"WithViewStore","role":"symbol","deprecated":true,"kind":"symbol","navigatorTitle":[{"text":"WithViewStore","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","abstract":[{"text":"A view helper that transforms a ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","isActive":true,"type":"reference"},{"text":" into a ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","isActive":true,"type":"reference"},{"text":" so that its state can be observed","type":"text"},{"text":" ","type":"text"},{"text":"by a view builder.","type":"text"}],"url":"\/documentation\/composablearchitecture\/withviewstore","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"WithViewStore","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Store"}],"kind":"symbol","title":"Store","url":"\/documentation\/composablearchitecture\/store","abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"role":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Store"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIIntegration":{"kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","title":"SwiftUI Integration","abstract":[{"text":"Integrating the Composable Architecture into a SwiftUI application.","type":"text"}],"role":"collectionGroup","url":"\/documentation\/composablearchitecture\/swiftuiintegration","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/NavigationLinkStore":{"abstract":[{"text":"A view that controls a navigation presentation.","type":"text"}],"title":"NavigationLinkStore","kind":"symbol","navigatorTitle":[{"text":"NavigationLinkStore","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/NavigationLinkStore","type":"topic","url":"\/documentation\/composablearchitecture\/navigationlinkstore","deprecated":true,"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NavigationLinkStore","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwitchStore/View-Implementations":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore\/View-Implementations","title":"View Implementations","type":"topic","role":"collectionGroup","url":"\/documentation\/composablearchitecture\/switchstore\/view-implementations","kind":"article","abstract":[]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwitchStore/body":{"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore\/body","deprecated":true,"abstract":[],"fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"body"},{"kind":"text","text":": "},{"kind":"keyword","text":"some"},{"kind":"text","text":" "},{"preciseIdentifier":"s:7SwiftUI4ViewP","kind":"typeIdentifier","text":"View"}],"kind":"symbol","role":"symbol","url":"\/documentation\/composablearchitecture\/switchstore\/body","title":"body"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwitchStore/init(_:content:)":{"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore\/init(_:content:)","kind":"symbol","role":"symbol","deprecated":true,"url":"\/documentation\/composablearchitecture\/switchstore\/init(_:content:)","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"text":"content","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Content","kind":"typeIdentifier"},{"text":")","kind":"text"}],"title":"init(_:content:)","abstract":[]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ForEachStore":{"navigatorTitle":[{"text":"ForEachStore","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","role":"symbol","url":"\/documentation\/composablearchitecture\/foreachstore","kind":"symbol","abstract":[{"text":"A Composable Architecture-friendly wrapper around ","type":"text"},{"type":"codeVoice","code":"ForEach"},{"text":" that simplifies working with","type":"text"},{"text":" ","type":"text"},{"text":"collections of state.","type":"text"}],"type":"topic","title":"ForEachStore","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ForEachStore","kind":"identifier"}],"deprecated":true},"doc://ComposableArchitecture/s8SendableP":{"type":"unresolvable","identifier":"doc:\/\/ComposableArchitecture\/s8SendableP","title":"Swift.Sendable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore":{"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ViewStore","kind":"identifier"}],"title":"ViewStore","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","type":"topic","navigatorTitle":[{"text":"ViewStore","kind":"identifier"}],"deprecated":true,"kind":"symbol","abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"ViewStore"},{"type":"text","text":" is an object that can observe state changes and send actions. They are most"},{"type":"text","text":" "},{"type":"text","text":"commonly used in views, such as SwiftUI views, UIView or UIViewController, but they can be used"},{"type":"text","text":" "},{"type":"text","text":"anywhere it makes sense to observe state or send actions."}],"url":"\/documentation\/composablearchitecture\/viewstore","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/NavigationStackStore":{"title":"NavigationStackStore","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NavigationStackStore","kind":"identifier"}],"abstract":[{"text":"A navigation stack that is driven by a store.","type":"text"}],"navigatorTitle":[{"text":"NavigationStackStore","kind":"identifier"}],"role":"symbol","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/NavigationStackStore","url":"\/documentation\/composablearchitecture\/navigationstackstore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/CaseLet":{"abstract":[{"type":"text","text":"A view that handles a specific case of enum state in a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore"},{"type":"text","text":"."}],"kind":"symbol","deprecated":true,"url":"\/documentation\/composablearchitecture\/caselet","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CaseLet","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CaseLet","kind":"identifier"}],"title":"CaseLet","role":"symbol","navigatorTitle":[{"text":"CaseLet","kind":"identifier"}],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwitchStore/store":{"title":"store","fragments":[{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"text":"store","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":">","kind":"text"}],"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore\/store","kind":"symbol","abstract":[],"deprecated":true,"url":"\/documentation\/composablearchitecture\/switchstore\/store","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIDeprecations":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIDeprecations","url":"\/documentation\/composablearchitecture\/swiftuideprecations","role":"collectionGroup","type":"topic","title":"Deprecations","kind":"article","abstract":[{"text":"Review unsupported SwiftUI APIs and their replacements.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwitchStore/content":{"fragments":[{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"text":"content","kind":"identifier"},{"text":": (","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Content","kind":"typeIdentifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore\/content","role":"symbol","deprecated":true,"kind":"symbol","title":"content","type":"topic","url":"\/documentation\/composablearchitecture\/switchstore\/content","abstract":[]},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","url":"\/documentation\/composablearchitecture","type":"topic","kind":"symbol","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"type":"text","text":" "},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"role":"collection","title":"ComposableArchitecture"}}}