{"seeAlsoSections":[{"anchor":"Integrations","generated":true,"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftConcurrency","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIKit"],"title":"Integrations"}],"metadata":{"role":"article","roleHeading":"Article","modules":[{"name":"ComposableArchitecture"}],"title":"Observation backport"},"primaryContentSections":[{"kind":"content","content":[{"level":2,"anchor":"Overview","text":"Overview","type":"heading"},{"inlineContent":[{"type":"text","text":"With version 1.7 of the Composable Architecture we have introduced support for Swift 5.9‚Äôs"},{"type":"text","text":" "},{"type":"text","text":"observation tools, "},{"type":"emphasis","inlineContent":[{"text":"and","type":"text"}]},{"type":"text","text":" we have backported those tools to work in iOS 13 and later. Using the"},{"type":"text","text":" "},{"type":"text","text":"observation tools in pre-iOS 17 does require a few additional steps and there are some gotchas to be"},{"type":"text","text":" "},{"type":"text","text":"aware of."}],"type":"paragraph"},{"level":2,"anchor":"The-Perception-framework","text":"The Perception framework","type":"heading"},{"inlineContent":[{"type":"text","text":"The Composable Architecture comes with a framework known as Perception, which is our backport of"},{"type":"text","text":" "},{"type":"text","text":"Swift 5.9‚Äôs Observation to iOS 13, macOS 12, tvOS 13 and watchOS 6. For all of the tools in the"},{"type":"text","text":" "},{"type":"text","text":"Observation framework there is a corresponding tool in Perception."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For example, instead of the "},{"type":"codeVoice","code":"@Observable"},{"type":"text","text":" macro, there is the "},{"type":"codeVoice","code":"@Perceptible"},{"type":"text","text":" macro:"}],"type":"paragraph"},{"syntax":"swift","code":["@Perceptible","class CounterModel {","  var count = 0","}"],"type":"codeListing"},{"inlineContent":[{"text":"However, in order for a view to properly observe changes to a ‚Äúperceptible‚Äù model, you must","type":"text"},{"text":" ","type":"text"},{"text":"remember to wrap the contents of your view in the ","type":"text"},{"type":"codeVoice","code":"WithPerceptionTracking"},{"text":" view:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["struct CounterView: View {","  let model = CounterModel()","","  var body: some View {","    WithPerceptionTracking {","      Form {","        Text(self.model.count.description)","        Button(\"Decrement\") { self.model.count -= 1 }","        Button(\"Increment\") { self.model.count += 1 }","      }","    }","  }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"This will make sure that the view subscribes to any fields accessed in the "},{"code":"@Perceptible","type":"codeVoice"},{"type":"text","text":" model so"},{"type":"text","text":" "},{"type":"text","text":"that changes to those fields invalidate the view and cause it to re-render."}],"type":"paragraph"},{"inlineContent":[{"text":"If a field of a ","type":"text"},{"code":"@Percetible","type":"codeVoice"},{"text":" model is accessed in a view while ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"not"}]},{"text":" inside","type":"text"},{"text":" ","type":"text"},{"code":"WithPerceptionTracking","type":"codeVoice"},{"text":", then a runtime warning will be triggered:","type":"text"}],"type":"paragraph"},{"name":"üü£ Runtime Warning","style":"note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"Perceptible state was accessed but is not being tracked. Track changes to","type":"text"},{"text":" ","type":"text"},{"text":"state by wrapping your view in a ‚ÄòWithPerceptionTracking‚Äô view.","type":"text"}]}]},{"inlineContent":[{"text":"To debug this, expand the warning in the Issue Navigator of Xcode (‚åò5), and click through the stack","type":"text"},{"text":" ","type":"text"},{"text":"frames displayed to find the line in your view where you are accessing state without being inside","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"WithPerceptionTracking"},{"text":".","type":"text"}],"type":"paragraph"},{"level":2,"anchor":"Bindings","text":"Bindings","type":"heading"},{"inlineContent":[{"type":"text","text":"If you want to derive bindings from the store (see "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Bindings","type":"reference","isActive":true},{"type":"text","text":" for more information), then you"},{"type":"text","text":" "},{"type":"text","text":"would typically use the "},{"type":"codeVoice","code":"@Bindable"},{"type":"text","text":" property wrapper that comes with SwiftUI:"}],"type":"paragraph"},{"syntax":"swift","code":["struct MyView: View {","  @Bindable var store: StoreOf<MyFeature>","  \/\/ ...","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"However, "},{"type":"codeVoice","code":"@Bindable"},{"type":"text","text":" is iOS 17+. So, the Perception library comes with a tool that can be used in"},{"type":"text","text":" "},{"type":"text","text":"its place until you can target iOS 17 and later. You just have to qualify "},{"type":"codeVoice","code":"@Bindable"},{"type":"text","text":" with the"},{"type":"text","text":" "},{"type":"codeVoice","code":"Perception"},{"type":"text","text":" namespace:"}],"type":"paragraph"},{"syntax":"swift","code":["struct MyView: View {","  @Perception.Bindable var store: StoreOf<MyFeature>","  \/\/ ...","}"],"type":"codeListing"},{"level":2,"anchor":"Gotchas","text":"Gotchas","type":"heading"},{"inlineContent":[{"type":"text","text":"There are a few gotchas to be aware of when using "},{"type":"codeVoice","code":"WithPerceptionTracking"},{"type":"text","text":"."}],"type":"paragraph"},{"level":3,"anchor":"Lazy-view-closures","text":"Lazy view closures","type":"heading"},{"inlineContent":[{"text":"There are many ‚Äúlazy‚Äù closures in SwiftUI that evaluate only when something happens in the view, and","type":"text"},{"text":" ","type":"text"},{"text":"not necessarily in the same stack frames as the ","type":"text"},{"code":"body","type":"codeVoice"},{"text":" of the view. For example, the trailing","type":"text"},{"text":" ","type":"text"},{"text":"closure of ","type":"text"},{"code":"ForEach","type":"codeVoice"},{"text":" is called ","type":"text"},{"inlineContent":[{"type":"text","text":"after"}],"type":"emphasis"},{"text":" the ","type":"text"},{"code":"body","type":"codeVoice"},{"text":" of the view has been computed.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This means that even if you wrap the body of the view in "},{"type":"codeVoice","code":"WithPerceptionTracking"},{"type":"text","text":":"}],"type":"paragraph"},{"syntax":"swift","code":["WithPerceptionTracking {","  ForEach(store.scope(state: \\.rows, action: \\.rows), id: \\.state.id) { store in","    Text(store.title)","  }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"‚Ä¶the access to the row‚Äôs "},{"type":"codeVoice","code":"store.title"},{"type":"text","text":" happens "},{"type":"emphasis","inlineContent":[{"text":"outside","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"WithPerceptionTracking"},{"type":"text","text":", and hence will"},{"type":"text","text":" "},{"type":"text","text":"not work and will trigger a runtime warning as described above."}],"type":"paragraph"},{"inlineContent":[{"text":"The fix for this is to wrap the content of the trailing closure in another ","type":"text"},{"code":"WithPerceptionTracking","type":"codeVoice"},{"text":":","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["WithPerceptionTracking {","  ForEach(store.scope(state: \\.rows, action: \\.rows), id: \\.state.id) { store in","    WithPerceptionTracking {","      Text(store.title)","    }","  }","}"],"type":"codeListing"},{"level":3,"anchor":"Mixing-legacy-and-modern-features-together","text":"Mixing legacy and modern features together","type":"heading"},{"inlineContent":[{"type":"text","text":"Some problems can arise when mixing together features built in the ‚Äúlegacy‚Äù style, using"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","isActive":true},{"type":"text","text":" and "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","isActive":true},{"type":"text","text":", and features built in the ‚Äúmodern‚Äù style, using the"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()","isActive":true},{"type":"text","text":" macro. The problems mostly manifest themselves as re-computing view bodies"},{"type":"text","text":" "},{"type":"text","text":"more often than necessary, but that can also put strain on SwiftUI‚Äôs ability to figure out what"},{"type":"text","text":" "},{"type":"text","text":"state changed, and can cause glitches or exacerbate navigation bugs."}],"type":"paragraph"},{"inlineContent":[{"text":"See ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.7#Incrementally-migrating"},{"text":" for more information about this.","type":"text"}],"type":"paragraph"}]}],"variants":[{"paths":["\/documentation\/composablearchitecture\/observationbackport"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"kind":"article","hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"]]},"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservationBackport","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Learn how the Observation framework from Swift 5.9 was backported to support iOS 16 and earlier,"},{"type":"text","text":" "},{"type":"text","text":"as well as the caveats of using the backported tools."}],"schemaVersion":{"patch":0,"minor":3,"major":0},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Store"}],"kind":"symbol","title":"Store","url":"\/documentation\/composablearchitecture\/store","abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"role":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Store"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Bindings":{"kind":"article","title":"Working with SwiftUI bindings","url":"\/documentation\/composablearchitecture\/bindings","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Bindings","role":"article","abstract":[{"text":"Learn how to connect features written in the Composable Architecture to SwiftUI bindings.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIIntegration":{"kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","title":"SwiftUI Integration","abstract":[{"text":"Integrating the Composable Architecture into a SwiftUI application.","type":"text"}],"role":"collectionGroup","url":"\/documentation\/composablearchitecture\/swiftuiintegration","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/UIKit":{"kind":"article","abstract":[{"type":"text","text":"Integrating the Composable Architecture into a UIKit application."}],"title":"UIKit Integration","type":"topic","role":"collectionGroup","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIKit","url":"\/documentation\/composablearchitecture\/uikit"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore":{"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ViewStore","kind":"identifier"}],"title":"ViewStore","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","type":"topic","navigatorTitle":[{"text":"ViewStore","kind":"identifier"}],"deprecated":true,"kind":"symbol","abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"ViewStore"},{"type":"text","text":" is an object that can observe state changes and send actions. They are most"},{"type":"text","text":" "},{"type":"text","text":"commonly used in views, such as SwiftUI views, UIView or UIViewController, but they can be used"},{"type":"text","text":" "},{"type":"text","text":"anywhere it makes sense to observe state or send actions."}],"url":"\/documentation\/composablearchitecture\/viewstore","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore":{"title":"WithViewStore","role":"symbol","deprecated":true,"kind":"symbol","navigatorTitle":[{"text":"WithViewStore","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","abstract":[{"text":"A view helper that transforms a ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","isActive":true,"type":"reference"},{"text":" into a ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","isActive":true,"type":"reference"},{"text":" so that its state can be observed","type":"text"},{"text":" ","type":"text"},{"text":"by a view builder.","type":"text"}],"url":"\/documentation\/composablearchitecture\/withviewstore","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"WithViewStore","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ObservableState()":{"type":"topic","role":"symbol","url":"\/documentation\/composablearchitecture\/observablestate()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"ObservableState"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Defines and implements conformance of the Observable protocol."}],"title":"ObservableState()","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","url":"\/documentation\/composablearchitecture","type":"topic","kind":"symbol","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"type":"text","text":" "},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"role":"collection","title":"ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftConcurrency":{"title":"Adopting Swift concurrency","role":"article","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/swiftconcurrency","abstract":[{"type":"text","text":"Learn how to write safe, concurrent effects using Swift‚Äôs structured concurrency."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftConcurrency"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.7#Incrementally-migrating":{"abstract":[],"kind":"section","type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.7#Incrementally-migrating","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.7#Incrementally-migrating","title":"Incrementally migrating"}}}