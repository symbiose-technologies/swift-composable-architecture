{"kind":"project","metadata":{"category":"The Composable Architecture","categoryPathComponent":"MeetComposableArchitecture","role":"project","title":"Testing presentation"},"hierarchy":{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","paths":[["doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/$volume","doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation"]],"modules":[{"projects":[{"sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Create-a-reducer"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-with-SwiftUI"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-into-the-app"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature"},{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#What-is-a-side-effect","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Performing-a-network-request","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Managing-a-timer","kind":"task"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects"},{"sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-state-changes"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-effects"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-network-requests"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Controlling-dependencies"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature"},{"sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Adding-a-tab-view"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Composing-reducers"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Deriving-child-stores"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials"},{"projects":[{"sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Project-set-up"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-reducers"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-views"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Child-to-parent-communication"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation"},{"sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Delete-contacts"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Improve-domain-modeling"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations"},{"sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-add-contact-flow"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Non-exhaustive-testing"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-delete-contact-flow"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation"},{"sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Contact-detail-feature"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Drill-down-to-contact-detail"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Deleting-a-contact"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation"}]},"schemaVersion":{"major":0,"patch":0,"minor":3},"sections":[{"title":"Testing presentation","content":[{"inlineContent":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"type":"text","text":" "},{"type":"text","text":"how multiple features integrate together and communicate with each other."}],"type":"paragraph"}],"chapter":"Navigation","kind":"hero","estimatedTimeInMinutes":40},{"tasks":[{"title":"Testing the add contact flow","contentSection":[{"mediaPosition":"trailing","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The first functionality we will test is adding a new contact. This entails emulating the"},{"type":"text","text":" "},{"type":"text","text":"entire user flow of the user tapping the “+” button, typing into the name text field,"},{"type":"text","text":" "},{"type":"text","text":"tapping the “Save” button, and confirming that the sheet is dismissed and the new contact"},{"type":"text","text":" "},{"type":"text","text":"is added to the list."}]}],"kind":"contentAndMedia"}],"anchor":"Testing-the-add-contact-flow","stepsSection":[{"runtimePreview":null,"caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a new file, ContactsFeatureTests.swift, to your test target and paste in some basic"},{"type":"text","text":" "},{"type":"text","text":"scaffolding for a test."}]}],"type":"step","media":null,"code":"02-03-01-code-0000.swift"},{"runtimePreview":null,"caption":[{"type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"See "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature","isActive":true},{"type":"text","text":" for a tutorial on testing, as well as the article"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestingTCA","isActive":true},{"type":"text","text":" for more detailed information."}]}],"name":"Note"}],"content":[{"type":"paragraph","inlineContent":[{"text":"Construct a test store by supplying the initial state the feature should start in, as well","type":"text"},{"text":" ","type":"text"},{"text":"as the reducer that is being tested.","type":"text"}]}],"type":"step","media":null,"code":"02-03-01-code-0001.swift"},{"runtimePreview":null,"caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Emulate the user tapping on the “+” button by sending the "},{"code":"addButtonTapped","type":"codeVoice"},{"type":"text","text":" action. The"},{"type":"text","text":" "},{"type":"text","text":"trailing closure provided is where we will assert on how state changes after sending"},{"type":"text","text":" "},{"type":"text","text":"the action."}]}],"type":"step","media":null,"code":"02-03-01-code-0002.swift"},{"runtimePreview":null,"caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"The only mutation we expect to happen is that the ","type":"text"},{"code":"destination","type":"codeVoice"},{"text":" field becomes populated","type":"text"},{"text":" ","type":"text"},{"text":"with some data, in particular the ","type":"text"},{"code":"addContact","type":"codeVoice"},{"text":" case of the destination enum.","type":"text"}]}],"type":"step","media":null,"code":"02-03-01-code-0003.swift"},{"runtimePreview":null,"caption":[],"content":[{"inlineContent":[{"text":"The ","type":"text"},{"code":"addContact","type":"codeVoice"},{"text":" case will hold onto some data, which is ","type":"text"},{"code":"AddContactFeature.State","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}],"type":"step","media":null,"code":"02-03-01-code-0004.swift"},{"runtimePreview":null,"caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To construct that state we need to construct a "},{"type":"codeVoice","code":"Contact"},{"type":"text","text":" value, and now we run into"},{"type":"text","text":" "},{"type":"text","text":"trouble. What can we provide for the ID?"}]}],"type":"step","media":null,"code":"02-03-01-code-0005.swift"},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"ContactsFeature"},{"type":"text","text":" currently makes use of an uncontrolled dependency, making it very hard"},{"type":"text","text":" "},{"type":"text","text":"to test this feature. It constructs a random UUID when presenting this feature, and we can’t"},{"type":"text","text":" "},{"type":"text","text":"predict that ID to get a passing test. So, just as we did in "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature","isActive":true},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"we will add a dependency on a UUID generator to our "},{"type":"codeVoice","code":"ContactsFeature"},{"type":"text","text":"."}],"type":"paragraph"},{"runtimePreview":null,"caption":[],"content":[{"inlineContent":[{"type":"text","text":"Go back to ContactsFeature.swift, and add a dependency on the UUID generator."}],"type":"paragraph"}],"type":"step","media":null,"code":"02-03-01-code-0006.swift"},{"runtimePreview":null,"caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"Use the newly added UUID dependency for creating UUIDs rather than reaching out to the","type":"text"},{"text":" ","type":"text"},{"text":"global, uncontrollable initializer.","type":"text"}]}],"type":"step","media":null,"code":"02-03-01-code-0007.swift"},{"runtimePreview":null,"caption":[],"content":[{"inlineContent":[{"type":"text","text":"Go back to ContactsFeatureTests.swift and override the dependencies on the test store so"},{"type":"text","text":" "},{"type":"text","text":"that it uses a controlled UUID generator. In particular, we will use the “incrementing”"},{"type":"text","text":" "},{"type":"text","text":"generator, which generates sequential, increasing IDs starting at 0."}],"type":"paragraph"}],"type":"step","media":null,"code":"02-03-01-code-0008.swift"},{"runtimePreview":null,"caption":[{"type":"aside","name":"Note","style":"note","content":[{"inlineContent":[{"type":"text","text":"The initializer on UUID that allows providing an integer is provided by our"},{"type":"text","text":" "},{"isActive":true,"identifier":"http:\/\/github.com\/pointfreeco\/swift-dependencies","type":"reference"},{"type":"text","text":" library, which the Composable Architecture"},{"type":"text","text":" "},{"type":"text","text":"depends on."}],"type":"paragraph"}]}],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Now we can predict the UUID generated when the contact is created."}]}],"type":"step","media":null,"code":"02-03-01-code-0009.swift"},{"inlineContent":[{"type":"text","text":"This test passes! So this proves that when the “+” button is tapped, that a sheet will fly"},{"type":"text","text":" "},{"type":"text","text":"up for the “Add Contact” feature. Let’s keep asserting on more of the user flow."}],"type":"paragraph"},{"runtimePreview":null,"caption":[{"name":"Tip","style":"tip","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The payload of an action can be sent as a second argument when using case key path"},{"type":"text","text":" "},{"type":"text","text":"syntax."}]}],"type":"aside"}],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Emulate the user typing into the name text field of the contact. The trailing closure is"},{"type":"text","text":" "},{"type":"text","text":"where we can assert on how state changed after sending the action."}]}],"type":"step","media":null,"code":"02-03-01-code-0010.swift"},{"runtimePreview":null,"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To do this we can chain into the "},{"type":"codeVoice","code":"addContact"},{"type":"text","text":" case name directly and mutate a part of its"},{"type":"text","text":" "},{"type":"text","text":"associated value."}]},{"type":"aside","style":"tip","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To use the "},{"type":"codeVoice","code":"modify"},{"type":"text","text":" helper on an enum to mutate an associated value, the enum must"},{"type":"text","text":" "},{"type":"text","text":"be annotated with "},{"type":"codeVoice","code":"@CasePathable"},{"type":"text","text":". The "},{"type":"codeVoice","code":"@Reducer"},{"type":"text","text":" macro automatically applies"},{"type":"text","text":" "},{"type":"text","text":"this annotation to enum-based "},{"type":"codeVoice","code":"State"},{"type":"text","text":", but you must manually apply it to other enums."}]}],"name":"Tip"}],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Assert on how state changed by mutating the "},{"type":"codeVoice","code":"destination"},{"type":"text","text":" through the "},{"type":"codeVoice","code":"addContact"},{"type":"text","text":" case of"},{"type":"text","text":" "},{"type":"text","text":"the destination enum."}]}],"type":"step","media":null,"code":"02-03-01-code-0011.swift"},{"runtimePreview":null,"caption":[],"content":[{"inlineContent":[{"text":"Emulate the user tapping the “Save” button in the “Add Contact” feature. We do not","type":"text"},{"text":" ","type":"text"},{"text":"expect the state to change immediately when sending this action, and so we do not need","type":"text"},{"text":" ","type":"text"},{"text":"to provide a trailing closure.","type":"text"}],"type":"paragraph"}],"type":"step","media":null,"code":"02-03-01-code-0012.swift"},{"runtimePreview":null,"caption":[],"content":[{"inlineContent":[{"text":"Emulate the delegate action ","type":"text"},{"code":"saveContact","type":"codeVoice"},{"text":" being received by the test store. This action is","type":"text"},{"text":" ","type":"text"},{"text":"sent from the ","type":"text"},{"code":"AddContactFeature","type":"codeVoice"},{"text":" when the “Save” button is tapped.","type":"text"}],"type":"paragraph"}],"type":"step","media":null,"code":"02-03-01-code-0013.swift"},{"runtimePreview":null,"caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Assert that when a delegate action is received that state mutates by adding a contact to the"},{"type":"text","text":" "},{"type":"text","text":"array."}]}],"type":"step","media":null,"code":"02-03-01-code-0014.swift"},{"runtimePreview":null,"caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To further assert that the "},{"type":"codeVoice","code":"saveContact"},{"type":"text","text":" delegate action was received, you must"},{"type":"text","text":" "},{"type":"text","text":"annotate "},{"type":"codeVoice","code":"AddContactFeature.Action.Delegate"},{"type":"text","text":" with the "},{"type":"codeVoice","code":"@CasePathable"},{"type":"text","text":" macro."}]}],"type":"step","media":null,"code":"02-03-01-code-0015.swift"},{"runtimePreview":null,"caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Now you can further dive into the "},{"type":"codeVoice","code":"saveContact"},{"type":"text","text":" case and even assert against its payload."}]}],"type":"step","media":null,"code":"02-03-01-code-0016.swift"},{"runtimePreview":null,"caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Finally assert that the test store receives a"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/dismiss","type":"reference","isActive":true},{"type":"text","text":" action, which causes the “Add Contact”"},{"type":"text","text":" "},{"type":"text","text":"feature to be dismissed."}]}],"type":"step","media":null,"code":"02-03-01-code-0017.swift"},{"inlineContent":[{"text":"This is a fully passing test, and proves the end-to-end lifecycle of presenting a child","type":"text"},{"text":" ","type":"text"},{"text":"feature, interacting with it, and how the child communicates information back to the parent.","type":"text"},{"text":" ","type":"text"},{"text":"However, this test is quite verbose, and is asserting on behavior that is local to just the","type":"text"},{"text":" ","type":"text"},{"text":"“Add Contact” feature. If we are only wanting to test at a high level that we can present","type":"text"},{"text":" ","type":"text"},{"text":"and dismiss a child feature, there is a better tool available called “non-exhaustive”","type":"text"},{"text":" ","type":"text"},{"text":"testing.","type":"text"}],"type":"paragraph"}]},{"title":"Non-exhaustive testing","contentSection":[{"kind":"contentAndMedia","mediaPosition":"trailing","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The previously written test is powerful and impressive, but also verbose. We had to assert"},{"type":"text","text":" "},{"type":"text","text":"on how everything evolves in the child feature, and had to assert how every effect action"},{"type":"text","text":" "},{"type":"text","text":"is received by the store. Sometimes it can be useful to write tests in a less exhaustive"},{"type":"text","text":" "},{"type":"text","text":"manner, especially when testing the integration of many features, such as is the case with"},{"type":"text","text":" "},{"type":"text","text":"features performing navigation."}]},{"type":"paragraph","inlineContent":[{"text":"See ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestingTCA#Non-exhaustive-testing"},{"text":" for more information on non-exhaustive testing","type":"text"},{"text":" ","type":"text"},{"text":"techniques.","type":"text"}]}]}],"anchor":"Non-exhaustive-testing","stepsSection":[{"caption":[],"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Start a new test case to test the same “Add Contact” user flow as above, but this time","type":"text"},{"text":" ","type":"text"},{"text":"we will do it in the non-exhaustive style.","type":"text"}]}],"code":"02-03-02-code-0000.swift","media":null,"runtimePreview":null},{"caption":[],"type":"step","content":[{"inlineContent":[{"text":"Set the test store’s ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/exhaustivity","type":"reference","isActive":true},{"text":" to ","type":"text"},{"code":".off","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}],"code":"02-03-02-code-0001.swift","media":null,"runtimePreview":null},{"caption":[],"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Emulate the user tapping on the “+” button, but this time do not provide a trailing","type":"text"},{"text":" ","type":"text"},{"text":"closure. In non-exhaustive test stores there is no need to assert on state changes if you","type":"text"},{"text":" ","type":"text"},{"text":"do not want to.","type":"text"}]}],"code":"02-03-02-code-0002.swift","media":null,"runtimePreview":null},{"caption":[],"type":"step","content":[{"inlineContent":[{"type":"text","text":"Emulate the user typing into the name text field of the contact, but again do not assert"},{"type":"text","text":" "},{"type":"text","text":"on any state changes in the child feature."}],"type":"paragraph"}],"code":"02-03-02-code-0003.swift","media":null,"runtimePreview":null},{"caption":[],"type":"step","content":[{"inlineContent":[{"text":"Emulate the user tapping the “Save” button in the child feature.","type":"text"}],"type":"paragraph"}],"code":"02-03-02-code-0004.swift","media":null,"runtimePreview":null},{"caption":[],"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Next we want to assert that sometime after the user taps the “Save” button that the"},{"type":"text","text":" "},{"type":"text","text":"contact is added to the array and the child feature is dismissed. However, we cannot assert"},{"type":"text","text":" "},{"type":"text","text":"on that until all the actions have been received, and so we can do that by using"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/skipReceivedActions(strict:fileID:file:line:column:)"},{"type":"text","text":"."}]}],"code":"02-03-02-code-0005.swift","media":null,"runtimePreview":null},{"caption":[],"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Assert that the final state of the feature has a new contact added to the array and the","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"destination"},{"text":" state is ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":"’d out.","type":"text"}]}],"code":"02-03-02-code-0006.swift","media":null,"runtimePreview":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"That’s all it takes to write a very high level test covering the full user flow of adding"},{"type":"text","text":" "},{"type":"text","text":"a new contact to the list. We don’t need to assert on all of the nitty gritty details in"},{"type":"text","text":" "},{"type":"text","text":"the child feature, and instead can just assert that the contact was indeed added after the"},{"type":"text","text":" "},{"type":"text","text":"user completed their steps."}]}]},{"title":"Testing the delete contact flow","contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The last important piece of functionality to test is deleting a contact. This involves tapping"},{"type":"text","text":" "},{"type":"text","text":"a button, asserting that an alert is shown, confirming the deletion through the alert, and"},{"type":"text","text":" "},{"type":"text","text":"then asserting that indeed the contact was removed."}]}],"mediaPosition":"trailing","kind":"contentAndMedia"}],"anchor":"Testing-the-delete-contact-flow","stepsSection":[{"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Start a new test method to test the delete flow.","type":"text"}]}],"caption":[],"code":"02-03-03-code-0000.swift","runtimePreview":null,"media":null},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Create a ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","type":"reference","isActive":true},{"text":" for testing the ","type":"text"},{"type":"codeVoice","code":"ContactsFeature"},{"text":" reducer.","type":"text"},{"text":" ","type":"text"},{"text":"This time we do not need to override any dependencies because we do not expect any to be","type":"text"},{"text":" ","type":"text"},{"text":"used","type":"text"}]}],"caption":[],"code":"02-03-03-code-0001.swift","runtimePreview":null,"media":null},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Start the initial state of the feature with some contacts already added to the array. This"},{"type":"text","text":" "},{"type":"text","text":"will make it easier to test the deletion behavior."}]}],"caption":[],"code":"02-03-03-code-0002.swift","runtimePreview":null,"media":null},{"type":"step","content":[{"inlineContent":[{"type":"text","text":"Emulate the user tapping on the delete button by sending the "},{"type":"codeVoice","code":"deleteButtonTapped"},{"type":"text","text":" action."},{"type":"text","text":" "},{"type":"text","text":"We will test deleting the second contact, which has an ID of "},{"type":"codeVoice","code":"UUID(1)"},{"type":"text","text":"."}],"type":"paragraph"}],"caption":[],"code":"02-03-03-code-0003.swift","runtimePreview":null,"media":null},{"type":"step","content":[{"inlineContent":[{"type":"text","text":"We expect that the state’s "},{"type":"codeVoice","code":"destination"},{"type":"text","text":" field will be populated with the "},{"type":"codeVoice","code":"alert"},{"type":"text","text":" case"},{"type":"text","text":" "},{"type":"text","text":"since an alert should appear."}],"type":"paragraph"}],"caption":[],"code":"02-03-03-code-0004.swift","runtimePreview":null,"media":null},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Technically we can simply repeat exactly what we did in the reducer for constructing the","type":"text"},{"text":" ","type":"text"},{"text":"alert. It’s verbose, but it does get the test passing.","type":"text"}]}],"caption":[],"code":"02-03-03-code-0005.swift","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"text":"However, that is a bit of a pain to repeat all of that work. There is a better way.","type":"text"}]},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Go back to ContactsFeature.swift where the reducer is implemented. Extend ","type":"text"},{"code":"AlertState","type":"codeVoice"},{"text":"","type":"text"},{"text":" ","type":"text"},{"text":"with its ","type":"text"},{"code":"Action","type":"codeVoice"},{"text":" generic constrained to ","type":"text"},{"code":"ContactsFeature.Action","type":"codeVoice"},{"text":". Add a static function","type":"text"},{"text":" ","type":"text"},{"text":"that constructs the alert, which allows us to reuse this logic in multiple places.","type":"text"}]}],"caption":[],"code":"02-03-03-code-0006.swift","runtimePreview":null,"media":null},{"type":"step","content":[{"inlineContent":[{"text":"Make use of the new ","type":"text"},{"code":"deleteConfirmation","type":"codeVoice"},{"text":" static alert function in the ","type":"text"},{"code":"ContactsFeature","type":"codeVoice"},{"text":"","type":"text"},{"text":" ","type":"text"},{"text":"reducer, rather than building ","type":"text"},{"code":"AlertState","type":"codeVoice"},{"text":" from scratch.","type":"text"}],"type":"paragraph"}],"caption":[{"inlineContent":[{"text":"Also to further assert that the ","type":"text"},{"type":"codeVoice","code":"confirmDeletion"},{"text":" action was received,","type":"text"},{"text":" ","type":"text"},{"text":"annotate ","type":"text"},{"type":"codeVoice","code":"ContactsFeature.Action.Alert"},{"text":" with the ","type":"text"},{"type":"codeVoice","code":"@CasePathable"},{"text":" macro.","type":"text"}],"type":"paragraph"}],"code":"02-03-03-code-0007.swift","runtimePreview":null,"media":null},{"type":"step","content":[{"inlineContent":[{"type":"text","text":"Go back to ContactsFeatureTests.swift and use the new "},{"type":"codeVoice","code":"deleteConfirmation"},{"type":"text","text":" static function"},{"type":"text","text":" "},{"type":"text","text":"to assert against the alert, rather than building "},{"type":"codeVoice","code":"AlertState"},{"type":"text","text":" from scratch."}],"type":"paragraph"}],"caption":[{"inlineContent":[{"type":"text","text":"Run the test to see this passes. This proves that when the delete button is tapped, an"},{"type":"text","text":" "},{"type":"text","text":"alert is shown to the user."}],"type":"paragraph"}],"code":"02-03-03-code-0008.swift","runtimePreview":null,"media":null},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Emulate the user confirming to delete contact by sending the "},{"type":"codeVoice","code":"confirmDeletion"},{"type":"text","text":" action"},{"type":"text","text":" "},{"type":"text","text":"in the alert."}]}],"caption":[],"code":"02-03-03-code-0009.swift","runtimePreview":null,"media":null},{"type":"step","content":[{"inlineContent":[{"type":"text","text":"Assert that the alert was dismissed and that the contact corresponding to the ID of"},{"type":"text","text":" "},{"type":"codeVoice","code":"UUID(1)"},{"type":"text","text":" was removed."}],"type":"paragraph"}],"caption":[],"code":"02-03-03-code-0010.swift","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"text":"That is all it takes to test the deletion flow. Run the test suite to see everything passes,","type":"text"},{"text":" ","type":"text"},{"text":"proving that when the user taps the confirmation button in the alert that indeed the contact","type":"text"},{"text":" ","type":"text"},{"text":"will be removed.","type":"text"}]}]}],"kind":"tasks"},{"action":{"overridingTitle":"Get started","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks","isActive":true,"overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"type":"reference"},"featuredEyebrow":"Tutorial","title":"Navigation stacks","kind":"callToAction","abstract":[{"text":"We will continue with the contacts application built in previous sections by adding","type":"text"},{"text":" ","type":"text"},{"text":"a navigation stack to the root of the application so that we can drill down to a contact.","type":"text"}]}],"variants":[{"paths":["\/tutorials\/composablearchitecture\/02-03-testingpresentation"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation","interfaceLanguage":"swift"},"references":{"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Deleting-a-contact":{"url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Deleting-a-contact","role":"pseudoSymbol","title":"Deleting a contact","type":"section","abstract":[{"text":"We will continue with the contacts application built in previous sections by adding","type":"text"},{"text":" ","type":"text"},{"text":"a navigation stack to the root of the application so that we can drill down to a contact.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Deleting-a-contact","kind":"section"},"02-03-01-code-0013.swift":{"highlights":[{"line":28},{"line":29},{"line":30},{"line":31},{"line":32}],"type":"file","fileName":"ContactsFeatureTests.swift","content":["import ComposableArchitecture","import Foundation","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func addFlow() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    } withDependencies: {","      $0.uuid = .incrementing","    }","    ","    await store.send(.addButtonTapped) {","      $0.destination = .addContact(","        AddContactFeature.State(","          contact: Contact(id: UUID(0), name: \"\")","        )","      )","    }","    await store.send(\\.destination.addContact.setName, \"Blob Jr.\") {","      $0.destination?.modify(\\.addContact) { $0.contact.name = \"Blob Jr.\" }","    }","    await store.send(\\.destination.addContact.saveButtonTapped)","    await store.receive(","      \\.destination.addContact.delegate.saveContact,","      Contact(id: UUID(0), name: \"Blob Jr.\")","    ) {","    }","  }","}"],"identifier":"02-03-01-code-0013.swift","fileType":"swift","syntax":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures#Deriving-child-stores":{"type":"section","kind":"section","role":"pseudoSymbol","abstract":[{"type":"text","text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent"},{"type":"text","text":" "},{"type":"text","text":"feature that contains the "},{"type":"codeVoice","code":"CounterFeature"},{"type":"text","text":" we have been building thus far."}],"title":"Deriving child stores","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Deriving-child-stores","url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures#Deriving-child-stores"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures#Composing-reducers":{"title":"Composing reducers","role":"pseudoSymbol","type":"section","kind":"section","url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures#Composing-reducers","abstract":[{"type":"text","text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent"},{"type":"text","text":" "},{"type":"text","text":"feature that contains the "},{"type":"codeVoice","code":"CounterFeature"},{"type":"text","text":" we have been building thus far."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Composing-reducers"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Integrate-reducers":{"url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Integrate-reducers","role":"pseudoSymbol","type":"section","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-reducers","title":"Integrate reducers","abstract":[{"text":"The Composable Architecture offers a variety of tools to help you present child features from","type":"text"},{"text":" ","type":"text"},{"text":"parent features. To begin, we will explore presenting a feature that is driven off of optional","type":"text"},{"text":" ","type":"text"},{"text":"state.","type":"text"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Integrate-views":{"role":"pseudoSymbol","title":"Integrate views","type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-views","kind":"section","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Integrate-views","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature":{"role":"project","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature","type":"topic","kind":"project","estimatedTime":"1hr 0min","title":"Testing your feature","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature","abstract":[{"text":"Learn how to write test for the counter built in previous tutorials, including how to assert","type":"text"},{"text":" ","type":"text"},{"text":"against state changes and how effects execute and feed data back into the system.","type":"text"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Project-set-up":{"title":"Project set up","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}],"type":"section","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Project-set-up","role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Project-set-up"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures#Adding-a-tab-view":{"type":"section","url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures#Adding-a-tab-view","kind":"section","role":"pseudoSymbol","title":"Adding a tab view","abstract":[{"type":"text","text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent"},{"type":"text","text":" "},{"type":"text","text":"feature that contains the "},{"type":"codeVoice","code":"CounterFeature"},{"type":"text","text":" we have been building thus far."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Adding-a-tab-view"},"02-03-01-code-0006.swift":{"content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @Presents var destination: Destination.State?","  }","  enum Action {","    case addButtonTapped","    case deleteButtonTapped(id: Contact.ID)","    case destination(PresentationAction<Destination.Action>)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  @Dependency(\\.uuid) var uuid","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.destination = .addContact(","          AddContactFeature.State(","            contact: Contact(id: UUID(), name: \"\")","          )","        )","        return .none","        ","      case let .destination(.presented(.addContact(.delegate(.saveContact(contact))))):","        state.contacts.append(contact)","        return .none","        ","      case let .destination(.presented(.alert(.confirmDeletion(id: id)))):","        state.contacts.remove(id: id)","        return .none","        ","      case .destination:","        return .none","        ","      case let .deleteButtonTapped(id: id):","        state.destination = .alert(","          AlertState {","            TextState(\"Are you sure?\")","          } actions: {","            ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","              TextState(\"Delete\")","            }","          }","        )","        return .none","      }","    }","    .ifLet(\\.$destination, action: \\.destination) {","      Destination.body","    }","  }","}"],"fileName":"ContactsFeature.swift","identifier":"02-03-01-code-0006.swift","type":"file","syntax":"swift","fileType":"swift","highlights":[{"line":16}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#Managing-a-timer":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Managing-a-timer","kind":"section","title":"Managing a timer","abstract":[{"text":"Learn how to communicate with the outside world in your features, and feed data from the outside","type":"text"},{"text":" ","type":"text"},{"text":"back into your feature.","type":"text"}],"type":"section","role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#Managing-a-timer"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Child-to-parent-communication":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Child-to-parent-communication","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Child-to-parent-communication","type":"section","abstract":[{"text":"The Composable Architecture offers a variety of tools to help you present child features from","type":"text"},{"text":" ","type":"text"},{"text":"parent features. To begin, we will explore presenting a feature that is driven off of optional","type":"text"},{"text":" ","type":"text"},{"text":"state.","type":"text"}],"title":"Child-to-parent communication","role":"pseudoSymbol","kind":"section"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/exhaustivity":{"url":"\/documentation\/composablearchitecture\/teststore\/exhaustivity","abstract":[{"type":"text","text":"The current exhaustivity level of the test store."}],"role":"symbol","kind":"symbol","title":"exhaustivity","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"exhaustivity"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Exhaustivity","preciseIdentifier":"s:22ComposableArchitecture12ExhaustivityO"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/exhaustivity","type":"topic"},"02-03-02-code-0001.swift":{"identifier":"02-03-02-code-0001.swift","fileName":"ContactsFeatureTests.swift","syntax":"swift","highlights":[{"line":16}],"type":"file","fileType":"swift","content":["import ComposableArchitecture","import Foundation","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func addFlowNonExhaustive() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    } withDependencies: {","      $0.uuid = .incrementing","    }","    store.exhaustivity = .off","  }","}"]},"02-03-01-code-0017.swift":{"fileType":"swift","type":"file","highlights":[{"line":36},{"line":37},{"line":38}],"fileName":"ContactsFeatureTests.swift","syntax":"swift","identifier":"02-03-01-code-0017.swift","content":["import ComposableArchitecture","import Foundation","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func addFlow() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    } withDependencies: {","      $0.uuid = .incrementing","    }","    ","    await store.send(.addButtonTapped) {","      $0.destination = .addContact(","        AddContactFeature.State(","          contact: Contact(id: UUID(0), name: \"\")","        )","      )","    }","    await store.send(\\.destination.addContact.setName, \"Blob Jr.\") {","      $0.destination?.modify(\\.addContact) { $0.contact.name = \"Blob Jr.\" }","    }","    await store.send(\\.destination.addContact.saveButtonTapped)","    await store.receive(","      \\.destination.addContact.delegate.saveContact,","      Contact(id: UUID(0), name: \"Blob Jr.\")","    ) {","      $0.contacts = [","        Contact(id: UUID(0), name: \"Blob Jr.\")","      ]","    }","    await store.receive(\\.destination.dismiss) {","      $0.destination = nil","    }","  }","}"]},"02-03-03-code-0001.swift":{"syntax":"swift","type":"file","highlights":[{"line":10},{"line":11},{"line":12}],"content":["import ComposableArchitecture","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func deleteContact() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    }","  }","}"],"fileType":"swift","fileName":"ContactsFeatureTests.swift","identifier":"02-03-03-code-0001.swift"},"02-03-01-code-0010.swift":{"identifier":"02-03-01-code-0010.swift","highlights":[{"line":24},{"line":25}],"type":"file","fileName":"ContactsFeatureTests.swift","fileType":"swift","content":["import ComposableArchitecture","import Foundation","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func addFlow() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    } withDependencies: {","      $0.uuid = .incrementing","    }","    ","    await store.send(.addButtonTapped) {","      $0.destination = .addContact(","        AddContactFeature.State(","          contact: Contact(id: UUID(0), name: \"\")","        )","      )","    }","    await store.send(\\.destination.addContact.setName, \"Blob Jr.\") {","    }","  }","}"],"syntax":"swift"},"02-03-03-code-0007.swift":{"highlights":[{"line":12},{"line":41}],"fileType":"swift","fileName":"ContactsFeature.swift","syntax":"swift","identifier":"02-03-03-code-0007.swift","type":"file","content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @Presents var destination: Destination.State?","  }","  enum Action {","    case addButtonTapped","    case deleteButtonTapped(id: Contact.ID)","    case destination(PresentationAction<Destination.Action>)","    @CasePathable","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  @Dependency(\\.uuid) var uuid","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.destination = .addContact(","          AddContactFeature.State(","            contact: Contact(id: self.uuid(), name: \"\")","          )","        )","        return .none","        ","      case let .destination(.presented(.addContact(.delegate(.saveContact(contact))))):","        state.contacts.append(contact)","        return .none","        ","      case let .destination(.presented(.alert(.confirmDeletion(id: id)))):","        state.contacts.remove(id: id)","        return .none","        ","      case .destination:","        return .none","        ","      case let .deleteButtonTapped(id: id):","        state.destination = .alert(.deleteConfirmation(id: id))","        return .none","      }","    }","    .ifLet(\\.$destination, action: \\.destination) {","      Destination.body","    }","  }","}"]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Testing-the-delete-contact-flow":{"type":"section","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Testing-the-delete-contact-flow","abstract":[{"text":"Learn how to write tests for features built using the library’s navigation tools, including","type":"text"},{"text":" ","type":"text"},{"text":"how multiple features integrate together and communicate with each other.","type":"text"}],"kind":"section","role":"pseudoSymbol","title":"Testing the delete contact flow","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-delete-contact-flow"},"02-03-03-code-0004.swift":{"identifier":"02-03-03-code-0004.swift","highlights":[{"line":23},{"line":24}],"type":"file","fileName":"ContactsFeatureTests.swift","fileType":"swift","content":["import ComposableArchitecture","import Foundation","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func deleteContact() async {","    let store = TestStore(","      initialState: ContactsFeature.State(","        contacts: [","          Contact(id: UUID(0), name: \"Blob\"),","          Contact(id: UUID(1), name: \"Blob Jr.\"),","        ]","      )","    ) {","      ContactsFeature()","    }","    ","    await store.send(.deleteButtonTapped(id: UUID(1))) {","      $0.destination = .alert(","      )","    }","  }","}"],"syntax":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-state-changes":{"kind":"section","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-state-changes","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"title":"Testing state changes","role":"pseudoSymbol","type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-state-changes"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"kind":"symbol","url":"\/documentation\/composablearchitecture\/teststore","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"TestStore"}],"navigatorTitle":[{"kind":"identifier","text":"TestStore"}],"type":"topic","title":"TestStore","role":"symbol","abstract":[{"type":"text","text":"A testable runtime for a reducer."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations#Delete-contacts":{"kind":"section","title":"Delete contacts","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Delete-contacts","type":"section","abstract":[{"text":"In the previous section you learned how to model your domains so that a parent feature can","type":"text"},{"text":" ","type":"text"},{"text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be","type":"text"},{"text":" ","type":"text"},{"text":"able to present ","type":"text"},{"inlineContent":[{"type":"text","text":"many"}],"type":"emphasis"},{"text":" features.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations#Delete-contacts","role":"pseudoSymbol"},"02-03-02-code-0004.swift":{"syntax":"swift","content":["import ComposableArchitecture","import Foundation","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func addFlowNonExhaustive() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    } withDependencies: {","      $0.uuid = .incrementing","    }","    store.exhaustivity = .off","    ","    await store.send(.addButtonTapped)","    await store.send(\\.destination.addContact.setName, \"Blob Jr.\")","    await store.send(\\.destination.addContact.saveButtonTapped)","  }","}"],"fileName":"ContactsFeatureTests.swift","fileType":"swift","identifier":"02-03-02-code-0004.swift","type":"file","highlights":[{"line":20}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Drill-down-to-contact-detail":{"url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Drill-down-to-contact-detail","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Drill-down-to-contact-detail","title":"Drill-down to contact detail","abstract":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"type":"text","text":" "},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}],"type":"section","role":"pseudoSymbol"},"02-03-02-code-0005.swift":{"content":["import ComposableArchitecture","import Foundation","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func addFlowNonExhaustive() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    } withDependencies: {","      $0.uuid = .incrementing","    }","    store.exhaustivity = .off","    ","    await store.send(.addButtonTapped)","    await store.send(\\.destination.addContact.setName, \"Blob Jr.\")","    await store.send(\\.destination.addContact.saveButtonTapped)","    await store.skipReceivedActions()","  }","}"],"fileName":"ContactsFeatureTests.swift","identifier":"02-03-02-code-0005.swift","type":"file","syntax":"swift","fileType":"swift","highlights":[{"line":21}]},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture/Navigation":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation","abstract":[],"title":"Navigation","type":"topic","kind":"article","role":"article","url":"\/tutorials\/meetcomposablearchitecture\/navigation"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Integrating-with-SwiftUI":{"url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Integrating-with-SwiftUI","role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-with-SwiftUI","type":"section","abstract":[{"type":"text","text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then"},{"type":"text","text":" "},{"type":"text","text":"learn how to hook up that feature to a SwiftUI view."}],"title":"Integrating with SwiftUI"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-network-requests":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-network-requests","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-network-requests","title":"Testing network requests","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"kind":"section","role":"pseudoSymbol","type":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Contact-detail-feature":{"role":"pseudoSymbol","kind":"section","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Contact-detail-feature","title":"Contact detail feature","type":"section","abstract":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"type":"text","text":" "},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Contact-detail-feature"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Testing-the-add-contact-flow":{"role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Testing-the-add-contact-flow","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-add-contact-flow","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"type":"text","text":" "},{"type":"text","text":"how multiple features integrate together and communicate with each other."}],"type":"section","kind":"section","title":"Testing the add contact flow"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture/Essentials":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials","title":"Essentials","kind":"article","abstract":[],"url":"\/tutorials\/meetcomposablearchitecture\/essentials","role":"article","type":"topic"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation":{"estimatedTime":"30min","abstract":[{"text":"The Composable Architecture offers a variety of tools to help you present child features from","type":"text"},{"text":" ","type":"text"},{"text":"parent features. To begin, we will explore presenting a feature that is driven off of optional","type":"text"},{"text":" ","type":"text"},{"text":"state.","type":"text"}],"type":"topic","kind":"project","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation","role":"project","title":"Your first presentation"},"02-03-01-code-0007.swift":{"syntax":"swift","content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @Presents var destination: Destination.State?","  }","  enum Action {","    case addButtonTapped","    case deleteButtonTapped(id: Contact.ID)","    case destination(PresentationAction<Destination.Action>)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  @Dependency(\\.uuid) var uuid","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.destination = .addContact(","          AddContactFeature.State(","            contact: Contact(id: self.uuid(), name: \"\")","          )","        )","        return .none","        ","      case let .destination(.presented(.addContact(.delegate(.saveContact(contact))))):","        state.contacts.append(contact)","        return .none","        ","      case let .destination(.presented(.alert(.confirmDeletion(id: id)))):","        state.contacts.remove(id: id)","        return .none","        ","      case .destination:","        return .none","        ","      case let .deleteButtonTapped(id: id):","        state.destination = .alert(","          AlertState {","            TextState(\"Are you sure?\")","          } actions: {","            ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","              TextState(\"Delete\")","            }","          }","        )","        return .none","      }","    }","    .ifLet(\\.$destination, action: \\.destination) {","      Destination.body","    }","  }","}"],"fileName":"ContactsFeature.swift","fileType":"swift","identifier":"02-03-01-code-0007.swift","type":"file","highlights":[{"line":23}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Controlling-dependencies":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Controlling-dependencies","role":"pseudoSymbol","kind":"section","type":"section","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"title":"Controlling dependencies","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Controlling-dependencies"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks":{"abstract":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"type":"text","text":" "},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}],"kind":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks","type":"topic","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks","role":"project","estimatedTime":"30min","title":"Navigation stacks"},"02-03-02-code-0000.swift":{"identifier":"02-03-02-code-0000.swift","fileName":"ContactsFeatureTests.swift","syntax":"swift","highlights":[],"type":"file","fileType":"swift","content":["import ComposableArchitecture","import Foundation","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func addFlowNonExhaustive() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    } withDependencies: {","      $0.uuid = .incrementing","    }","  }","}"]},"02-03-02-code-0006.swift":{"fileType":"swift","content":["import ComposableArchitecture","import Foundation","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func addFlowNonExhaustive() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    } withDependencies: {","      $0.uuid = .incrementing","    }","    store.exhaustivity = .off","    ","    await store.send(.addButtonTapped)","    await store.send(\\.destination.addContact.setName, \"Blob Jr.\")","    await store.send(\\.destination.addContact.saveButtonTapped)","    await store.skipReceivedActions()","    store.assert {","      $0.contacts = [","        Contact(id: UUID(0), name: \"Blob Jr.\")","      ]","      $0.destination = nil","    }","  }","}"],"type":"file","fileName":"ContactsFeatureTests.swift","identifier":"02-03-02-code-0006.swift","syntax":"swift","highlights":[{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-effects":{"abstract":[{"text":"Learn how to write test for the counter built in previous tutorials, including how to assert","type":"text"},{"text":" ","type":"text"},{"text":"against state changes and how effects execute and feed data back into the system.","type":"text"}],"title":"Testing effects","kind":"section","role":"pseudoSymbol","type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-effects","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-effects"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestingTCA#Non-exhaustive-testing":{"type":"topic","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestingTCA#Non-exhaustive-testing","abstract":[],"title":"Non-exhaustive testing","url":"\/documentation\/composablearchitecture\/testingtca#Non-exhaustive-testing"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestingTCA":{"title":"Testing","kind":"article","url":"\/documentation\/composablearchitecture\/testingtca","role":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestingTCA","type":"topic","abstract":[{"type":"text","text":"Learn how to write comprehensive and exhaustive tests for your features built in the Composable"},{"type":"text","text":" "},{"type":"text","text":"Architecture."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/skipReceivedActions(strict:fileID:file:line:column:)":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/skipReceivedActions(strict:fileID:file:line:column:)","type":"topic","url":"\/documentation\/composablearchitecture\/teststore\/skipreceivedactions(strict:fileid:file:line:column:)","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"skipReceivedActions","kind":"identifier"},{"text":"(","kind":"text"},{"text":"strict","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"fileID","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"file","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt","preciseIdentifier":"s:Su","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"column","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt","preciseIdentifier":"s:Su","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"}],"conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"State","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Equatable","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"role":"symbol","title":"skipReceivedActions(strict:fileID:file:line:column:)","abstract":[{"text":"Clears the queue of received actions from effects.","type":"text"}]},"02-03-01-code-0008.swift":{"identifier":"02-03-01-code-0008.swift","highlights":[{"line":12},{"line":13}],"type":"file","fileName":"ContactsFeatureTests.swift","fileType":"swift","content":["import ComposableArchitecture","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func addFlow() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    } withDependencies: {","      $0.uuid = .incrementing","    }","    ","    await store.send(.addButtonTapped) {","      $0.destination = .addContact(","        AddContactFeature.State(","          contact: Contact(id: ???, name: \"\")","        )","      )","    }","  }","}"],"syntax":"swift"},"02-03-01-code-0002.swift":{"syntax":"swift","type":"file","highlights":[{"line":13},{"line":14},{"line":15}],"content":["import ComposableArchitecture","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func addFlow() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    }","    ","    await store.send(.addButtonTapped) {","    }","  }","}"],"fileType":"swift","fileName":"ContactsFeatureTests.swift","identifier":"02-03-01-code-0002.swift"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture":{"kind":"overview","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a","type":"text"},{"text":" ","type":"text"},{"text":"consistent and understandable way, with composition, testing, and ergonomics in mind. It can be","type":"text"},{"text":" ","type":"text"},{"text":"used in SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"title":"Meet the Composable Architecture","role":"overview","url":"\/tutorials\/meetcomposablearchitecture","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","type":"topic"},"02-03-01-code-0015.swift":{"content":["import ComposableArchitecture","","@Reducer","struct AddContactFeature {","  @ObservableState","  struct State: Equatable {","    var contact: Contact","  }","  enum Action {","    case cancelButtonTapped","    case delegate(Delegate)","    case saveButtonTapped","    case setName(String)","    @CasePathable","    enum Delegate {","      case saveContact(Contact)","    }","  }","  @Dependency(\\.dismiss) var dismiss","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .cancelButtonTapped:","        return .run { _ in await self.dismiss() }","","      case .delegate:","        return .none","","      case .saveButtonTapped:","        return .run { [contact = state.contact] send in","          await send(.delegate(.saveContact(contact)))","          await self.dismiss()","        }","","      case let .setName(name):","        state.contact.name = name","        return .none","      }","    }","  }","}"],"fileName":"ContactsFeature.swift","identifier":"02-03-01-code-0015.swift","type":"file","syntax":"swift","fileType":"swift","highlights":[{"line":14}]},"02-03-02-code-0002.swift":{"fileName":"ContactsFeatureTests.swift","type":"file","content":["import ComposableArchitecture","import Foundation","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func addFlowNonExhaustive() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    } withDependencies: {","      $0.uuid = .incrementing","    }","    store.exhaustivity = .off","    ","    await store.send(.addButtonTapped)","  }","}"],"syntax":"swift","fileType":"swift","identifier":"02-03-02-code-0002.swift","highlights":[{"line":17},{"line":18}]},"02-03-03-code-0000.swift":{"syntax":"swift","content":["import ComposableArchitecture","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func deleteContact() async {","  }","}"],"identifier":"02-03-03-code-0000.swift","highlights":[],"fileName":"ContactsFeatureTests.swift","fileType":"swift","type":"file"},"02-03-01-code-0012.swift":{"syntax":"swift","content":["import ComposableArchitecture","import Foundation","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func addFlow() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    } withDependencies: {","      $0.uuid = .incrementing","    }","    ","    await store.send(.addButtonTapped) {","      $0.destination = .addContact(","        AddContactFeature.State(","          contact: Contact(id: UUID(0), name: \"\")","        )","      )","    }","    await store.send(\\.destination.addContact.setName, \"Blob Jr.\") {","      $0.destination?.modify(\\.addContact) { $0.contact.name = \"Blob Jr.\" }","    }","    await store.send(\\.destination.addContact.saveButtonTapped)","  }","}"],"fileName":"ContactsFeatureTests.swift","fileType":"swift","identifier":"02-03-01-code-0012.swift","type":"file","highlights":[{"line":27}]},"02-03-03-code-0005.swift":{"identifier":"02-03-03-code-0005.swift","syntax":"swift","fileName":"ContactsFeatureTests.swift","fileType":"swift","content":["import ComposableArchitecture","import Foundation","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func deleteContact() async {","    let store = TestStore(","      initialState: ContactsFeature.State(","        contacts: [","          Contact(id: UUID(0), name: \"Blob\"),","          Contact(id: UUID(1), name: \"Blob Jr.\"),","        ]","      )","    ) {","      ContactsFeature()","    }","    ","    await store.send(.deleteButtonTapped(id: UUID(1))) {","      $0.destination = .alert(","        AlertState {","          TextState(\"Are you sure?\")","        } actions: {","          ButtonState(role: .destructive, action: .confirmDeletion(id: UUID(1))) {","            TextState(\"Delete\")","          }","        }","      )","    }","  }","}"],"type":"file","highlights":[{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30}]},"02-03-03-code-0009.swift":{"highlights":[{"line":25},{"line":26}],"fileType":"swift","fileName":"ContactsFeatureTests.swift","syntax":"swift","identifier":"02-03-03-code-0009.swift","type":"file","content":["import ComposableArchitecture","import Foundation","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func deleteContact() async {","    let store = TestStore(","      initialState: ContactsFeature.State(","        contacts: [","          Contact(id: UUID(0), name: \"Blob\"),","          Contact(id: UUID(1), name: \"Blob Jr.\"),","        ]","      )","    ) {","      ContactsFeature()","    }","    ","    await store.send(.deleteButtonTapped(id: UUID(1))) {","      $0.destination = .alert(.deleteConfirmation(id: UUID(1)))","    }","    await store.send(\\.destination.alert.confirmDeletion, UUID(1)) {","    }","  }","}"]},"02-03-03-code-0010.swift":{"type":"file","syntax":"swift","fileType":"swift","identifier":"02-03-03-code-0010.swift","fileName":"ContactsFeatureTests.swift","highlights":[{"line":26},{"line":27},{"line":28},{"line":29}],"content":["import ComposableArchitecture","import Foundation","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func deleteContact() async {","    let store = TestStore(","      initialState: ContactsFeature.State(","        contacts: [","          Contact(id: UUID(0), name: \"Blob\"),","          Contact(id: UUID(1), name: \"Blob Jr.\"),","        ]","      )","    ) {","      ContactsFeature()","    }","    ","    await store.send(.deleteButtonTapped(id: UUID(1))) {","      $0.destination = .alert(.deleteConfirmation(id: UUID(1)))","    }","    await store.send(\\.destination.alert.confirmDeletion, UUID(1)) {","      $0.contacts = [","        Contact(id: UUID(0), name: \"Blob\")","      ]","      $0.destination = nil","    }","  }","}"]},"02-03-01-code-0004.swift":{"fileName":"ContactsFeatureTests.swift","type":"file","content":["import ComposableArchitecture","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func addFlow() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    }","    ","    await store.send(.addButtonTapped) {","      $0.destination = .addContact(","        AddContactFeature.State(","        )","      )","    }","  }","}"],"syntax":"swift","fileType":"swift","identifier":"02-03-01-code-0004.swift","highlights":[{"line":16},{"line":17}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Non-exhaustive-testing":{"kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Non-exhaustive-testing","type":"section","title":"Non-exhaustive testing","abstract":[{"text":"Learn how to write tests for features built using the library’s navigation tools, including","type":"text"},{"text":" ","type":"text"},{"text":"how multiple features integrate together and communicate with each other.","type":"text"}],"role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Non-exhaustive-testing"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation":{"abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"type":"text","text":" "},{"type":"text","text":"how multiple features integrate together and communicate with each other."}],"title":"Testing presentation","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation","estimatedTime":"40min","role":"project","kind":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation","type":"topic"},"02-03-01-code-0014.swift":{"fileType":"swift","type":"file","highlights":[{"line":32},{"line":33},{"line":34}],"fileName":"ContactsFeatureTests.swift","syntax":"swift","identifier":"02-03-01-code-0014.swift","content":["import ComposableArchitecture","import Foundation","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func addFlow() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    } withDependencies: {","      $0.uuid = .incrementing","    }","    ","    await store.send(.addButtonTapped) {","      $0.destination = .addContact(","        AddContactFeature.State(","          contact: Contact(id: UUID(0), name: \"\")","        )","      )","    }","    await store.send(\\.destination.addContact.setName, \"Blob Jr.\") {","      $0.destination?.modify(\\.addContact) { $0.contact.name = \"Blob Jr.\" }","    }","    await store.send(\\.destination.addContact.saveButtonTapped)","    await store.receive(","      \\.destination.addContact.delegate.saveContact,","      Contact(id: UUID(0), name: \"Blob Jr.\")","    ) {","      $0.contacts = [","        Contact(id: UUID(0), name: \"Blob Jr.\")","      ]","    }","  }","}"]},"02-03-01-code-0003.swift":{"fileName":"ContactsFeatureTests.swift","type":"file","content":["import ComposableArchitecture","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func addFlow() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    }","    ","    await store.send(.addButtonTapped) {","      $0.destination = .addContact(","      )","    }","  }","}"],"syntax":"swift","fileType":"swift","identifier":"02-03-01-code-0003.swift","highlights":[{"line":15},{"line":16}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#What-is-a-side-effect":{"kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#What-is-a-side-effect","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"type":"text","text":" "},{"type":"text","text":"back into your feature."}],"title":"What is a side effect?","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#What-is-a-side-effect","role":"pseudoSymbol","type":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Create-a-reducer":{"abstract":[{"text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then","type":"text"},{"text":" ","type":"text"},{"text":"learn how to hook up that feature to a SwiftUI view.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Create-a-reducer","kind":"section","role":"pseudoSymbol","title":"Create a reducer","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Create-a-reducer","type":"section"},"02-03-01-code-0001.swift":{"highlights":[{"line":10},{"line":11},{"line":12}],"identifier":"02-03-01-code-0001.swift","type":"file","syntax":"swift","content":["import ComposableArchitecture","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func addFlow() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    }","  }","}"],"fileType":"swift","fileName":"ContactsFeatureTests.swift"},"02-03-01-code-0005.swift":{"identifier":"02-03-01-code-0005.swift","fileName":"ContactsFeatureTests.swift","syntax":"swift","highlights":[{"line":17}],"type":"file","fileType":"swift","content":["import ComposableArchitecture","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func addFlow() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    }","    ","    await store.send(.addButtonTapped) {","      $0.destination = .addContact(","        AddContactFeature.State(","          contact: Contact(id: ???, name: \"\")","        )","      )","    }","  }","}"]},"02-03-03-code-0008.swift":{"content":["import ComposableArchitecture","import Foundation","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func deleteContact() async {","    let store = TestStore(","      initialState: ContactsFeature.State(","        contacts: [","          Contact(id: UUID(0), name: \"Blob\"),","          Contact(id: UUID(1), name: \"Blob Jr.\"),","        ]","      )","    ) {","      ContactsFeature()","    }","    ","    await store.send(.deleteButtonTapped(id: UUID(1))) {","      $0.destination = .alert(.deleteConfirmation(id: UUID(1)))","    }","  }","}"],"fileName":"ContactsFeatureTests.swift","identifier":"02-03-03-code-0008.swift","type":"file","syntax":"swift","fileType":"swift","highlights":[{"line":23}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature":{"url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature","kind":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature","type":"topic","title":"Your first feature","abstract":[{"type":"text","text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then"},{"type":"text","text":" "},{"type":"text","text":"learn how to hook up that feature to a SwiftUI view."}],"role":"project","estimatedTime":"20min"},"02-03-03-code-0006.swift":{"syntax":"swift","content":["import ComposableArchitecture","","extension AlertState where Action == ContactsFeature.Action.Alert {","  static func deleteConfirmation(id: UUID) -> Self {","    Self {","      TextState(\"Are you sure?\")","    } actions: {","      ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","        TextState(\"Delete\")","      }","    }","  }","}"],"identifier":"02-03-03-code-0006.swift","highlights":[],"fileName":"ContactsFeature.swift","fileType":"swift","type":"file"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures":{"type":"topic","title":"Composing features","abstract":[{"text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent","type":"text"},{"text":" ","type":"text"},{"text":"feature that contains the ","type":"text"},{"code":"CounterFeature","type":"codeVoice"},{"text":" we have been building thus far.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures","role":"project","kind":"project","estimatedTime":"30min"},"http://github.com/pointfreeco/swift-dependencies":{"title":"swift-dependencies","url":"http:\/\/github.com\/pointfreeco\/swift-dependencies","titleInlineContent":[{"type":"text","text":"swift-dependencies"}],"identifier":"http:\/\/github.com\/pointfreeco\/swift-dependencies","type":"link"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects":{"estimatedTime":"30min","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects","kind":"project","abstract":[{"text":"Learn how to communicate with the outside world in your features, and feed data from the outside","type":"text"},{"text":" ","type":"text"},{"text":"back into your feature.","type":"text"}],"type":"topic","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects","title":"Adding side effects","role":"project"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations#Improve-domain-modeling":{"type":"section","kind":"section","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations#Improve-domain-modeling","abstract":[{"type":"text","text":"In the previous section you learned how to model your domains so that a parent feature can"},{"type":"text","text":" "},{"type":"text","text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be"},{"type":"text","text":" "},{"type":"text","text":"able to present "},{"type":"emphasis","inlineContent":[{"type":"text","text":"many"}]},{"type":"text","text":" features."}],"role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Improve-domain-modeling","title":"Improve domain modeling"},"02-03-01-code-0000.swift":{"syntax":"swift","identifier":"02-03-01-code-0000.swift","highlights":[],"type":"file","fileType":"swift","fileName":"ContactsFeatureTests.swift","content":["import ComposableArchitecture","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func addFlow() async {","  }","}"]},"02-03-03-code-0003.swift":{"type":"file","syntax":"swift","fileType":"swift","identifier":"02-03-03-code-0003.swift","fileName":"ContactsFeatureTests.swift","highlights":[{"line":11},{"line":21},{"line":22},{"line":23}],"content":["import ComposableArchitecture","import Foundation","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func deleteContact() async {","    let store = TestStore(","      initialState: ContactsFeature.State(","        contacts: [","          Contact(id: UUID(0), name: \"Blob\"),","          Contact(id: UUID(1), name: \"Blob Jr.\"),","        ]","      )","    ) {","      ContactsFeature()","    }","    ","    await store.send(.deleteButtonTapped(id: UUID(1))) {","    }","  }","}"]},"02-03-01-code-0011.swift":{"syntax":"swift","content":["import ComposableArchitecture","import Foundation","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func addFlow() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    } withDependencies: {","      $0.uuid = .incrementing","    }","    ","    await store.send(.addButtonTapped) {","      $0.destination = .addContact(","        AddContactFeature.State(","          contact: Contact(id: UUID(0), name: \"\")","        )","      )","    }","    await store.send(\\.destination.addContact.setName, \"Blob Jr.\") {","      $0.destination?.modify(\\.addContact) { $0.contact.name = \"Blob Jr.\" }","    }","  }","}"],"fileName":"ContactsFeatureTests.swift","fileType":"swift","identifier":"02-03-01-code-0011.swift","type":"file","highlights":[{"line":25}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations":{"title":"Multiple presentation destinations","type":"topic","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations","kind":"project","abstract":[{"type":"text","text":"In the previous section you learned how to model your domains so that a parent feature can"},{"type":"text","text":" "},{"type":"text","text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be"},{"type":"text","text":" "},{"type":"text","text":"able to present "},{"inlineContent":[{"type":"text","text":"many"}],"type":"emphasis"},{"type":"text","text":" features."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations","estimatedTime":"30min","role":"project"},"02-03-01-code-0016.swift":{"syntax":"swift","content":["import ComposableArchitecture","import Foundation","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func addFlow() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    } withDependencies: {","      $0.uuid = .incrementing","    }","    ","    await store.send(.addButtonTapped) {","      $0.destination = .addContact(","        AddContactFeature.State(","          contact: Contact(id: UUID(0), name: \"\")","        )","      )","    }","    await store.send(\\.destination.addContact.setName, \"Blob Jr.\") {","      $0.destination?.modify(\\.addContact) { $0.contact.name = \"Blob Jr.\" }","    }","    await store.send(\\.destination.addContact.saveButtonTapped)","    await store.receive(","      \\.destination.addContact.delegate.saveContact,","      Contact(id: UUID(0), name: \"Blob Jr.\")","    ) {","      $0.contacts = [","        Contact(id: UUID(0), name: \"Blob Jr.\")","      ]","    }","  }","}"],"identifier":"02-03-01-code-0016.swift","highlights":[],"fileName":"ContactsFeatureTests.swift","fileType":"swift","type":"file"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Integrating-into-the-app":{"abstract":[{"text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then","type":"text"},{"text":" ","type":"text"},{"text":"learn how to hook up that feature to a SwiftUI view.","type":"text"}],"type":"section","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Integrating-into-the-app","role":"pseudoSymbol","title":"Integrating into the app","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-into-the-app","kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#Performing-a-network-request":{"kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Performing-a-network-request","type":"section","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#Performing-a-network-request","title":"Performing a network request","role":"pseudoSymbol","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"type":"text","text":" "},{"type":"text","text":"back into your feature."}]},"02-03-02-code-0003.swift":{"syntax":"swift","content":["import ComposableArchitecture","import Foundation","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func addFlowNonExhaustive() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    } withDependencies: {","      $0.uuid = .incrementing","    }","    store.exhaustivity = .off","    ","    await store.send(.addButtonTapped)","    await store.send(\\.destination.addContact.setName, \"Blob Jr.\")","  }","}"],"fileName":"ContactsFeatureTests.swift","fileType":"swift","identifier":"02-03-02-code-0003.swift","type":"file","highlights":[{"line":19}]},"02-03-03-code-0002.swift":{"fileName":"ContactsFeatureTests.swift","fileType":"swift","identifier":"02-03-03-code-0002.swift","highlights":[{"line":2},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18}],"syntax":"swift","content":["import ComposableArchitecture","import Foundation","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func deleteContact() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      initialState: ContactsFeature.State(","        contacts: [","          Contact(id: UUID(0), name: \"Blob\"),","          Contact(id: UUID(1), name: \"Blob Jr.\"),","        ]","      )","    ) {","      ContactsFeature()","    }","  }","}"],"type":"file"},"02-03-01-code-0009.swift":{"highlights":[{"line":2},{"line":20}],"fileType":"swift","fileName":"ContactsFeatureTests.swift","syntax":"swift","identifier":"02-03-01-code-0009.swift","type":"file","content":["import ComposableArchitecture","import Foundation","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func addFlow() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    } withDependencies: {","      $0.uuid = .incrementing","    }","    ","    await store.send(.addButtonTapped) {","      $0.destination = .addContact(","        AddContactFeature.State(","          contact: Contact(id: UUID(0), name: \"\")","        )","      )","    }","  }","}"]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction/dismiss":{"role":"symbol","abstract":[{"type":"text","text":"An action sent to "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" out the associated presentation state."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/dismiss","url":"\/documentation\/composablearchitecture\/presentationaction\/dismiss","type":"topic","title":"PresentationAction.dismiss","kind":"symbol","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"dismiss"}]}}}