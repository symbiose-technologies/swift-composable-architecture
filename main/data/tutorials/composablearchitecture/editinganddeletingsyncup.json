{"sections":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Let’s implement two major pieces of functionality in the detail screen: editing the sync-up and","type":"text"},{"text":" ","type":"text"},{"text":"deleting the sync-up. This will force us to face a number of common problems in app development","type":"text"},{"text":" ","type":"text"},{"text":"all at once, including view reuse, navigation, alerts, and parent-child communication patterns.","type":"text"}]}],"chapter":"Sync-up detail","title":"Editing and deleting a sync-up","kind":"hero","estimatedTimeInMinutes":30},{"kind":"tasks","tasks":[{"contentSection":[{"media":"EditingAndDeletingSyncUp-01-cover-480p.mov","kind":"contentAndMedia","mediaPosition":"trailing","content":[{"inlineContent":[{"type":"text","text":"To edit the sync-up we will reuse the "},{"type":"codeVoice","code":"SyncUpFormView"},{"type":"text","text":" that we previously used for "},{"type":"emphasis","inlineContent":[{"type":"text","text":"adding"}]},{"type":"text","text":" a"},{"type":"text","text":" "},{"type":"text","text":"sync-up. This will allow us to see how easy it is to reuse features in the Composable"},{"type":"text","text":" "},{"type":"text","text":"Architecture, and it will allow us to explore how to communicate from the child feature"},{"type":"text","text":" "},{"type":"text","text":"back to the parent."}],"type":"paragraph"}]}],"title":"Editing the sync-up","stepsSection":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We want to present the "},{"type":"codeVoice","code":"SyncUpFormView"},{"type":"text","text":" from the "},{"type":"codeVoice","code":"SyncUpDetailView"},{"type":"text","text":" in a sheet, and so we will"},{"type":"text","text":" "},{"type":"text","text":"need to use the presentation tools of the library just as we did in the "},{"type":"codeVoice","code":"SyncUpListsView"},{"type":"text","text":"."}]},{"type":"step","caption":[{"style":"note","type":"aside","name":"Note","content":[{"inlineContent":[{"text":"We have collapsed the code in the ","type":"text"},{"code":"SyncUpDetailView","type":"codeVoice"},{"text":" for now.","type":"text"}],"type":"paragraph"}]}],"media":null,"runtimePreview":null,"code":"EditingAndDeletingSyncUp-01-code-0001.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Go to the SyncUpDetail.swift file and update the ","type":"text"},{"code":"State","type":"codeVoice"},{"text":" of the feature so that it holds on","type":"text"},{"text":" ","type":"text"},{"text":"to an optional piece of ","type":"text"},{"code":"SyncUpForm.State","type":"codeVoice"},{"text":" using the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Presents()","type":"reference"},{"text":" ","type":"text"},{"text":"macro. When the state is non-","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" the sheet will be presented, and when it is ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" it will","type":"text"},{"text":" ","type":"text"},{"text":"be dismissed.","type":"text"}]}]},{"type":"step","caption":[],"media":null,"runtimePreview":null,"code":"EditingAndDeletingSyncUp-01-code-0002.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a case to the "},{"type":"codeVoice","code":"Action"},{"type":"text","text":" enum to represent the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction"},{"type":"text","text":" of the "},{"type":"codeVoice","code":"SyncUpForm"},{"type":"text","text":"."}]}]},{"type":"step","caption":[],"media":null,"runtimePreview":null,"code":"EditingAndDeletingSyncUp-01-code-0003.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Integrate the "},{"type":"codeVoice","code":"SyncUpForm"},{"type":"text","text":" reducer into the "},{"type":"codeVoice","code":"SyncUpDetail"},{"type":"text","text":" reducer by using the"},{"type":"text","text":" "},{"type":"codeVoice","code":"ComposableArchitecture\/Reducer\/ifLet(_:action:destination:fileID:filePath:line:column:)-4ub6q"},{"type":"text","text":" "},{"type":"text","text":"operator."}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The domains of the child and parent features are now fully integrated together. We can now"},{"type":"text","text":" "},{"type":"text","text":"implement the logic that causes the edit sheet to be presented."}]},{"type":"step","caption":[],"media":null,"runtimePreview":null,"code":"EditingAndDeletingSyncUp-01-code-0004.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"When the “Edit” button is tapped we can populate the "},{"type":"codeVoice","code":"editSyncUp"},{"type":"text","text":" state to represent the"},{"type":"text","text":" "},{"type":"text","text":"sheet should be presented. We can pass along the local "},{"type":"codeVoice","code":"syncUp"},{"type":"text","text":" value to the "},{"type":"codeVoice","code":"SyncUpForm"},{"type":"text","text":" so"},{"type":"text","text":" "},{"type":"text","text":"that it has the freshest data to edit."}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"That is the basics of presenting the “Edit sync-up” sheet from the sync-up detail view. There"},{"type":"text","text":" "},{"type":"text","text":"will be more to do in this reducer in a moment, but we can leave it here for now and"},{"type":"text","text":" "},{"type":"text","text":"concentrate on the view layer for a moment."}]},{"type":"step","caption":[{"style":"note","type":"aside","name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We have collapsed the implementation of the "},{"type":"codeVoice","code":"SyncUpDetail"},{"type":"text","text":" reducer in this snippet."}]}]}],"media":null,"runtimePreview":null,"code":"EditingAndDeletingSyncUp-01-code-0005.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Update the "},{"type":"codeVoice","code":"store"},{"type":"text","text":" property in the view to be "},{"type":"codeVoice","code":"@Bindable"},{"type":"text","text":" since we will need to derive"},{"type":"text","text":" "},{"type":"text","text":"bindings from the store for driving navigation from state."}]}]},{"type":"step","caption":[],"media":null,"runtimePreview":null,"code":"EditingAndDeletingSyncUp-01-code-0006.swift","content":[{"type":"paragraph","inlineContent":[{"text":"At the very bottom of the view use the ","type":"text"},{"code":"sheet(item:)","type":"codeVoice"},{"text":" modifier by deriving a binding to the","type":"text"},{"text":" ","type":"text"},{"code":"SyncUpForm","type":"codeVoice"},{"text":" domain using ","type":"text"},{"code":"SwiftUI\/Binding\/scope(state:action:fileID:filePath:line:column:)","type":"codeVoice"},{"text":".","type":"text"}]}]},{"type":"step","caption":[{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"Just as we did in the ","type":"text"},{"code":"SyncUpsListView","type":"codeVoice"},{"text":", we decided to keep the navigation","type":"text"},{"text":" ","type":"text"},{"text":"customizations (title and toolbar) in the parent domain rather than the child. This has","type":"text"},{"text":" ","type":"text"},{"text":"allowed us to provide domain specific versions of this UI for creating a new sync-up","type":"text"},{"text":" ","type":"text"},{"text":"versus editing an existing sync-up.","type":"text"}]}],"style":"note","name":"Note"}],"media":null,"runtimePreview":null,"code":"EditingAndDeletingSyncUp-01-code-0007.swift","content":[{"inlineContent":[{"type":"text","text":"Provide a navigation title and toolbar buttons to the sheet for saving and cancelling the"},{"type":"text","text":" "},{"type":"text","text":"edits made to the sync-up."}],"type":"paragraph"}]},{"type":"step","caption":[{"type":"aside","style":"note","content":[{"inlineContent":[{"text":"These actions do not exist yet. We will be creating them next.","type":"text"}],"type":"paragraph"}],"name":"Note"}],"media":null,"runtimePreview":null,"code":"EditingAndDeletingSyncUp-01-code-0008.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Send actions to the store when each of the toolbar buttons is tapped.","type":"text"}]}]},{"type":"paragraph","inlineContent":[{"text":"We have now finished integrating the ","type":"text"},{"code":"SyncUpForm","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"SyncUpDetail","type":"codeVoice"},{"text":" at the view layer, and so","type":"text"},{"text":" ","type":"text"},{"text":"all that is left is to finish integrating the features at the reducer level.","type":"text"}]},{"type":"step","caption":[],"media":null,"runtimePreview":null,"code":"EditingAndDeletingSyncUp-01-code-0009.swift","content":[{"inlineContent":[{"text":"Add the new cases to the ","type":"text"},{"code":"Action","type":"codeVoice"},{"text":" enum that are being sent from the view.","type":"text"}],"type":"paragraph"}]},{"type":"step","caption":[{"type":"aside","style":"note","name":"Note","content":[{"inlineContent":[{"type":"text","text":"Any changes the "},{"type":"codeVoice","code":"SyncUpForm"},{"type":"text","text":" made to its local "},{"type":"codeVoice","code":"syncUp"},{"type":"text","text":" state will be discarded"},{"type":"text","text":" "},{"type":"text","text":"because that state is fully disconnected from the "},{"type":"codeVoice","code":"syncUp"},{"type":"text","text":" held in the "},{"type":"codeVoice","code":"SyncUpDetail"},{"type":"text","text":"."}],"type":"paragraph"}]}],"media":null,"runtimePreview":null,"code":"EditingAndDeletingSyncUp-01-code-0010.swift","content":[{"inlineContent":[{"text":"Implement the ","type":"text"},{"type":"codeVoice","code":"cancelEditButtonTapped"},{"text":" action by simply clearing out the ","type":"text"},{"type":"codeVoice","code":"editSyncUp"},{"text":" state.","type":"text"},{"text":" ","type":"text"},{"text":"This will cause the view to dismiss the sheet.","type":"text"}],"type":"paragraph"}]},{"type":"step","caption":[],"media":null,"runtimePreview":null,"code":"EditingAndDeletingSyncUp-01-code-0011.swift","content":[{"inlineContent":[{"text":"Implement the ","type":"text"},{"code":"doneEditingButtonTapped","type":"codeVoice"},{"text":" action by grabbing the latest ","type":"text"},{"code":"syncUp","type":"codeVoice"},{"text":" value from","type":"text"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"code":"editSyncUp","type":"codeVoice"},{"text":" state, and replacing ","type":"text"},{"code":"SyncUpDetail","type":"codeVoice"},{"text":"’s state with that value.","type":"text"}],"type":"paragraph"}]},{"type":"step","caption":[],"media":"EditingAndDeletingSyncUp-01-cover-480p.mov","runtimePreview":null,"code":null,"content":[{"inlineContent":[{"text":"Run the preview to see that you can tap the “Edit” button to bring up the sync-up form","type":"text"},{"text":" ","type":"text"},{"text":"sheet. Then make some changes to the sync-up, and see that tapping “Done” causes those","type":"text"},{"text":" ","type":"text"},{"text":"changes to be committed to the sync-up in the detail screen.","type":"text"}],"type":"paragraph"}]}],"anchor":"Editing-the-sync-up"},{"contentSection":[{"mediaPosition":"trailing","content":[{"inlineContent":[{"text":"Next we will implement the logic for deleting the sync-up from the detail screen. Because","type":"text"},{"text":" ","type":"text"},{"text":"deletion is performed by a simple button, we want to protect from accidental deletions by","type":"text"},{"text":" ","type":"text"},{"text":"asking the user for confirmation using an alert. This will give us an opportunity to explore","type":"text"},{"text":" ","type":"text"},{"text":"how one can show alerts in the Composable Architecture.","type":"text"}],"type":"paragraph"}],"kind":"contentAndMedia","media":"EditingAndDeletingSyncUp-02-cover-480p.mov"}],"title":"Deleting the sync-up","stepsSection":[{"type":"paragraph","inlineContent":[{"text":"Technically, alerts can be shown in Composable Architecture features in exactly the same way","type":"text"},{"text":" ","type":"text"},{"text":"they are in vanilla SwiftUI by using the various ","type":"text"},{"code":"alert","type":"codeVoice"},{"text":" view modifiers. However, the library","type":"text"},{"text":" ","type":"text"},{"text":"comes with some tools that can improve how alerts are shown, and can make the alerts more","type":"text"},{"text":" ","type":"text"},{"text":"easily testable. We will use those tools.","type":"text"}]},{"type":"step","code":"EditingAndDeletingSyncUp-02-code-0001.swift","caption":[{"content":[{"type":"paragraph","inlineContent":[{"text":"We are pre-emptively applying the ","type":"text"},{"code":"@CasePathable","type":"codeVoice"},{"text":" macro to make it possible to write","type":"text"},{"text":" ","type":"text"},{"text":"tests against these actions in a keypath-like syntax. The ","type":"text"},{"code":"@CasePathable","type":"codeVoice"},{"text":" macro is","type":"text"},{"text":" ","type":"text"},{"text":"automatically applied to ","type":"text"},{"code":"Action","type":"codeVoice"},{"text":" enums inside reducers, but macros cannot recursively apply","type":"text"},{"text":" ","type":"text"},{"text":"themselves and so we must do it manually sometimes.","type":"text"}]}],"name":"Note","type":"aside","style":"note"}],"content":[{"inlineContent":[{"type":"text","text":"We start by modeling a new "},{"code":"Alert","type":"codeVoice"},{"type":"text","text":" enum nested "},{"type":"emphasis","inlineContent":[{"type":"text","text":"inside"}]},{"type":"text","text":" the "},{"code":"Action","type":"codeVoice"},{"type":"text","text":" enum that represents"},{"type":"text","text":" "},{"type":"text","text":"all the actions the user can take in the alert. The user can only confirm deletion or cancel"},{"type":"text","text":" "},{"type":"text","text":"deletion, and we do not have to model the cancel action. That is automatically taken care of"},{"type":"text","text":" "},{"type":"text","text":"by the library’s navigation tools."}],"type":"paragraph"}],"runtimePreview":null,"media":null},{"type":"step","caption":[{"type":"aside","style":"note","content":[{"inlineContent":[{"text":"We are using the ","type":"text"},{"type":"reference","identifier":"https:\/\/swiftpackageindex.com\/pointfreeco\/swiftui-navigation\/1.2.0\/documentation\/swiftuinavigationcore\/alertstate","isActive":true},{"text":" from our","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"http:\/\/github.com\/pointfreeco\/swiftui-navigation","isActive":true},{"text":" library, which automatically comes with the Composable","type":"text"},{"text":" ","type":"text"},{"text":"Architecture. It is a pure data description of an alert that can be shown to the user, and","type":"text"},{"text":" ","type":"text"},{"text":"it is generic over the type of actions that can be sent from the alert.","type":"text"}],"type":"paragraph"}],"name":"Note"}],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add another piece of optional state using the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Presents()","isActive":true},{"type":"text","text":" macro,"},{"type":"text","text":" "},{"type":"text","text":"this time representing whether or not an alert is shown."}]}],"media":null,"code":"EditingAndDeletingSyncUp-02-code-0002.swift","runtimePreview":null},{"type":"step","caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"Add another ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","type":"reference"},{"text":" case to the ","type":"text"},{"code":"Action","type":"codeVoice"},{"text":" enum that","type":"text"},{"text":" ","type":"text"},{"text":"represents the actions the alert can send.","type":"text"}]}],"media":null,"code":"EditingAndDeletingSyncUp-02-code-0003.swift","runtimePreview":null},{"type":"step","caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"Handle the ","type":"text"},{"code":".alert","type":"codeVoice"},{"text":" case in the reducer, and use the","type":"text"},{"text":" ","type":"text"},{"code":"ComposableArchitecture\/Reducer\/ifLet(_:action:then:fileID:line:)-7s8h2","type":"codeVoice"},{"text":" operator","type":"text"},{"text":" ","type":"text"},{"text":"again to integrate the alert’s logic into the ","type":"text"},{"code":"SyncUpDetail","type":"codeVoice"},{"text":" reducer.","type":"text"}]}],"media":null,"code":"EditingAndDeletingSyncUp-02-code-0004.swift","runtimePreview":null},{"type":"paragraph","inlineContent":[{"text":"Integrating the logic of an alert into a feature is a bit different from integrating the","type":"text"},{"text":" ","type":"text"},{"text":"logic of a fully fledged feature. This is because alerts are immediately dismissed when a","type":"text"},{"text":" ","type":"text"},{"text":"button is tapped and has no internal logic or behavior of its own. For this reason there is","type":"text"},{"text":" ","type":"text"},{"text":"no reducer to specify in the trailing closure of ","type":"text"},{"code":"ifLet","type":"codeVoice"},{"text":", and in fact it can be removed.","type":"text"}]},{"type":"step","caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"Remove the trailing closure from the ","type":"text"},{"code":"ifLet","type":"codeVoice"},{"text":" because the alert does not have any additional","type":"text"},{"text":" ","type":"text"},{"text":"behavior to execute.","type":"text"}]}],"media":null,"code":"EditingAndDeletingSyncUp-02-code-0005.swift","runtimePreview":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"We now have the alert integrated into the "},{"code":"SyncUpDetail","type":"codeVoice"},{"type":"text","text":", but we aren’t yet populating the"},{"type":"text","text":" "},{"code":"alert","type":"codeVoice"},{"type":"text","text":" state to actually present the alert. This is done by constructing a value of"},{"type":"text","text":" "},{"code":"AlertState","type":"codeVoice"},{"type":"text","text":", which is a data type that represents all of the properties of an alert, such"},{"type":"text","text":" "},{"type":"text","text":"as its title, message and buttons. Its primary purpose is to be "},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":"-friendly so that"},{"type":"text","text":" "},{"type":"text","text":"alerts can be tested."}]},{"type":"step","caption":[],"content":[{"inlineContent":[{"type":"text","text":"Populate the "},{"type":"codeVoice","code":"alert"},{"type":"text","text":" property by constructing "},{"type":"codeVoice","code":"AlertState"},{"type":"text","text":". This is done by providing three"},{"type":"text","text":" "},{"type":"text","text":"trailing closures: one for the title, one for the buttons to show in the alert, and another"},{"type":"text","text":" "},{"type":"text","text":"for the message in the alert."}],"type":"paragraph"}],"media":null,"code":"EditingAndDeletingSyncUp-02-code-0006.swift","runtimePreview":null},{"type":"paragraph","inlineContent":[{"text":"That’s all it takes to create ","type":"text"},{"code":"AlertState","type":"codeVoice"},{"text":". It contains all of the information for the view","type":"text"},{"text":" ","type":"text"},{"text":"to display the alert, which we will do in a moment.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"However, constructing ","type":"text"},{"type":"codeVoice","code":"AlertState"},{"text":" values can be quite long, and so sometimes you may want","type":"text"},{"text":" ","type":"text"},{"text":"to extract their creation to an extension on ","type":"text"},{"type":"codeVoice","code":"AlertState"},{"text":".","type":"text"}]},{"type":"step","caption":[],"content":[{"inlineContent":[{"type":"text","text":"Extract the alert state to an extension on "},{"code":"AlertState","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}],"media":null,"code":"EditingAndDeletingSyncUp-02-code-0007.swift","runtimePreview":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"Next we need to handle the new alert actions in the reducer."}]},{"type":"step","caption":[],"content":[{"inlineContent":[{"type":"text","text":"Destructure the new "},{"type":"codeVoice","code":".alert"},{"type":"text","text":" actions in the "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement of the core "},{"type":"codeVoice","code":"Reduce"},{"type":"text","text":"."}],"type":"paragraph"}],"media":null,"code":"EditingAndDeletingSyncUp-02-code-0008.swift","runtimePreview":null},{"type":"step","caption":[],"content":[{"inlineContent":[{"text":"There is nothing to do in the ","type":"text"},{"type":"codeVoice","code":".alert(.dismiss)"},{"text":" case because the ","type":"text"},{"type":"codeVoice","code":"ifLet"},{"text":" operator will","type":"text"},{"text":" ","type":"text"},{"text":"automatically clean up the state for you.","type":"text"}],"type":"paragraph"}],"media":null,"code":"EditingAndDeletingSyncUp-02-code-0009.swift","runtimePreview":null},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":".alert(.presented)","type":"codeVoice"},{"text":" case is more subtle, though. This action is sent when the user","type":"text"},{"text":" ","type":"text"},{"text":"confirms that they want to delete the sync-up, and so somehow we have to remove the ","type":"text"},{"code":"syncUp","type":"codeVoice"},{"text":" we","type":"text"},{"text":" ","type":"text"},{"text":"have in state from the collection of sync-ups that is in the ","type":"text"},{"code":"SyncUpsList","type":"codeVoice"},{"text":" feature.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, remember that in "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PersistingSyncUps","isActive":true},{"text":" we showed how to persist the collection","type":"text"},{"text":" ","type":"text"},{"text":"of sync-ups using the ","type":"text"},{"code":"@Shared","type":"codeVoice"},{"text":" property wrapper with the ","type":"text"},{"code":"fileStorage","type":"codeVoice"},{"text":" persistence strategy.","type":"text"},{"text":" ","type":"text"},{"text":"This gives the app ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"global","type":"text"}]},{"type":"text","text":" access to that state, and we can make edits to it from anywhere."},{"type":"text","text":" "},{"type":"text","text":"We can even do it directly inline in the "},{"type":"codeVoice","code":".confirmButtonTapped"},{"type":"text","text":" action."}]},{"type":"step","caption":[{"name":"Note","type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"This does not actually load data from disk. The data has already been loaded from","type":"text"},{"text":" ","type":"text"},{"text":"disk and cached in the ","type":"text"},{"code":"@Shared","type":"codeVoice"},{"text":" reference. This is only giving us access to that","type":"text"},{"text":" ","type":"text"},{"text":"reference.","type":"text"}]}]}],"content":[{"inlineContent":[{"text":"Use the ","type":"text"},{"type":"codeVoice","code":"@Shared"},{"text":" property wrapper with the ","type":"text"},{"type":"codeVoice","code":".syncUps"},{"text":" key to get a reference to the","type":"text"},{"text":" ","type":"text"},{"text":"sync-ups loaded from disk.","type":"text"}],"type":"paragraph"}],"media":null,"code":"EditingAndDeletingSyncUp-02-code-0010.swift","runtimePreview":null},{"type":"step","caption":[],"content":[{"inlineContent":[{"type":"text","text":"Use the "},{"type":"codeVoice","code":"id"},{"type":"text","text":" of the sync-up held in the detail’s state to remove it from the "},{"type":"codeVoice","code":"syncUps"},{"type":"text","text":" "},{"type":"text","text":"collection persisted to disk."}],"type":"paragraph"}],"media":null,"code":"EditingAndDeletingSyncUp-02-code-0011.swift","runtimePreview":null},{"type":"paragraph","inlineContent":[{"text":"That’s all it takes to delete the sync-up from the persisted array of sync-ups. It may trouble","type":"text"},{"text":" ","type":"text"},{"text":"you that we are reaching out to a seemingly global ","type":"text"},{"type":"codeVoice","code":"syncUps"},{"text":" variable and mutating it.","type":"text"},{"text":" ","type":"text"},{"text":"However, this is no different than making an API request to delete data on some external","type":"text"},{"text":" ","type":"text"},{"text":"server. Typically for that situation we use dependencies to make the API operation testable,","type":"text"},{"text":" ","type":"text"},{"text":"but we don’t need to do that with ","type":"text"},{"type":"codeVoice","code":"@Shared"},{"text":". It is testable by default.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"If it truly bothers you to access the global ","type":"text"},{"code":"syncUps","type":"codeVoice"},{"text":" state from within the detail feature,","type":"text"},{"text":" ","type":"text"},{"text":"then you can instead send a “delegate” action from the detail that the parent feature","type":"text"},{"text":" ","type":"text"},{"text":"intercepts and implements the deleting logic. That will allow the parent to handle deletion","type":"text"},{"text":" ","type":"text"},{"text":"while the child remains ignorant to those details.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"There is one more addition we want to make to the deletion functionality before moving on.","type":"text"},{"text":" ","type":"text"},{"text":"When the user confirms deletion of the sync-up we should dismiss the detail view from being","type":"text"},{"text":" ","type":"text"},{"text":"presented, as it’s no longer relevant. After all, the sync-up is being deleted!","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"This allows us to demonstrate another superpower of the Composable Architecture. The library","type":"text"},{"text":" ","type":"text"},{"text":"comes with a powerful dependency called ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DismissEffect","isActive":true,"type":"reference"},{"text":" that allows a","type":"text"},{"text":" ","type":"text"},{"text":"feature to dismiss itself if it is being presented, and if the feature was integrated into the","type":"text"},{"text":" ","type":"text"},{"text":"parent using the library’s navigation tools. This can be powerful because it allows the child","type":"text"},{"text":" ","type":"text"},{"text":"features to encapsulate as much of their logic as possible without having to explicitly","type":"text"},{"text":" ","type":"text"},{"text":"communicate with the parent. It works similarly to SwiftUI’s ","type":"text"},{"code":"@Environment(\\.dismiss)","type":"codeVoice"},{"text":", but it","type":"text"},{"text":" ","type":"text"},{"text":"is also distinct from it.","type":"text"}]},{"type":"step","caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a dependency on "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DismissEffect","isActive":true},{"type":"text","text":" to the "},{"type":"codeVoice","code":"SyncUpDetail"},{"type":"text","text":" feature"},{"type":"text","text":" "},{"type":"text","text":"by using the "},{"type":"codeVoice","code":"@Dependency"},{"type":"text","text":" property wrapper."}]}],"media":null,"code":"EditingAndDeletingSyncUp-02-code-0012.swift","runtimePreview":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"To dismiss a child feature with the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DismissEffect","isActive":true},{"type":"text","text":" dependency you"},{"type":"text","text":" "},{"type":"text","text":"just have to invoke it as if it’s a function: "},{"type":"codeVoice","code":"dismiss()"},{"type":"text","text":". However, the dismiss effect is an"},{"type":"text","text":" "},{"type":"text","text":"asynchronous function, and therefore it cannot be invoked directly in the reducer. It can"},{"type":"text","text":" "},{"type":"text","text":"only be invoked inside an effect, and so we must use the"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:filePath:line:column:)","isActive":true},{"type":"text","text":" effect, which"},{"type":"text","text":" "},{"type":"text","text":"gives us an asynchronous context to execute the work in, as well as a handle on"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Send","isActive":true},{"type":"text","text":" for sending actions back into the system if needed."}]},{"type":"step","caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Return a "},{"type":"codeVoice","code":".run"},{"type":"text","text":" effect to invoke the "},{"type":"codeVoice","code":"dismiss"},{"type":"text","text":" effect."}]}],"media":null,"code":"EditingAndDeletingSyncUp-02-code-0013.swift","runtimePreview":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"Next we need to integrate the alert into the view layer so that an alert actually shows when"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"alert"},{"type":"text","text":" state becomes non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}]},{"type":"step","caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"In the ","type":"text"},{"code":"SyncUpDetailView","type":"codeVoice"},{"text":", go to the bottom and use the ","type":"text"},{"code":"SwiftUI\/View\/alert(_:)","type":"codeVoice"},{"text":" view","type":"text"},{"text":" ","type":"text"},{"text":"modifier that comes with the library. This will cause an alert to be presented when the","type":"text"},{"text":" ","type":"text"},{"code":"alert","type":"codeVoice"},{"text":" state is populated.","type":"text"}]}],"media":null,"code":"EditingAndDeletingSyncUp-02-code-0014.swift","runtimePreview":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"We have now finished the sync-up deletion functionality in the detail screen. Unfortunately we"},{"type":"text","text":" "},{"type":"text","text":"can’t yet test deletion because we still have no way to navigate to the detail screen from the"},{"type":"text","text":" "},{"type":"text","text":"sync-ups list screen."}]},{"type":"paragraph","inlineContent":[{"text":"But, before getting to that, let’s take a quick side excursion to clean up our domain","type":"text"},{"text":" ","type":"text"},{"text":"modeling in this feature.","type":"text"}]}],"anchor":"Deleting-the-sync-up"},{"anchor":"More-concise-domain-modeling","stepsSection":[{"runtimePreview":null,"media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a whole new reducer nested inside the "},{"type":"codeVoice","code":"SyncUpDetail"},{"type":"text","text":" called "},{"type":"codeVoice","code":"Destination"},{"type":"text","text":". This"},{"type":"text","text":" "},{"type":"text","text":"reducer will represent all of the places one can navigate to from the detail screen, and"},{"type":"text","text":" "},{"type":"text","text":"that will give us a single piece of state to drive navigation rather than having multiple"},{"type":"text","text":" "},{"type":"text","text":"optional values."}]}],"code":"EditingAndDeletingSyncUp-03-code-0001.swift","caption":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Further"}],"type":"emphasis"},{"type":"text","text":", the "},{"type":"codeVoice","code":"Destination"},{"type":"text","text":" type will be an "},{"inlineContent":[{"text":"enum","type":"text"}],"type":"emphasis"},{"type":"text","text":". This is different than other reducers"},{"type":"text","text":" "},{"type":"text","text":"we have encountered so far. The "},{"overridingTitleInlineContent":[{"code":"@Reducer","type":"codeVoice"}],"isActive":true,"type":"reference","overridingTitle":"@Reducer","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},{"type":"text","text":" has special behavior when"},{"type":"text","text":" "},{"type":"text","text":"applied to enums that allows one to compose multiple reducers into a single package."}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"As we have seen it is important for "},{"code":"State","type":"codeVoice"},{"type":"text","text":" types to be "},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":" for"},{"type":"text","text":" "},{"type":"text","text":"testing, and so we are proactively making the "},{"code":"State","type":"codeVoice"},{"type":"text","text":" type generated for the "},{"code":"Destination","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"reducer equatable "},{"type":"emphasis","inlineContent":[{"text":"via","type":"text"}]},{"type":"text","text":" extension."}]}],"type":"aside","name":"Important","style":"important"},{"content":[{"type":"paragraph","inlineContent":[{"text":"We have collapsed the implementation of ","type":"text"},{"type":"codeVoice","code":"SyncUpDetail"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"SyncUpDetailView"},{"text":" in","type":"text"},{"text":" ","type":"text"},{"text":"this code snippet.","type":"text"}]}],"type":"aside","name":"Note","style":"note"}],"type":"step"},{"runtimePreview":null,"media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a case for each destination that can be navigated to from this feature. Each case will"},{"type":"text","text":" "},{"type":"text","text":"hold onto the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"reducer"}]},{"type":"text","text":" type of the feature being navigated to, except for the "},{"type":"codeVoice","code":"alert"},{"type":"text","text":" case."},{"type":"text","text":" "},{"type":"text","text":"It will simply hold onto "},{"type":"codeVoice","code":"AlertState"},{"type":"text","text":"."}]}],"code":"EditingAndDeletingSyncUp-03-code-0002.swift","caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We will also move the "},{"code":"Alert","type":"codeVoice"},{"text":" action enum from the ","type":"text"},{"code":"SyncUpDetail.Action","type":"codeVoice"},{"text":" type to be nested","type":"text"},{"text":" ","type":"text"},{"text":"inside ","type":"text"},{"code":"Destination","type":"codeVoice"},{"text":".","type":"text"}]}],"type":"step"},{"inlineContent":[{"type":"text","text":"That is all it takes to define a dedicated "},{"type":"codeVoice","code":"Destination"},{"type":"text","text":" reducer that encapsulates all of the"},{"type":"text","text":" "},{"type":"text","text":"logic and behavior of the features that can be navigated to. You can right click on the"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","isActive":true,"overridingTitleInlineContent":[{"code":"@Reducer","type":"codeVoice"}],"overridingTitle":"@Reducer"},{"type":"text","text":" macro and select “Expand macro” in Xcode to see all of the code"},{"type":"text","text":" "},{"type":"text","text":"that is being written for you."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Next we need to integrate this new "},{"type":"codeVoice","code":"Destination"},{"type":"text","text":" reducer into the main "},{"type":"codeVoice","code":"SyncUpDetail"},{"type":"text","text":" reducer."}],"type":"paragraph"},{"runtimePreview":null,"media":null,"content":[{"inlineContent":[{"text":"Replace the two independent pieces of optional state in ","type":"text"},{"code":"SyncUpDetail.State","type":"codeVoice"},{"text":" for a single","type":"text"},{"text":" ","type":"text"},{"text":"piece of optional ","type":"text"},{"code":"Destination.State","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}],"code":"EditingAndDeletingSyncUp-03-code-0003.swift","caption":[{"inlineContent":[{"type":"text","text":"We now have just one single piece of optional state that determines if navigation is active"},{"type":"text","text":" "},{"type":"text","text":"and where we are being navigated to."}],"type":"paragraph"},{"style":"note","type":"aside","content":[{"inlineContent":[{"type":"text","text":"There will be compiler errors after completing this step, but we will fix them in"},{"type":"text","text":" "},{"type":"text","text":"upcoming steps."}],"type":"paragraph"}],"name":"Note"}],"type":"step"},{"runtimePreview":null,"media":null,"content":[{"inlineContent":[{"type":"text","text":"Replace the two action cases for the alert and edit sheet with a single case that holds on"},{"type":"text","text":" "},{"type":"text","text":"to a "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","type":"reference","isActive":true},{"type":"text","text":" of "},{"code":"Destination.Action","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}],"code":"EditingAndDeletingSyncUp-03-code-0004.swift","caption":[],"type":"step"},{"runtimePreview":null,"media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Replace the two "},{"type":"codeVoice","code":"ifLet"},{"type":"text","text":" operators at the bottom of "},{"type":"codeVoice","code":"SyncUpDetail"},{"type":"text","text":" with a single one that"},{"type":"text","text":" "},{"type":"text","text":"composes the "},{"type":"codeVoice","code":"Destination"},{"type":"text","text":" reducer."}]}],"code":"EditingAndDeletingSyncUp-03-code-0005.swift","caption":[{"style":"note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"Due to the expanded code from the ","type":"text"},{"isActive":true,"overridingTitle":"@Reducer","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","overridingTitleInlineContent":[{"type":"codeVoice","code":"@Reducer"}],"type":"reference"},{"text":" macro we don’t even","type":"text"},{"text":" ","type":"text"},{"text":"need to provide a trailing closure to ","type":"text"},{"code":"ifLet","type":"codeVoice"},{"text":". It can be inferred automatically.","type":"text"}]}],"name":"Note"}],"type":"step"},{"inlineContent":[{"type":"text","text":"That is all it takes to integrate the "},{"type":"codeVoice","code":"Destination"},{"type":"text","text":" reducer into the "},{"type":"codeVoice","code":"SyncUpDetail"},{"type":"text","text":" reducer."},{"type":"text","text":" "},{"type":"text","text":"Next we have to update the core "},{"type":"codeVoice","code":"Reduce"},{"type":"text","text":" to handle the new destination state and actions"},{"type":"text","text":" "},{"type":"text","text":"properly."}],"type":"paragraph"},{"runtimePreview":null,"media":null,"content":[{"inlineContent":[{"type":"text","text":"Update the pattern matching for the alert to go through the "},{"type":"codeVoice","code":".destination(.presented)"},{"type":"text","text":""},{"type":"text","text":" "},{"type":"text","text":"case."}],"type":"paragraph"}],"code":"EditingAndDeletingSyncUp-03-code-0006.swift","caption":[],"type":"step"},{"runtimePreview":null,"media":null,"content":[{"inlineContent":[{"type":"text","text":"Return "},{"type":"codeVoice","code":".none"},{"type":"text","text":" for all other "},{"type":"codeVoice","code":".destination"},{"type":"text","text":" actions."}],"type":"paragraph"}],"code":"EditingAndDeletingSyncUp-03-code-0007.swift","caption":[],"type":"step"},{"content":[{"inlineContent":[{"text":"Update where we ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" out ","type":"text"},{"code":"editSyncUp","type":"codeVoice"},{"text":" state to instead ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" out the ","type":"text"},{"code":"destination","type":"codeVoice"},{"text":" state.","type":"text"}],"type":"paragraph"}],"media":null,"type":"step","runtimePreview":null,"caption":[],"code":"EditingAndDeletingSyncUp-03-code-0008.swift"},{"content":[{"type":"paragraph","inlineContent":[{"text":"Update where we populate the ","type":"text"},{"code":"alert","type":"codeVoice"},{"text":" state to instead point the ","type":"text"},{"code":"destination","type":"codeVoice"},{"text":" state to the","type":"text"},{"text":" ","type":"text"},{"code":".alert","type":"codeVoice"},{"text":" case.","type":"text"}]}],"media":null,"type":"step","runtimePreview":null,"caption":[],"code":"EditingAndDeletingSyncUp-03-code-0009.swift"},{"content":[{"inlineContent":[{"text":"Update the ","type":"text"},{"type":"codeVoice","code":".doneEditingButtonTapped"},{"text":" action by grabbing the edited sync-up from the ","type":"text"},{"type":"codeVoice","code":".edit"},{"text":" ","type":"text"},{"text":"case of the ","type":"text"},{"type":"codeVoice","code":"destination"},{"text":" enum.","type":"text"}],"type":"paragraph"}],"media":null,"type":"step","runtimePreview":null,"caption":[],"code":"EditingAndDeletingSyncUp-03-code-0010.swift"},{"content":[{"type":"paragraph","inlineContent":[{"text":"Update where we previously populated the ","type":"text"},{"code":"editSyncUp","type":"codeVoice"},{"text":" state to instead point the","type":"text"},{"text":" ","type":"text"},{"code":"destination","type":"codeVoice"},{"text":" enum to the ","type":"text"},{"code":".edit","type":"codeVoice"},{"text":" case with some ","type":"text"},{"code":"SyncUpForm","type":"codeVoice"},{"text":" state.","type":"text"}]}],"media":null,"type":"step","runtimePreview":null,"caption":[],"code":"EditingAndDeletingSyncUp-03-code-0011.swift"},{"content":[{"inlineContent":[{"type":"text","text":"Update the extension on "},{"type":"codeVoice","code":"AlertState"},{"type":"text","text":" to point to the "},{"type":"codeVoice","code":"Destination"},{"type":"text","text":"’s alert action."}],"type":"paragraph"}],"media":null,"type":"step","runtimePreview":null,"caption":[],"code":"EditingAndDeletingSyncUp-03-code-0012.swift"},{"inlineContent":[{"type":"text","text":"That’s all it takes to fully integrate the "},{"code":"Destination","type":"codeVoice"},{"type":"text","text":" reducer into the "},{"code":"SyncUpDetail","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"reducer. Next we have to update the view so that we can drive the presentation of the alert"},{"type":"text","text":" "},{"type":"text","text":"and sheet from the destination enum."}],"type":"paragraph"},{"content":[{"inlineContent":[{"type":"text","text":"Update the "},{"code":"SwiftUI\/View\/alert(_:)","type":"codeVoice"},{"type":"text","text":" and "},{"code":".sheet(item:)","type":"codeVoice"},{"type":"text","text":" modifiers at the bottom of the"},{"type":"text","text":" "},{"type":"text","text":"view so that the "},{"code":"$store.scope","type":"codeVoice"},{"type":"text","text":" further singles out the case for driving navigation."}],"type":"paragraph"}],"media":null,"code":"EditingAndDeletingSyncUp-03-code-0013.swift","caption":[],"runtimePreview":null,"type":"step"},{"inlineContent":[{"type":"text","text":"That is all it takes to finish the refactor to use an enum to drive navigation rather than"},{"type":"text","text":" "},{"type":"text","text":"multiple optionals. Our domain is more concisely modeled, and we can know precisely when"},{"type":"text","text":" "},{"type":"text","text":"something is being presented. We merely have to check if "},{"type":"codeVoice","code":"destination != nil"},{"type":"text","text":"."}],"type":"paragraph"}],"contentSection":[{"content":[{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"SyncUpDetail"},{"text":" works well enough right now, but there is something not ideal about how its","type":"text"},{"text":" ","type":"text"},{"text":"domain is modeled. We are representing the alert and edit sheet using two independent optional","type":"text"},{"text":" ","type":"text"},{"text":"values, which allows for invalid states. We only expect that either the alert ","type":"text"},{"inlineContent":[{"type":"text","text":"or"}],"type":"emphasis"},{"text":" sheet is","type":"text"},{"text":" ","type":"text"},{"text":"shown at one time, but it is possible for both optionals to be non-","type":"text"},{"type":"codeVoice","code":"nil"},{"text":" at the same time.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"And this problem gets bigger with the most destinations you can navigate to from a feature.","type":"text"},{"text":" ","type":"text"},{"text":"For example, if there are 4 possible destinations one can navigate to, then modeling that","type":"text"},{"text":" ","type":"text"},{"text":"with optionals leads to 2^4 = 16 possible states, only 5 of which are valid. Either all","type":"text"},{"text":" ","type":"text"},{"text":"optionals should be ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" or exactly one should be non-","type":"text"},{"code":"nil","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This kind of inconcise domain modeling can leak complexity into your features, and luckily"},{"type":"text","text":" "},{"type":"text","text":"there is a better way."}],"type":"paragraph"}],"kind":"contentAndMedia","mediaPosition":"trailing"}],"title":"More concise domain modeling"}]},{"action":{"overridingTitle":"Get started","overridingTitleInlineContent":[{"text":"Get started","type":"text"}],"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpDetail","type":"reference"},"featuredEyebrow":"Tutorial","title":"Testing the sync-up detail","kind":"callToAction","abstract":[{"type":"text","text":"The "},{"code":"SyncUpDetail","type":"codeVoice"},{"type":"text","text":" feature has slowly become quite complex. It now handles two forms of"},{"type":"text","text":" "},{"type":"text","text":"navigation (an alert and sheet), it models navigation state with a single enum, and it"},{"type":"text","text":" "},{"type":"text","text":"updates the parent feature via a shared property. It’s about time we got some test"},{"type":"text","text":" "},{"type":"text","text":"coverage on this feature so we can be sure it works as we expect, and so that we can make future"},{"type":"text","text":" "},{"type":"text","text":"changes with confidence."}]}],"kind":"project","hierarchy":{"modules":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/What-is-SyncUps-","projects":[{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/WhatIsSyncUps#A-tour-of-SyncUps","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/WhatIsSyncUps#Create-the-SyncUps-project","kind":"task"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/WhatIsSyncUps"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Lists-of-sync-ups","projects":[{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps#Domain-models","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps#SyncUpsList-feature","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps#A-handy-debugging-tool","kind":"task"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps"},{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingListOfSyncUps#Writing-your-first-test","kind":"task"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingListOfSyncUps"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/New-sync-up-form","projects":[{"sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm#Sync-up-form-basics"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm#Form-focus-an-approach"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm#Form-focus-a-better-approach"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm"},{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpForm#Removing-attendees","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpForm#Adding-attendees","kind":"task"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpForm"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Presenting-the-sync-up-form","projects":[{"sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm#Integrating-the-feature-domains-together"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm#Integrating-the-feature-views-together"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm#Adding-a-new-sync-up-to-the-list"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm"},{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpFormPresentation#Adding-a-sync-up","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpFormPresentation#Non-exhaustive-testing","kind":"task"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpFormPresentation"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Persisting-sync-ups-to-disk","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PersistingSyncUps","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PersistingSyncUps#Persisting-data-to-disk","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PersistingSyncUps#Testing-persistence","kind":"task"}]}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Sync-up-detail","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetail","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetail#Create-the-sync-up-detail"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp#Editing-the-sync-up"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp#Deleting-the-sync-up"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp#More-concise-domain-modeling"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpDetail","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpDetail#Testing-the-edit-flow","kind":"task"}]}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Navigating-to-sync-up-detail","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation#Creating-the-app-feature"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation#Creating-the-app-view"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation#Navigating-to-the-detail"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/MeetingNavigation","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/MeetingNavigation#The-meeting-screen","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/MeetingNavigation#Navigate-to-a-meeting","kind":"task"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingNavigation","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingNavigation#Deleting-a-sync-up"}]}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Record-meeting","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/RecordMeetingFeature","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/RecordMeetingFeature#Create-a-new-feature"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/RecordMeetingFeature#Navigating-to-the-record-meeting-feature"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#A-basic-timer"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#Controlling-dependencies-early"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#Ending-the-meeting-early"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#Testing-the-timer"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingSpeechRecognizer","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingSpeechRecognizer#Asking-for-speech-recognition-permission"}]}]}],"paths":[["doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps","doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/$volume","doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Sync-up-detail"]],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps"},"schemaVersion":{"major":0,"minor":3,"patch":0},"variants":[{"paths":["\/tutorials\/composablearchitecture\/editinganddeletingsyncup"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"categoryPathComponent":"BuildingSyncUps","category":"Building SyncUps","title":"Editing and deleting a sync-up","role":"project"},"identifier":{"url":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp","interfaceLanguage":"swift"},"references":{"EditingAndDeletingSyncUp-02-code-0003.swift":{"highlights":[{"line":14}],"syntax":"swift","fileName":"SyncUpDetail.swift","fileType":"swift","identifier":"EditingAndDeletingSyncUp-02-code-0003.swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @ObservableState","  struct State: Equatable {","    @Presents var alert: AlertState<Action.Alert>?","    @Presents var editSyncUp: SyncUpForm.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case alert(PresentationAction<Alert>)","    case cancelEditButtonTapped","    case deleteButtonTapped","    case doneEditingButtonTapped","    case editButtonTapped","    case editSyncUp(PresentationAction<SyncUpForm.Action>)","    @CasePathable","    enum Alert {","      case confirmButtonTapped","    }","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .cancelEditButtonTapped:","        state.editSyncUp = nil","        return .none","","      case .deleteButtonTapped:","        return .none","","      case .doneEditingButtonTapped:","        guard let editedSyncUp = state.editSyncUp?.syncUp","        else { return .none }","        state.$syncUp.withLock { $0 = editedSyncUp }","        state.editSyncUp = nil","        return .none","","      case .editButtonTapped:","        state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        return .none","","      case .editSyncUp:","        return .none","      }","    }","    .ifLet(\\.$editSyncUp, action: \\.editSyncUp) {","      SyncUpForm()","    }","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"type":"file"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction":{"url":"\/documentation\/composablearchitecture\/presentationaction","title":"PresentationAction","role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PresentationAction","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","kind":"symbol","abstract":[{"text":"A wrapper type for actions that can be presented.","type":"text"}],"type":"topic","navigatorTitle":[{"text":"PresentationAction","kind":"identifier"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ListsOfSyncUps":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps","url":"\/tutorials\/composablearchitecture\/listsofsyncups","title":"Lists of sync-ups","type":"topic","role":"project","kind":"project","abstract":[{"type":"text","text":"We will begin building the SyncUps app from scratch by implementing the feature that powers the"},{"type":"text","text":" "},{"type":"text","text":"list of sync-ups. It starts out as a simple feature, but it will become increasingly complex as"},{"type":"text","text":" "},{"type":"text","text":"the app evolves."}],"estimatedTime":"10min"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/RecordMeetingFeature":{"type":"topic","title":"The RecordMeeting feature","url":"\/tutorials\/composablearchitecture\/recordmeetingfeature","kind":"project","role":"project","estimatedTime":"5min","abstract":[{"type":"text","text":"Let’s get the basics of a new feature into place that we can navigate to, and then we will"},{"type":"text","text":" "},{"type":"text","text":"slowly layer on its complex logic and behavior, such as the timer and speech recognizer."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/RecordMeetingFeature"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/Navigating-to-sync-up-detail":{"abstract":[],"type":"topic","kind":"article","title":"Navigating to sync-up detail","url":"\/tutorials\/buildingsyncups\/navigating-to-sync-up-detail","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Navigating-to-sync-up-detail","role":"article"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/What-is-SyncUps-":{"title":"What is SyncUps?","role":"article","url":"\/tutorials\/buildingsyncups\/what-is-syncups-","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/What-is-SyncUps-","type":"topic","abstract":[],"kind":"article"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpDetailNavigation#Creating-the-app-feature":{"url":"\/tutorials\/composablearchitecture\/syncupdetailnavigation#Creating-the-app-feature","title":"Creating the app feature","type":"section","abstract":[{"type":"text","text":"We will wrap the application built so far in a "},{"code":"NavigationStack","type":"codeVoice"},{"type":"text","text":" so that we can navigate to"},{"type":"text","text":" "},{"type":"text","text":"the detail screen. To do this we will create a new root-level feature that will be responsible"},{"type":"text","text":" "},{"type":"text","text":"for implementing the logic of the stack and integrating all of the features together."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation#Creating-the-app-feature","kind":"section","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PresentingSyncUpForm":{"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm","kind":"project","title":"Presenting the sync-up form","estimatedTime":"10min","role":"project","abstract":[{"text":"We now have two features built: the sync-ups list and the sync-up form. These features do not","type":"text"},{"text":" ","type":"text"},{"text":"exist in isolation, but rather are meant to be integrated in a deep way. One should be able to","type":"text"},{"text":" ","type":"text"},{"text":"navigate to the sync-up form from the list view, enter the details of a new sync-up, and then","type":"text"},{"text":" ","type":"text"},{"text":"add that sync-up to the root list.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/presentingsyncupform"},"EditingAndDeletingSyncUp-01-code-0006.swift":{"syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  \/\/ ...","}","","struct SyncUpDetailView: View {","  @Bindable var store: StoreOf<SyncUpDetail>","","  var body: some View {","    Form {","      Section {","        NavigationLink {","        } label: {","          Label(\"Start Meeting\", systemImage: \"timer\")","            .font(.headline)","            .foregroundStyle(Color.accentColor)","        }","        HStack {","          Label(\"Length\", systemImage: \"clock\")","          Spacer()","          Text(store.syncUp.duration.formatted(.units()))","        }","","        HStack {","          Label(\"Theme\", systemImage: \"paintpalette\")","          Spacer()","          Text(store.syncUp.theme.name)","            .padding(4)","            .foregroundStyle(store.syncUp.theme.accentColor)","            .background(store.syncUp.theme.mainColor)","            .clipShape(.rect(cornerRadius: 4))","        }","      } header: {","        Text(\"Sync-up Info\")","      }","","      if !store.syncUp.meetings.isEmpty {","        Section {","          ForEach(store.syncUp.meetings) { meeting in","            Button {","            } label: {","              HStack {","                Image(systemName: \"calendar\")","                Text(meeting.date, style: .date)","                Text(meeting.date, style: .time)","              }","            }","          }","        } header: {","          Text(\"Past meetings\")","        }","      }","","      Section {","        ForEach(store.syncUp.attendees) { attendee in","          Label(attendee.name, systemImage: \"person\")","        }","      } header: {","        Text(\"Attendees\")","      }","","      Section {","        Button(\"Delete\", role: .destructive) {","          store.send(.deleteButtonTapped)","        }","        .frame(maxWidth: .infinity)","      }","    }","    .navigationTitle(Text(store.syncUp.title))","    .toolbar {","      Button(\"Edit\") {","        store.send(.editButtonTapped)","      }","    }","    .sheet(item: $store.scope(state: \\.editSyncUp, action: \\.editSyncUp)) { editSyncUpStore in","      NavigationStack {","        SyncUpFormView(store: editSyncUpStore)","      }","    }","  }","}","","#Preview {","  NavigationStack {","    SyncUpDetailView(","      store: Store(","        initialState: SyncUpDetail.State(","          syncUp: Shared(value: .mock)","        )","      ) {","        SyncUpDetail()","      }","    )","  }","}"],"identifier":"EditingAndDeletingSyncUp-01-code-0006.swift","fileName":"SyncUpDetail.swift","type":"file","fileType":"swift","highlights":[{"line":78},{"line":79},{"line":80},{"line":81},{"line":82}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/MeetingNavigation#Navigate-to-a-meeting":{"role":"pseudoSymbol","type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/MeetingNavigation#Navigate-to-a-meeting","title":"Navigate to a meeting","url":"\/tutorials\/composablearchitecture\/meetingnavigation#Navigate-to-a-meeting","abstract":[{"type":"text","text":"Now that we have a navigation stack in place we can start navigating to other features in the"},{"type":"text","text":" "},{"type":"text","text":"application. The simplest is the meeting screen, which allows you to see the details of a"},{"type":"text","text":" "},{"type":"text","text":"previous recorded meeting."}],"kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingTimer#A-basic-timer":{"kind":"section","type":"section","abstract":[{"type":"text","text":"The first major piece of logic and behavior we will introduce to the record meeting feature is"},{"type":"text","text":" "},{"type":"text","text":"the timer. This is a long-living effect that runs in parallel with the rest of the feature, and"},{"type":"text","text":" "},{"type":"text","text":"we need to implement nuanced logic to figure out when to proceed to the next speaker."}],"url":"\/tutorials\/composablearchitecture\/implementingtimer#A-basic-timer","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#A-basic-timer","title":"A basic timer","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpDetailNavigation#Navigating-to-the-detail":{"url":"\/tutorials\/composablearchitecture\/syncupdetailnavigation#Navigating-to-the-detail","abstract":[{"text":"We will wrap the application built so far in a ","type":"text"},{"type":"codeVoice","code":"NavigationStack"},{"text":" so that we can navigate to","type":"text"},{"text":" ","type":"text"},{"text":"the detail screen. To do this we will create a new root-level feature that will be responsible","type":"text"},{"text":" ","type":"text"},{"text":"for implementing the logic of the stack and integrating all of the features together.","type":"text"}],"kind":"section","role":"pseudoSymbol","type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation#Navigating-to-the-detail","title":"Navigating to the detail"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingTimer#Controlling-dependencies-early":{"abstract":[{"type":"text","text":"The first major piece of logic and behavior we will introduce to the record meeting feature is"},{"type":"text","text":" "},{"type":"text","text":"the timer. This is a long-living effect that runs in parallel with the rest of the feature, and"},{"type":"text","text":" "},{"type":"text","text":"we need to implement nuanced logic to figure out when to proceed to the next speaker."}],"type":"section","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#Controlling-dependencies-early","title":"Controlling dependencies early","role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/implementingtimer#Controlling-dependencies-early"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingNavigation#Deleting-a-sync-up":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingNavigation#Deleting-a-sync-up","role":"pseudoSymbol","abstract":[{"type":"text","text":"We have now implemented a navigation stack at the root of our application, and integrated"},{"type":"text","text":" "},{"type":"text","text":"3 features into the stack: the "},{"type":"codeVoice","code":"SyncUpsList"},{"type":"text","text":" feature, the "},{"type":"codeVoice","code":"SyncUpDetail"},{"type":"text","text":" feature, and the"},{"type":"text","text":" "},{"type":"codeVoice","code":"MeetingView"},{"type":"text","text":". Some of these features have quite complex logic binding them together, such as"},{"type":"text","text":" "},{"type":"text","text":"when one deletes a sync-up from the detail screen it should pop the screen off the stack."}],"title":"Deleting a sync-up","url":"\/tutorials\/composablearchitecture\/testingnavigation#Deleting-a-sync-up","type":"section","kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpDetail#Testing-the-edit-flow":{"title":"Testing the edit flow","type":"section","url":"\/tutorials\/composablearchitecture\/testingsyncupdetail#Testing-the-edit-flow","abstract":[{"type":"text","text":"The "},{"type":"codeVoice","code":"SyncUpDetail"},{"type":"text","text":" feature has slowly become quite complex. It now handles two forms of"},{"type":"text","text":" "},{"type":"text","text":"navigation (an alert and sheet), it models navigation state with a single enum, and it"},{"type":"text","text":" "},{"type":"text","text":"updates the parent feature via a shared property. It’s about time we got some test"},{"type":"text","text":" "},{"type":"text","text":"coverage on this feature so we can be sure it works as we expect, and so that we can make future"},{"type":"text","text":" "},{"type":"text","text":"changes with confidence."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpDetail#Testing-the-edit-flow","kind":"section","role":"pseudoSymbol"},"EditingAndDeletingSyncUp-01-code-0009.swift":{"identifier":"EditingAndDeletingSyncUp-01-code-0009.swift","type":"file","highlights":[{"line":13},{"line":15}],"content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @ObservableState","  struct State: Equatable {","    @Presents var editSyncUp: SyncUpForm.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case cancelEditButtonTapped","    case deleteButtonTapped","    case doneEditingButtonTapped","    case editButtonTapped","    case editSyncUp(PresentationAction<SyncUpForm.Action>)","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .deleteButtonTapped:","        return .none","","      case .editButtonTapped:","        state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        return .none","","      case .editSyncUp:","        return .none","      }","    }","    .ifLet(\\.$editSyncUp, action: \\.editSyncUp) {","      SyncUpForm()","    }","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"fileType":"swift","fileName":"SyncUpDetail.swift","syntax":"swift"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/run(priority:operation:catch:fileID:filePath:line:column:)":{"abstract":[{"type":"text","text":"Wraps an asynchronous unit of work that can emit actions any number of times in an effect."}],"role":"symbol","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:filePath:line:column:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"run"},{"kind":"text","text":"("},{"kind":"externalParam","text":"priority"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:ScP","text":"TaskPriority"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"operation"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture4SendV","text":"Send"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">) "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"kind":"text","text":", "},{"kind":"externalParam","text":"catch"},{"kind":"text","text":": ((any "},{"kind":"typeIdentifier","preciseIdentifier":"s:s5ErrorP","text":"Error"},{"kind":"text","text":", "},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture4SendV","text":"Send"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">) "},{"kind":"keyword","text":"async"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"kind":"text","text":")?, "},{"kind":"externalParam","text":"fileID"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"kind":"text","text":", "},{"kind":"externalParam","text":"filePath"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"kind":"text","text":", "},{"kind":"externalParam","text":"column"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture6EffectV","text":"Effect"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">"}],"url":"\/documentation\/composablearchitecture\/effect\/run(priority:operation:catch:fileid:filepath:line:column:)","type":"topic","title":"run(priority:operation:catch:fileID:filePath:line:column:)"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpForm#Removing-attendees":{"url":"\/tutorials\/composablearchitecture\/testingsyncupform#Removing-attendees","title":"Removing attendees","type":"section","kind":"section","abstract":[{"type":"text","text":"We now have a moderately complex feature for editing the details of a sync-up, the "},{"type":"codeVoice","code":"SyncUpForm"},{"type":"text","text":" "},{"type":"text","text":"reducer. Let’s get some test coverage on the feature, and doing so will force us to come"},{"type":"text","text":" "},{"type":"text","text":"face-to-face with dependencies for the first time in this tutorial."}],"role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpForm#Removing-attendees"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ListsOfSyncUps#A-handy-debugging-tool":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps#A-handy-debugging-tool","abstract":[{"type":"text","text":"We will begin building the SyncUps app from scratch by implementing the feature that powers the"},{"type":"text","text":" "},{"type":"text","text":"list of sync-ups. It starts out as a simple feature, but it will become increasingly complex as"},{"type":"text","text":" "},{"type":"text","text":"the app evolves."}],"url":"\/tutorials\/composablearchitecture\/listsofsyncups#A-handy-debugging-tool","kind":"section","title":"A handy debugging tool","type":"section","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpDetailNavigation#Creating-the-app-view":{"role":"pseudoSymbol","abstract":[{"type":"text","text":"We will wrap the application built so far in a "},{"type":"codeVoice","code":"NavigationStack"},{"type":"text","text":" so that we can navigate to"},{"type":"text","text":" "},{"type":"text","text":"the detail screen. To do this we will create a new root-level feature that will be responsible"},{"type":"text","text":" "},{"type":"text","text":"for implementing the logic of the stack and integrating all of the features together."}],"type":"section","url":"\/tutorials\/composablearchitecture\/syncupdetailnavigation#Creating-the-app-view","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation#Creating-the-app-view","title":"Creating the app view"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PresentingSyncUpForm#Integrating-the-feature-domains-together":{"role":"pseudoSymbol","title":"Integrating the feature domains together","abstract":[{"text":"We now have two features built: the sync-ups list and the sync-up form. These features do not","type":"text"},{"text":" ","type":"text"},{"text":"exist in isolation, but rather are meant to be integrated in a deep way. One should be able to","type":"text"},{"text":" ","type":"text"},{"text":"navigate to the sync-up form from the list view, enter the details of a new sync-up, and then","type":"text"},{"text":" ","type":"text"},{"text":"add that sync-up to the root list.","type":"text"}],"type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm#Integrating-the-feature-domains-together","url":"\/tutorials\/composablearchitecture\/presentingsyncupform#Integrating-the-feature-domains-together","kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/MeetingNavigation#The-meeting-screen":{"url":"\/tutorials\/composablearchitecture\/meetingnavigation#The-meeting-screen","title":"The meeting screen","type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/MeetingNavigation#The-meeting-screen","abstract":[{"text":"Now that we have a navigation stack in place we can start navigating to other features in the","type":"text"},{"text":" ","type":"text"},{"text":"application. The simplest is the meeting screen, which allows you to see the details of a","type":"text"},{"text":" ","type":"text"},{"text":"previous recorded meeting.","type":"text"}],"kind":"section","role":"pseudoSymbol"},"EditingAndDeletingSyncUp-02-code-0011.swift":{"syntax":"swift","highlights":[{"line":30},{"line":31},{"line":32},{"line":85}],"content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @ObservableState","  struct State: Equatable {","    @Presents var alert: AlertState<Action.Alert>?","    @Presents var editSyncUp: SyncUpForm.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case alert(PresentationAction<Alert>)","    case cancelEditButtonTapped","    case deleteButtonTapped","    case doneEditingButtonTapped","    case editButtonTapped","    case editSyncUp(PresentationAction<SyncUpForm.Action>)","    @CasePathable","    enum Alert {","      case confirmButtonTapped","    }","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .alert(.presented(.confirmButtonTapped)):","        @Shared(.syncUps) var syncUps","        $syncUps.withLock { _ = $0.remove(id: state.syncUp.id) }","        return .none","","      case .alert(.dismiss):","        return .none","","      case .cancelEditButtonTapped:","        state.editSyncUp = nil","        return .none","","      case .deleteButtonTapped:","        state.alert = .deleteSyncUp","        return .none","","      case .doneEditingButtonTapped:","        guard let editedSyncUp = state.editSyncUp?.syncUp","        else { return .none }","        state.$syncUp.withLock { $0 = editedSyncUp }","        state.editSyncUp = nil","        return .none","","      case .editButtonTapped:","        state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        return .none","","      case .editSyncUp:","        return .none","      }","    }","    .ifLet(\\.$editSyncUp, action: \\.editSyncUp) {","      SyncUpForm()","    }","    .ifLet(\\.$alert, action: \\.alert) ","  }","}","","extension AlertState where Action == SyncUpDetail.Action.Alert {","  static let deleteSyncUp = Self {","    TextState(\"Delete?\")","  } actions: {","    ButtonState(role: .destructive, action: .confirmButtonTapped) {","      TextState(\"Yes\")","    }","    ButtonState(role: .cancel) {","      TextState(\"Nevermind\")","    }","  } message: {","    TextState(\"Are you sure you want to delete this meeting?\")","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}",""],"fileName":"SyncUpDetail.swift","identifier":"EditingAndDeletingSyncUp-02-code-0011.swift","fileType":"swift","type":"file"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/EditingAndDeletingSyncUp#More-concise-domain-modeling":{"title":"More concise domain modeling","kind":"section","url":"\/tutorials\/composablearchitecture\/editinganddeletingsyncup#More-concise-domain-modeling","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp#More-concise-domain-modeling","abstract":[{"text":"Let’s implement two major pieces of functionality in the detail screen: editing the sync-up and","type":"text"},{"text":" ","type":"text"},{"text":"deleting the sync-up. This will force us to face a number of common problems in app development","type":"text"},{"text":" ","type":"text"},{"text":"all at once, including view reuse, navigation, alerts, and parent-child communication patterns.","type":"text"}],"type":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/WhatIsSyncUps":{"estimatedTime":"5min","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/whatissyncups","role":"project","abstract":[{"text":"Let’s start with a tour of the application we will be building. It’s called SyncUps, and it’s a","type":"text"},{"text":" ","type":"text"},{"text":"recreation of Apple’s Scrumdinger demo application.","type":"text"}],"title":"What is SyncUps?","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/WhatIsSyncUps"},"https://swiftpackageindex.com/pointfreeco/swiftui-navigation/1.2.0/documentation/swiftuinavigationcore/alertstate":{"identifier":"https:\/\/swiftpackageindex.com\/pointfreeco\/swiftui-navigation\/1.2.0\/documentation\/swiftuinavigationcore\/alertstate","titleInlineContent":[{"code":"AlertState","type":"codeVoice"}],"type":"link","title":"AlertState","url":"https:\/\/swiftpackageindex.com\/pointfreeco\/swiftui-navigation\/1.2.0\/documentation\/swiftuinavigationcore\/alertstate"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpForm#Adding-attendees":{"role":"pseudoSymbol","kind":"section","url":"\/tutorials\/composablearchitecture\/testingsyncupform#Adding-attendees","abstract":[{"text":"We now have a moderately complex feature for editing the details of a sync-up, the ","type":"text"},{"type":"codeVoice","code":"SyncUpForm"},{"text":" ","type":"text"},{"text":"reducer. Let’s get some test coverage on the feature, and doing so will force us to come","type":"text"},{"text":" ","type":"text"},{"text":"face-to-face with dependencies for the first time in this tutorial.","type":"text"}],"title":"Adding attendees","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpForm#Adding-attendees","type":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PersistingSyncUps":{"type":"topic","abstract":[{"type":"text","text":"Now that we have the ability to add and remove sync-ups from the application, let’s add some"},{"type":"text","text":" "},{"type":"text","text":"persistence. This will involve using the “shared state” tools from the library, such as"},{"type":"text","text":" "},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":" and "},{"type":"codeVoice","code":"fileStorage"},{"type":"text","text":"."}],"url":"\/tutorials\/composablearchitecture\/persistingsyncups","estimatedTime":"5min","role":"project","kind":"project","title":"Persisting sync-ups","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PersistingSyncUps"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingListOfSyncUps#Writing-your-first-test":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingListOfSyncUps#Writing-your-first-test","title":"Writing your first test","url":"\/tutorials\/composablearchitecture\/testinglistofsyncups#Writing-your-first-test","kind":"section","type":"section","abstract":[{"type":"text","text":"The SyncUpsList feature we have built so far isn’t very complex. In fact, it only has one"},{"type":"text","text":" "},{"type":"text","text":"primary action, that of deleting sync-ups from its collection. However, it can be good practice"},{"type":"text","text":" "},{"type":"text","text":"to test new features as you add them, and in the future we will have much more complicated"},{"type":"text","text":" "},{"type":"text","text":"behavior to test."}],"role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/New-sync-up-form":{"url":"\/tutorials\/buildingsyncups\/new-sync-up-form","role":"article","type":"topic","abstract":[],"title":"New sync-up form","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/New-sync-up-form","kind":"article"},"EditingAndDeletingSyncUp-03-code-0007.swift":{"highlights":[{"line":41}],"syntax":"swift","fileName":"SyncUpDetail.swift","fileType":"swift","identifier":"EditingAndDeletingSyncUp-03-code-0007.swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @Reducer","  enum Destination {","    case alert(AlertState<Alert>)","    case edit(SyncUpForm)","    @CasePathable","    enum Alert {","      case confirmButtonTapped","    }","  }","","  @ObservableState","  struct State: Equatable {","    @Presents var destination: Destination.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case cancelEditButtonTapped","    case deleteButtonTapped","    case destination(PresentationAction<Destination.Action>)","    case doneEditingButtonTapped","    case editButtonTapped","  }","","  @Dependency(\\.dismiss) var dismiss","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      \/\/ case .alert(.presented(.confirmButtonTapped)):","      case .destination(.presented(.alert(.confirmButtonTapped))):","        @Shared(.syncUps) var syncUps","        $syncUps.withLock { _ = $0.remove(id: state.syncUp.id) }","        return .run { _ in await dismiss() }","","      case .destination:","        return .none","","      case .cancelEditButtonTapped:","        state.editSyncUp = nil","        return .none","","      case .delegate:","        return .none","","      case .deleteButtonTapped:","        state.alert = .deleteSyncUp","        return .none","","      case .doneEditingButtonTapped:","        guard let editedSyncUp = state.editSyncUp?.syncUp","        else { return .none }","        state.$syncUp.withLock { $0 = editedSyncUp }","        state.editSyncUp = nil","        return .none","","      case .editButtonTapped:","        state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        return .none","      }","    }","    .ifLet(\\.$destination, action: \\.destination)","  }","}","extension SyncUpDetail.Destination.State: Equatable {}","","extension AlertState where Action == SyncUpDetail.Action.Alert {","  static let deleteSyncUp = Self {","    TextState(\"Delete?\")","  } actions: {","    ButtonState(role: .destructive, action: .confirmButtonTapped) {","      TextState(\"Yes\")","    }","    ButtonState(role: .cancel) {","      TextState(\"Nevermind\")","    }","  } message: {","    TextState(\"Are you sure you want to delete this meeting?\")","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"type":"file"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpForm#Form-focus-an-approach":{"abstract":[{"type":"text","text":"We will create a new feature with the Composable Architecture that is capable of editing the"},{"type":"text","text":" "},{"type":"text","text":"details of a new sync-up. We will also add some nuanced logic around how focus moves through the"},{"type":"text","text":" "},{"type":"text","text":"feature to make things a little more interesting."}],"kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm#Form-focus-an-approach","type":"section","url":"\/tutorials\/composablearchitecture\/syncupform#Form-focus-an-approach","title":"Form focus: an approach","role":"pseudoSymbol"},"EditingAndDeletingSyncUp-02-code-0010.swift":{"identifier":"EditingAndDeletingSyncUp-02-code-0010.swift","type":"file","highlights":[{"line":30},{"line":31}],"content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @ObservableState","  struct State: Equatable {","    @Presents var alert: AlertState<Action.Alert>?","    @Presents var editSyncUp: SyncUpForm.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case alert(PresentationAction<Alert>)","    case cancelEditButtonTapped","    case deleteButtonTapped","    case doneEditingButtonTapped","    case editButtonTapped","    case editSyncUp(PresentationAction<SyncUpForm.Action>)","    @CasePathable","    enum Alert {","      case confirmButtonTapped","    }","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .alert(.presented(.confirmButtonTapped)):","        @Shared(.fileStorage(.syncUps)) var syncUps: IdentifiedArrayOf<SyncUp> = []","","      case .alert(.dismiss):","        return .none","","      case .cancelEditButtonTapped:","        state.editSyncUp = nil","        return .none","","      case .deleteButtonTapped:","        state.alert = .deleteSyncUp","        return .none","","      case .doneEditingButtonTapped:","        guard let editedSyncUp = state.editSyncUp?.syncUp","        else { return .none }","        state.$syncUp.withLock { $0 = editedSyncUp }","        state.editSyncUp = nil","        return .none","","      case .editButtonTapped:","        state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        return .none","","      case .editSyncUp:","        return .none","      }","    }","    .ifLet(\\.$editSyncUp, action: \\.editSyncUp) {","      SyncUpForm()","    }","    .ifLet(\\.$alert, action: \\.alert) ","  }","}","","extension AlertState where Action == SyncUpDetail.Action.Alert {","  static let deleteSyncUp = Self {","    TextState(\"Delete?\")","  } actions: {","    ButtonState(role: .destructive, action: .confirmButtonTapped) {","      TextState(\"Yes\")","    }","    ButtonState(role: .cancel) {","      TextState(\"Nevermind\")","    }","  } message: {","    TextState(\"Are you sure you want to delete this meeting?\")","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"fileType":"swift","fileName":"SyncUpDetail.swift","syntax":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingNavigation":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingNavigation","role":"project","title":"Testing navigation","abstract":[{"type":"text","text":"We have now implemented a navigation stack at the root of our application, and integrated"},{"type":"text","text":" "},{"type":"text","text":"3 features into the stack: the "},{"type":"codeVoice","code":"SyncUpsList"},{"type":"text","text":" feature, the "},{"type":"codeVoice","code":"SyncUpDetail"},{"type":"text","text":" feature, and the"},{"type":"text","text":" "},{"type":"codeVoice","code":"MeetingView"},{"type":"text","text":". Some of these features have quite complex logic binding them together, such as"},{"type":"text","text":" "},{"type":"text","text":"when one deletes a sync-up from the detail screen it should pop the screen off the stack."}],"estimatedTime":"10min","url":"\/tutorials\/composablearchitecture\/testingnavigation","type":"topic","kind":"project"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/Lists-of-sync-ups":{"title":"Lists of sync-ups","abstract":[],"url":"\/tutorials\/buildingsyncups\/lists-of-sync-ups","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Lists-of-sync-ups","type":"topic","kind":"article","role":"article"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/Record-meeting":{"abstract":[],"type":"topic","title":"Record meeting","role":"article","url":"\/tutorials\/buildingsyncups\/record-meeting","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Record-meeting"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpForm#Sync-up-form-basics":{"title":"Sync-up form basics","role":"pseudoSymbol","abstract":[{"text":"We will create a new feature with the Composable Architecture that is capable of editing the","type":"text"},{"text":" ","type":"text"},{"text":"details of a new sync-up. We will also add some nuanced logic around how focus moves through the","type":"text"},{"text":" ","type":"text"},{"text":"feature to make things a little more interesting.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/syncupform#Sync-up-form-basics","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm#Sync-up-form-basics","kind":"section","type":"section"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/Sync-up-detail":{"title":"Sync-up detail","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Sync-up-detail","url":"\/tutorials\/buildingsyncups\/sync-up-detail","type":"topic","kind":"article","role":"article","abstract":[]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PersistingSyncUps#Persisting-data-to-disk":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PersistingSyncUps#Persisting-data-to-disk","abstract":[{"text":"Now that we have the ability to add and remove sync-ups from the application, let’s add some","type":"text"},{"text":" ","type":"text"},{"text":"persistence. This will involve using the “shared state” tools from the library, such as","type":"text"},{"text":" ","type":"text"},{"code":"@Shared","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"fileStorage","type":"codeVoice"},{"text":".","type":"text"}],"role":"pseudoSymbol","type":"section","url":"\/tutorials\/composablearchitecture\/persistingsyncups#Persisting-data-to-disk","kind":"section","title":"Persisting data to disk"},"EditingAndDeletingSyncUp-02-code-0009.swift":{"highlights":[{"line":32}],"syntax":"swift","fileName":"SyncUpDetail.swift","fileType":"swift","identifier":"EditingAndDeletingSyncUp-02-code-0009.swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @ObservableState","  struct State: Equatable {","    @Presents var alert: AlertState<Action.Alert>?","    @Presents var editSyncUp: SyncUpForm.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case alert(PresentationAction<Alert>)","    case cancelEditButtonTapped","    case deleteButtonTapped","    case doneEditingButtonTapped","    case editButtonTapped","    case editSyncUp(PresentationAction<SyncUpForm.Action>)","    @CasePathable","    enum Alert {","      case confirmButtonTapped","    }","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .alert(.presented(.confirmButtonTapped)):","        ","      case .alert(.dismiss):","        return .none","","      case .cancelEditButtonTapped:","        state.editSyncUp = nil","        return .none","","      case .deleteButtonTapped:","        state.alert = .deleteSyncUp","        return .none","","      case .doneEditingButtonTapped:","        guard let editedSyncUp = state.editSyncUp?.syncUp","        else { return .none }","        state.$syncUp.withLock { $0 = editedSyncUp }","        state.editSyncUp = nil","        return .none","","      case .editButtonTapped:","        state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        return .none","","      case .editSyncUp:","        return .none","      }","    }","    .ifLet(\\.$editSyncUp, action: \\.editSyncUp) {","      SyncUpForm()","    }","    .ifLet(\\.$alert, action: \\.alert) ","  }","}","","extension AlertState where Action == SyncUpDetail.Action.Alert {","  static let deleteSyncUp = Self {","    TextState(\"Delete?\")","  } actions: {","    ButtonState(role: .destructive, action: .confirmButtonTapped) {","      TextState(\"Yes\")","    }","    ButtonState(role: .cancel) {","      TextState(\"Nevermind\")","    }","  } message: {","    TextState(\"Are you sure you want to delete this meeting?\")","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"type":"file"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PersistingSyncUps#Testing-persistence":{"role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PersistingSyncUps#Testing-persistence","url":"\/tutorials\/composablearchitecture\/persistingsyncups#Testing-persistence","type":"section","kind":"section","title":"Testing persistence","abstract":[{"type":"text","text":"Now that we have the ability to add and remove sync-ups from the application, let’s add some"},{"type":"text","text":" "},{"type":"text","text":"persistence. This will involve using the “shared state” tools from the library, such as"},{"type":"text","text":" "},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":" and "},{"type":"codeVoice","code":"fileStorage"},{"type":"text","text":"."}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/WhatIsSyncUps#A-tour-of-SyncUps":{"role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/whatissyncups#A-tour-of-SyncUps","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/WhatIsSyncUps#A-tour-of-SyncUps","kind":"section","type":"section","abstract":[{"type":"text","text":"Let’s start with a tour of the application we will be building. It’s called SyncUps, and it’s a"},{"type":"text","text":" "},{"type":"text","text":"recreation of Apple’s Scrumdinger demo application."}],"title":"A tour of SyncUps"},"EditingAndDeletingSyncUp-03-code-0008.swift":{"highlights":[{"line":45}],"syntax":"swift","fileName":"SyncUpDetail.swift","fileType":"swift","identifier":"EditingAndDeletingSyncUp-03-code-0008.swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @Reducer","  enum Destination {","    case alert(AlertState<Alert>)","    case edit(SyncUpForm)","    @CasePathable","    enum Alert {","      case confirmButtonTapped","    }","  }","","  @ObservableState","  struct State: Equatable {","    @Presents var destination: Destination.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case cancelEditButtonTapped","    case deleteButtonTapped","    case destination(PresentationAction<Destination.Action>)","    case doneEditingButtonTapped","    case editButtonTapped","  }","","  @Dependency(\\.dismiss) var dismiss","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      \/\/ case .alert(.presented(.confirmButtonTapped)):","      case .destination(.presented(.alert(.confirmButtonTapped))):","        @Shared(.syncUps) var syncUps","        $syncUps.withLock { _ = $0.remove(id: state.syncUp.id) }","        return .run { _ in await dismiss() }","","      case .destination:","        return .none","","      case .cancelEditButtonTapped:","        state.destination = nil","        return .none","","      case .delegate:","        return .none","","      case .deleteButtonTapped:","        state.alert = .deleteSyncUp","        return .none","","      case .doneEditingButtonTapped:","        guard let editedSyncUp = state.editSyncUp?.syncUp","        else { return .none }","        state.$syncUp.withLock { $0 = editedSyncUp }","        state.editSyncUp = nil","        return .none","","      case .editButtonTapped:","        state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        return .none","      }","    }","    .ifLet(\\.$destination, action: \\.destination)","  }","}","extension SyncUpDetail.Destination.State: Equatable {}","","extension AlertState where Action == SyncUpDetail.Action.Alert {","  static let deleteSyncUp = Self {","    TextState(\"Delete?\")","  } actions: {","    ButtonState(role: .destructive, action: .confirmButtonTapped) {","      TextState(\"Yes\")","    }","    ButtonState(role: .cancel) {","      TextState(\"Nevermind\")","    }","  } message: {","    TextState(\"Are you sure you want to delete this meeting?\")","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"type":"file"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/WhatIsSyncUps#Create-the-SyncUps-project":{"abstract":[{"type":"text","text":"Let’s start with a tour of the application we will be building. It’s called SyncUps, and it’s a"},{"type":"text","text":" "},{"type":"text","text":"recreation of Apple’s Scrumdinger demo application."}],"kind":"section","url":"\/tutorials\/composablearchitecture\/whatissyncups#Create-the-SyncUps-project","role":"pseudoSymbol","type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/WhatIsSyncUps#Create-the-SyncUps-project","title":"Create the SyncUps project"},"EditingAndDeletingSyncUp-01-code-0011.swift":{"syntax":"swift","type":"file","identifier":"EditingAndDeletingSyncUp-01-code-0011.swift","highlights":[{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36}],"fileName":"SyncUpDetail.swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @ObservableState","  struct State: Equatable {","    @Presents var editSyncUp: SyncUpForm.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case cancelEditButtonTapped","    case deleteButtonTapped","    case doneEditingButtonTapped","    case editButtonTapped","    case editSyncUp(PresentationAction<SyncUpForm.Action>)","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .cancelEditButtonTapped:","        state.editSyncUp = nil","        return .none","","      case .deleteButtonTapped:","        return .none","","      case .doneEditingButtonTapped:","        guard let editedSyncUp = state.editSyncUp?.syncUp","        else { return .none }","        state.$syncUp.withLock { $0 = editedSyncUp }","        state.editSyncUp = nil","        return .none","","      case .editButtonTapped:","        state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        return .none","","      case .editSyncUp:","        return .none","      }","    }","    .ifLet(\\.$editSyncUp, action: \\.editSyncUp) {","      SyncUpForm()","    }","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"fileType":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingSpeechRecognizer":{"url":"\/tutorials\/composablearchitecture\/implementingspeechrecognizer","kind":"project","title":"Adding a speech recognizer","role":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingSpeechRecognizer","abstract":[{"text":"We have just one feature left to implement, and it’s one of the most complicated ones. We need","type":"text"},{"text":" ","type":"text"},{"text":"to use Apple’s ","type":"text"},{"code":"SFSpeechRecognizer","type":"codeVoice"},{"text":" API to ask the user for permission to transcribe their","type":"text"},{"text":" ","type":"text"},{"text":"audio, and then start a speech recognition task to live transcribe the meeting while it is","type":"text"},{"text":" ","type":"text"},{"text":"in progress.","type":"text"}],"type":"topic","estimatedTime":"10min"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingTimer":{"kind":"project","estimatedTime":"25min","title":"Adding a meeting timer","role":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer","abstract":[{"type":"text","text":"The first major piece of logic and behavior we will introduce to the record meeting feature is"},{"type":"text","text":" "},{"type":"text","text":"the timer. This is a long-living effect that runs in parallel with the rest of the feature, and"},{"type":"text","text":" "},{"type":"text","text":"we need to implement nuanced logic to figure out when to proceed to the next speaker."}],"url":"\/tutorials\/composablearchitecture\/implementingtimer","type":"topic"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ListsOfSyncUps#Domain-models":{"kind":"section","title":"Domain models","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps#Domain-models","role":"pseudoSymbol","abstract":[{"type":"text","text":"We will begin building the SyncUps app from scratch by implementing the feature that powers the"},{"type":"text","text":" "},{"type":"text","text":"list of sync-ups. It starts out as a simple feature, but it will become increasingly complex as"},{"type":"text","text":" "},{"type":"text","text":"the app evolves."}],"url":"\/tutorials\/composablearchitecture\/listsofsyncups#Domain-models","type":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpDetail#Create-the-sync-up-detail":{"kind":"section","title":"Create the sync-up detail","role":"pseudoSymbol","abstract":[{"type":"text","text":"The “sync-up detail” screen shows all the information of a sync-up, and has many actions that"},{"type":"text","text":" "},{"type":"text","text":"can take place in the screen. The user can edit the sync-up, or start a new meeting in the sync"},{"type":"text","text":" "},{"type":"text","text":"up, or drill-down to a past meeting, or even delete the meeting."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetail#Create-the-sync-up-detail","type":"section","url":"\/tutorials\/composablearchitecture\/syncupdetail#Create-the-sync-up-detail"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Presents()":{"url":"\/documentation\/composablearchitecture\/presents()","type":"topic","abstract":[{"text":"Wraps a property with ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState","isActive":true,"type":"reference"},{"text":" and observes it.","type":"text"}],"title":"Presents()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Presents"},{"kind":"text","text":"()"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Presents()","kind":"symbol","role":"symbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpForm#Form-focus-a-better-approach":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm#Form-focus-a-better-approach","abstract":[{"type":"text","text":"We will create a new feature with the Composable Architecture that is capable of editing the"},{"type":"text","text":" "},{"type":"text","text":"details of a new sync-up. We will also add some nuanced logic around how focus moves through the"},{"type":"text","text":" "},{"type":"text","text":"feature to make things a little more interesting."}],"kind":"section","title":"Form focus: a better approach","role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/syncupform#Form-focus-a-better-approach","type":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpDetailNavigation":{"kind":"project","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation","estimatedTime":"20min","title":"Navigating to a sync-up detail","abstract":[{"type":"text","text":"We will wrap the application built so far in a "},{"code":"NavigationStack","type":"codeVoice"},{"type":"text","text":" so that we can navigate to"},{"type":"text","text":" "},{"type":"text","text":"the detail screen. To do this we will create a new root-level feature that will be responsible"},{"type":"text","text":" "},{"type":"text","text":"for implementing the logic of the stack and integrating all of the features together."}],"role":"project","url":"\/tutorials\/composablearchitecture\/syncupdetailnavigation"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/Presenting-the-sync-up-form":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Presenting-the-sync-up-form","abstract":[],"role":"article","kind":"article","title":"Presenting the sync-up form","url":"\/tutorials\/buildingsyncups\/presenting-the-sync-up-form","type":"topic"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpForm":{"title":"Sync-up form","estimatedTime":"15min","url":"\/tutorials\/composablearchitecture\/syncupform","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm","type":"topic","kind":"project","role":"project","abstract":[{"text":"We will create a new feature with the Composable Architecture that is capable of editing the","type":"text"},{"text":" ","type":"text"},{"text":"details of a new sync-up. We will also add some nuanced logic around how focus moves through the","type":"text"},{"text":" ","type":"text"},{"text":"feature to make things a little more interesting.","type":"text"}]},"EditingAndDeletingSyncUp-02-code-0004.swift":{"identifier":"EditingAndDeletingSyncUp-02-code-0004.swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @ObservableState","  struct State: Equatable {","    @Presents var alert: AlertState<Action.Alert>?","    @Presents var editSyncUp: SyncUpForm.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case alert(PresentationAction<Alert>)","    case cancelEditButtonTapped","    case deleteButtonTapped","    case doneEditingButtonTapped","    case editButtonTapped","    case editSyncUp(PresentationAction<SyncUpForm.Action>)","    @CasePathable","    enum Alert {","      case confirmButtonTapped","    }","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .alert:","        return .none","        ","      case .cancelEditButtonTapped:","        state.editSyncUp = nil","        return .none","","      case .deleteButtonTapped:","        return .none","","      case .doneEditingButtonTapped:","        guard let editedSyncUp = state.editSyncUp?.syncUp","        else { return .none }","        state.$syncUp.withLock { $0 = editedSyncUp }","        state.editSyncUp = nil","        return .none","","      case .editButtonTapped:","        state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        return .none","","      case .editSyncUp:","        return .none","      }","    }","    .ifLet(\\.$editSyncUp, action: \\.editSyncUp) {","      SyncUpForm()","    }","    .ifLet(\\.$alert, action: \\.alert) {","      ","    }","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"type":"file","highlights":[{"line":29},{"line":30},{"line":31},{"line":57},{"line":58},{"line":59}],"fileName":"SyncUpDetail.swift","fileType":"swift","syntax":"swift"},"EditingAndDeletingSyncUp-02-code-0012.swift":{"identifier":"EditingAndDeletingSyncUp-02-code-0012.swift","type":"file","highlights":[{"line":26},{"line":27}],"content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @ObservableState","  struct State: Equatable {","    @Presents var alert: AlertState<Action.Alert>?","    @Presents var editSyncUp: SyncUpForm.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case alert(PresentationAction<Alert>)","    case cancelEditButtonTapped","    case deleteButtonTapped","    case doneEditingButtonTapped","    case editButtonTapped","    case editSyncUp(PresentationAction<SyncUpForm.Action>)","    @CasePathable","    enum Alert {","      case confirmButtonTapped","    }","  }","","  @Dependency(\\.dismiss) var dismiss","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .alert(.presented(.confirmButtonTapped)):","        @Shared(.syncUps) var syncUps","        $syncUps.withLock { _ = $0.remove(id: state.syncUp.id) }","        return .none","","      case .alert(.dismiss):","        return .none","","      case .cancelEditButtonTapped:","        state.editSyncUp = nil","        return .none","","      case .deleteButtonTapped:","        state.alert = .deleteSyncUp","        return .none","","      case .doneEditingButtonTapped:","        guard let editedSyncUp = state.editSyncUp?.syncUp","        else { return .none }","        state.$syncUp.withLock { $0 = editedSyncUp }","        state.editSyncUp = nil","        return .none","","      case .editButtonTapped:","        state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        return .none","","      case .editSyncUp:","        return .none","      }","    }","    .ifLet(\\.$editSyncUp, action: \\.editSyncUp) {","      SyncUpForm()","    }","    .ifLet(\\.$alert, action: \\.alert) ","  }","}","","extension AlertState where Action == SyncUpDetail.Action.Alert {","  static let deleteSyncUp = Self {","    TextState(\"Delete?\")","  } actions: {","    ButtonState(role: .destructive, action: .confirmButtonTapped) {","      TextState(\"Yes\")","    }","    ButtonState(role: .cancel) {","      TextState(\"Nevermind\")","    }","  } message: {","    TextState(\"Are you sure you want to delete this meeting?\")","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}",""],"fileType":"swift","fileName":"SyncUpDetail.swift","syntax":"swift"},"EditingAndDeletingSyncUp-02-code-0005.swift":{"highlights":[{"line":57}],"syntax":"swift","fileName":"SyncUpDetail.swift","fileType":"swift","identifier":"EditingAndDeletingSyncUp-02-code-0005.swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @ObservableState","  struct State: Equatable {","    @Presents var alert: AlertState<Action.Alert>?","    @Presents var editSyncUp: SyncUpForm.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case alert(PresentationAction<Alert>)","    case cancelEditButtonTapped","    case deleteButtonTapped","    case doneEditingButtonTapped","    case editButtonTapped","    case editSyncUp(PresentationAction<SyncUpForm.Action>)","    @CasePathable","    enum Alert {","      case confirmButtonTapped","    }","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .alert:","        return .none","        ","      case .cancelEditButtonTapped:","        state.editSyncUp = nil","        return .none","","      case .deleteButtonTapped:","        return .none","","      case .doneEditingButtonTapped:","        guard let editedSyncUp = state.editSyncUp?.syncUp","        else { return .none }","        state.$syncUp.withLock { $0 = editedSyncUp }","        state.editSyncUp = nil","        return .none","","      case .editButtonTapped:","        state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        return .none","","      case .editSyncUp:","        return .none","      }","    }","    .ifLet(\\.$editSyncUp, action: \\.editSyncUp) {","      SyncUpForm()","    }","    .ifLet(\\.$alert, action: \\.alert) ","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"type":"file"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingTimer#Ending-the-meeting-early":{"url":"\/tutorials\/composablearchitecture\/implementingtimer#Ending-the-meeting-early","abstract":[{"text":"The first major piece of logic and behavior we will introduce to the record meeting feature is","type":"text"},{"text":" ","type":"text"},{"text":"the timer. This is a long-living effect that runs in parallel with the rest of the feature, and","type":"text"},{"text":" ","type":"text"},{"text":"we need to implement nuanced logic to figure out when to proceed to the next speaker.","type":"text"}],"kind":"section","role":"pseudoSymbol","type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#Ending-the-meeting-early","title":"Ending the meeting early"},"EditingAndDeletingSyncUp-03-code-0004.swift":{"identifier":"EditingAndDeletingSyncUp-03-code-0004.swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @Reducer","  enum Destination {","    case alert(AlertState<Alert>)","    case edit(SyncUpForm)","    @CasePathable","    enum Alert {","      case confirmButtonTapped","    }","  }","","  @ObservableState","  struct State: Equatable {","    @Presents var destination: Destination.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    \/\/ case alert(PresentationAction<Alert>)","    case cancelEditButtonTapped","    case deleteButtonTapped","    case destination(PresentationAction<Destination.Action>)","    case doneEditingButtonTapped","    case editButtonTapped","    \/\/ case editSyncUp(PresentationAction<SyncUpForm.Action>)","    \/\/ enum Alert {","    \/\/   case confirmButtonTapped","    \/\/ }","  }","","  @Dependency(\\.dismiss) var dismiss","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .alert(.presented(.confirmButtonTapped)):","        @Shared(.syncUps) var syncUps","        $syncUps.withLock { _ = $0.remove(id: state.syncUp.id) }","        return .run { _ in await dismiss() }","","      case .alert(.dismiss):","        return .none","","      case .cancelEditButtonTapped:","        state.editSyncUp = nil","        return .none","","      case .delegate:","        return .none","","      case .deleteButtonTapped:","        state.alert = .deleteSyncUp","        return .none","","      case .doneEditingButtonTapped:","        guard let editedSyncUp = state.editSyncUp?.syncUp","        else { return .none }","        state.$syncUp.withLock { $0 = editedSyncUp }","        state.editSyncUp = nil","        return .none","","      case .editButtonTapped:","        state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        return .none","","      case .editSyncUp:","        return .none","      }","    }","    .ifLet(\\.$editSyncUp, action: \\.editSyncUp) {","      SyncUpForm()","    }","    .ifLet(\\.$alert, action: \\.alert) ","  }","}","extension SyncUpDetail.Destination.State: Equatable {}","","extension AlertState where Action == SyncUpDetail.Action.Alert {","  static let deleteSyncUp = Self {","    TextState(\"Delete?\")","  } actions: {","    ButtonState(role: .destructive, action: .confirmButtonTapped) {","      TextState(\"Yes\")","    }","    ButtonState(role: .cancel) {","      TextState(\"Nevermind\")","    }","  } message: {","    TextState(\"Are you sure you want to delete this meeting?\")","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"type":"file","highlights":[{"line":23},{"line":26},{"line":29},{"line":30},{"line":31},{"line":32}],"fileName":"SyncUpDetail.swift","fileType":"swift","syntax":"swift"},"EditingAndDeletingSyncUp-03-code-0003.swift":{"content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @Reducer","  enum Destination {","    case alert(AlertState<Alert>)","    case edit(SyncUpForm)","    @CasePathable","    enum Alert {","      case confirmButtonTapped","    }","  }","","  @ObservableState","  struct State: Equatable {","    \/\/ @Presents var alert: AlertState<Action.Alert>?","    \/\/ @Presents var editSyncUp: SyncUpForm.State?","    @Presents var destination: Destination.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case alert(PresentationAction<Alert>)","    case cancelEditButtonTapped","    case deleteButtonTapped","    case doneEditingButtonTapped","    case editButtonTapped","    case editSyncUp(PresentationAction<SyncUpForm.Action>)","    @CasePathable","    enum Alert {","      case confirmButtonTapped","    }","  }","","  @Dependency(\\.dismiss) var dismiss","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .alert(.presented(.confirmButtonTapped)):","        @Shared(.syncUps) var syncUps","        $syncUps.withLock { _ = $0.remove(id: state.syncUp.id) }","        return .run { _ in await dismiss() }","","      case .alert(.dismiss):","        return .none","","      case .cancelEditButtonTapped:","        state.editSyncUp = nil","        return .none","","      case .delegate:","        return .none","","      case .deleteButtonTapped:","        state.alert = .deleteSyncUp","        return .none","","      case .doneEditingButtonTapped:","        guard let editedSyncUp = state.editSyncUp?.syncUp","        else { return .none }","        state.$syncUp.withLock { $0 = editedSyncUp }","        state.editSyncUp = nil","        return .none","","      case .editButtonTapped:","        state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        return .none","","      case .editSyncUp:","        return .none","      }","    }","    .ifLet(\\.$editSyncUp, action: \\.editSyncUp) {","      SyncUpForm()","    }","    .ifLet(\\.$alert, action: \\.alert) ","  }","}","extension SyncUpDetail.Destination.State: Equatable {}","","extension AlertState where Action == SyncUpDetail.Action.Alert {","  static let deleteSyncUp = Self {","    TextState(\"Delete?\")","  } actions: {","    ButtonState(role: .destructive, action: .confirmButtonTapped) {","      TextState(\"Yes\")","    }","    ButtonState(role: .cancel) {","      TextState(\"Nevermind\")","    }","  } message: {","    TextState(\"Are you sure you want to delete this meeting?\")","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"syntax":"swift","type":"file","fileName":"SyncUpDetail.swift","highlights":[{"line":18},{"line":19},{"line":20}],"identifier":"EditingAndDeletingSyncUp-03-code-0003.swift","fileType":"swift"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps":{"abstract":[{"text":"The SyncUps application is a recreation of one of Apple’s more interesting demo applications,","type":"text"},{"text":" ","type":"text"},{"text":"Scrumdinger. We recreate it from scratch using the Composable Architecture, with a focus on","type":"text"},{"text":" ","type":"text"},{"text":"domain modeling, controlling dependencies, and testability.","type":"text"}],"role":"overview","type":"topic","kind":"overview","url":"\/tutorials\/buildingsyncups","title":"Building SyncUps","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps"},"EditingAndDeletingSyncUp-03-code-0009.swift":{"identifier":"EditingAndDeletingSyncUp-03-code-0009.swift","type":"file","highlights":[{"line":49},{"line":50}],"content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @Reducer","  enum Destination {","    case alert(AlertState<Alert>)","    case edit(SyncUpForm)","    @CasePathable","    enum Alert {","      case confirmButtonTapped","    }","  }","","  @ObservableState","  struct State: Equatable {","    @Presents var destination: Destination.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case cancelEditButtonTapped","    case deleteButtonTapped","    case destination(PresentationAction<Destination.Action>)","    case doneEditingButtonTapped","    case editButtonTapped","  }","","  @Dependency(\\.dismiss) var dismiss","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      \/\/ case .alert(.presented(.confirmButtonTapped)):","      case .destination(.presented(.alert(.confirmButtonTapped))):","        @Shared(.syncUps) var syncUps","        $syncUps.withLock { _ = $0.remove(id: state.syncUp.id) }","        return .run { _ in await dismiss() }","","      case .destination:","        return .none","","      case .cancelEditButtonTapped:","        state.destination = nil","        return .none","","      case .deleteButtonTapped:","        \/\/ state.alert = .deleteSyncUp","        state.destination = .alert(.deleteSyncUp)","        return .none","","      case .doneEditingButtonTapped:","        guard let editedSyncUp = state.editSyncUp?.syncUp","        else { return .none }","        state.$syncUp.withLock { $0 = editedSyncUp }","        state.editSyncUp = nil","        return .none","","      case .editButtonTapped:","        state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        return .none","      }","    }","    .ifLet(\\.$destination, action: \\.destination)","  }","}","extension SyncUpDetail.Destination.State: Equatable {}","","extension AlertState where Action == SyncUpDetail.Action.Alert {","  static let deleteSyncUp = Self {","    TextState(\"Delete?\")","  } actions: {","    ButtonState(role: .destructive, action: .confirmButtonTapped) {","      TextState(\"Yes\")","    }","    ButtonState(role: .cancel) {","      TextState(\"Nevermind\")","    }","  } message: {","    TextState(\"Are you sure you want to delete this meeting?\")","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"fileType":"swift","fileName":"SyncUpDetail.swift","syntax":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/RecordMeetingFeature#Navigating-to-the-record-meeting-feature":{"title":"Navigating to the record meeting feature","role":"pseudoSymbol","abstract":[{"type":"text","text":"Let’s get the basics of a new feature into place that we can navigate to, and then we will"},{"type":"text","text":" "},{"type":"text","text":"slowly layer on its complex logic and behavior, such as the timer and speech recognizer."}],"url":"\/tutorials\/composablearchitecture\/recordmeetingfeature#Navigating-to-the-record-meeting-feature","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/RecordMeetingFeature#Navigating-to-the-record-meeting-feature","kind":"section","type":"section"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Send":{"url":"\/documentation\/composablearchitecture\/send","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Send","abstract":[{"type":"text","text":"A type that can send actions back into the system when used from"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:filePath:line:column:)"},{"type":"text","text":"."}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Send"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Send"}],"type":"topic","title":"Send"},"EditingAndDeletingSyncUp-01-code-0001.swift":{"highlights":[{"line":8}],"syntax":"swift","fileName":"SyncUpDetail.swift","fileType":"swift","identifier":"EditingAndDeletingSyncUp-01-code-0001.swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @ObservableState","  struct State: Equatable {","    @Presents var editSyncUp: SyncUpForm.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case deleteButtonTapped","    case editButtonTapped","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .deleteButtonTapped:","        return .none","","      case .editButtonTapped:","        return .none","      }","    }","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"type":"file"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/EditingAndDeletingSyncUp":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp","abstract":[{"type":"text","text":"Let’s implement two major pieces of functionality in the detail screen: editing the sync-up and"},{"type":"text","text":" "},{"type":"text","text":"deleting the sync-up. This will force us to face a number of common problems in app development"},{"type":"text","text":" "},{"type":"text","text":"all at once, including view reuse, navigation, alerts, and parent-child communication patterns."}],"type":"topic","url":"\/tutorials\/composablearchitecture\/editinganddeletingsyncup","kind":"project","role":"project","title":"Editing and deleting a sync-up","estimatedTime":"30min"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PresentingSyncUpForm#Adding-a-new-sync-up-to-the-list":{"title":"Adding a new sync-up to the list","role":"pseudoSymbol","abstract":[{"text":"We now have two features built: the sync-ups list and the sync-up form. These features do not","type":"text"},{"text":" ","type":"text"},{"text":"exist in isolation, but rather are meant to be integrated in a deep way. One should be able to","type":"text"},{"text":" ","type":"text"},{"text":"navigate to the sync-up form from the list view, enter the details of a new sync-up, and then","type":"text"},{"text":" ","type":"text"},{"text":"add that sync-up to the root list.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/presentingsyncupform#Adding-a-new-sync-up-to-the-list","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm#Adding-a-new-sync-up-to-the-list","kind":"section","type":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpFormPresentation#Non-exhaustive-testing":{"type":"section","url":"\/tutorials\/composablearchitecture\/testingsyncupformpresentation#Non-exhaustive-testing","role":"pseudoSymbol","abstract":[{"type":"text","text":"We have now integrated two moderately complex features, the "},{"type":"codeVoice","code":"SyncUpsList"},{"type":"text","text":" and "},{"type":"codeVoice","code":"SyncUpForm"},{"type":"text","text":", and"},{"type":"text","text":" "},{"type":"text","text":"so its time to write some tests. This will give us the opportunity to prove that the features"},{"type":"text","text":" "},{"type":"text","text":"work in tandem as we expect, and we will explore “non-exhaustive” testing to make our tests less"},{"type":"text","text":" "},{"type":"text","text":"fragile."}],"title":"Non-exhaustive testing","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpFormPresentation#Non-exhaustive-testing"},"EditingAndDeletingSyncUp-03-code-0011.swift":{"identifier":"EditingAndDeletingSyncUp-03-code-0011.swift","type":"file","highlights":[{"line":60},{"line":61}],"content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @Reducer","  enum Destination {","    case alert(AlertState<Alert>)","    case edit(SyncUpForm)","    @CasePathable","    enum Alert {","      case confirmButtonTapped","    }","  }","","  @ObservableState","  struct State: Equatable {","    @Presents var destination: Destination.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case cancelEditButtonTapped","    case deleteButtonTapped","    case destination(PresentationAction<Destination.Action>)","    case doneEditingButtonTapped","    case editButtonTapped","  }","","  @Dependency(\\.dismiss) var dismiss","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      \/\/ case .alert(.presented(.confirmButtonTapped)):","      case .destination(.presented(.alert(.confirmButtonTapped))):","        @Shared(.syncUps) var syncUps","        $syncUps.withLock { _ = $0.remove(id: state.syncUp.id) }","        return .run { _ in await dismiss() }","","      case .destination:","        return .none","","      case .cancelEditButtonTapped:","        state.destination = nil","        return .none","","      case .deleteButtonTapped:","        state.destination = .alert(.deleteSyncUp)","        return .none","","      case .doneEditingButtonTapped:","        guard let editedSyncUp = state.destination?.edit?.syncUp","        else { return .none }","        state.$syncUp.withLock { $0 = editedSyncUp }","        state.destination = nil","        return .none","","      case .editButtonTapped:","        \/\/ state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        state.destination = .edit(SyncUpForm.State(syncUp: state.syncUp))","        return .none","      }","    }","    .ifLet(\\.$destination, action: \\.destination)","  }","}","extension SyncUpDetail.Destination.State: Equatable {}","","extension AlertState where Action == SyncUpDetail.Action.Alert {","  static let deleteSyncUp = Self {","    TextState(\"Delete?\")","  } actions: {","    ButtonState(role: .destructive, action: .confirmButtonTapped) {","      TextState(\"Yes\")","    }","    ButtonState(role: .cancel) {","      TextState(\"Nevermind\")","    }","  } message: {","    TextState(\"Are you sure you want to delete this meeting?\")","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"fileType":"swift","fileName":"SyncUpDetail.swift","syntax":"swift"},"EditingAndDeletingSyncUp-02-code-0007.swift":{"type":"file","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @ObservableState","  struct State: Equatable {","    @Presents var alert: AlertState<Action.Alert>?","    @Presents var editSyncUp: SyncUpForm.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case alert(PresentationAction<Alert>)","    case cancelEditButtonTapped","    case deleteButtonTapped","    case doneEditingButtonTapped","    case editButtonTapped","    case editSyncUp(PresentationAction<SyncUpForm.Action>)","    @CasePathable","    enum Alert {","      case confirmButtonTapped","    }","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .alert:","        return .none","        ","      case .cancelEditButtonTapped:","        state.editSyncUp = nil","        return .none","","      case .deleteButtonTapped:","        state.alert = .deleteSyncUp","        return .none","","      case .doneEditingButtonTapped:","        guard let editedSyncUp = state.editSyncUp?.syncUp","        else { return .none }","        state.$syncUp.withLock { $0 = editedSyncUp }","        state.editSyncUp = nil","        return .none","","      case .editButtonTapped:","        state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        return .none","","      case .editSyncUp:","        return .none","      }","    }","    .ifLet(\\.$editSyncUp, action: \\.editSyncUp) {","      SyncUpForm()","    }","    .ifLet(\\.$alert, action: \\.alert) ","  }","}","","extension AlertState where Action == SyncUpDetail.Action.Alert {","  static let deleteSyncUp = Self {","    TextState(\"Delete?\")","  } actions: {","    ButtonState(role: .destructive, action: .confirmButtonTapped) {","      TextState(\"Yes\")","    }","    ButtonState(role: .cancel) {","      TextState(\"Nevermind\")","    }","  } message: {","    TextState(\"Are you sure you want to delete this meeting?\")","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"highlights":[{"line":37},{"line":62},{"line":63},{"line":64},{"line":65},{"line":66},{"line":67},{"line":68},{"line":69},{"line":70},{"line":71},{"line":72},{"line":73},{"line":74},{"line":75},{"line":76}],"fileType":"swift","fileName":"SyncUpDetail.swift","identifier":"EditingAndDeletingSyncUp-02-code-0007.swift","syntax":"swift"},"EditingAndDeletingSyncUp-01-code-0005.swift":{"syntax":"swift","type":"file","fileName":"SyncUpDetail.swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  \/\/ ...","}","","struct SyncUpDetailView: View {","  @Bindable var store: StoreOf<SyncUpDetail>","","  var body: some View {","    Form {","      Section {","        NavigationLink {","        } label: {","          Label(\"Start Meeting\", systemImage: \"timer\")","            .font(.headline)","            .foregroundStyle(Color.accentColor)","        }","        HStack {","          Label(\"Length\", systemImage: \"clock\")","          Spacer()","          Text(store.syncUp.duration.formatted(.units()))","        }","","        HStack {","          Label(\"Theme\", systemImage: \"paintpalette\")","          Spacer()","          Text(store.syncUp.theme.name)","            .padding(4)","            .foregroundStyle(store.syncUp.theme.accentColor)","            .background(store.syncUp.theme.mainColor)","            .clipShape(.rect(cornerRadius: 4))","        }","      } header: {","        Text(\"Sync-up Info\")","      }","","      if !store.syncUp.meetings.isEmpty {","        Section {","          ForEach(store.syncUp.meetings) { meeting in","            Button {","            } label: {","              HStack {","                Image(systemName: \"calendar\")","                Text(meeting.date, style: .date)","                Text(meeting.date, style: .time)","              }","            }","          }","        } header: {","          Text(\"Past meetings\")","        }","      }","","      Section {","        ForEach(store.syncUp.attendees) { attendee in","          Label(attendee.name, systemImage: \"person\")","        }","      } header: {","        Text(\"Attendees\")","      }","","      Section {","        Button(\"Delete\", role: .destructive) {","          store.send(.deleteButtonTapped)","        }","        .frame(maxWidth: .infinity)","      }","    }","    .navigationTitle(Text(store.syncUp.title))","    .toolbar {","      Button(\"Edit\") {","        store.send(.editButtonTapped)","      }","    }","  }","}","","#Preview {","  NavigationStack {","    SyncUpDetailView(","      store: Store(","        initialState: SyncUpDetail.State(","          syncUp: Shared(value: .mock)","        )","      ) {","        SyncUpDetail()","      }","    )","  }","}"],"highlights":[{"line":10}],"fileType":"swift","identifier":"EditingAndDeletingSyncUp-01-code-0005.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpDetail":{"abstract":[{"text":"The ","type":"text"},{"code":"SyncUpDetail","type":"codeVoice"},{"text":" feature has slowly become quite complex. It now handles two forms of","type":"text"},{"text":" ","type":"text"},{"text":"navigation (an alert and sheet), it models navigation state with a single enum, and it","type":"text"},{"text":" ","type":"text"},{"text":"updates the parent feature via a shared property. It’s about time we got some test","type":"text"},{"text":" ","type":"text"},{"text":"coverage on this feature so we can be sure it works as we expect, and so that we can make future","type":"text"},{"text":" ","type":"text"},{"text":"changes with confidence.","type":"text"}],"kind":"project","type":"topic","role":"project","url":"\/tutorials\/composablearchitecture\/testingsyncupdetail","title":"Testing the sync-up detail","estimatedTime":"10min","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpDetail"},"EditingAndDeletingSyncUp-03-code-0001.swift":{"fileName":"SyncUpDetail.swift","fileType":"swift","syntax":"swift","type":"file","identifier":"EditingAndDeletingSyncUp-03-code-0001.swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @Reducer","  enum Destination {","  }","  \/\/ ...","}","extension SyncUpDetail.Destination.State: Equatable {}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"highlights":[{"line":6},{"line":7},{"line":8},{"line":11}]},"EditingAndDeletingSyncUp-02-code-0013.swift":{"syntax":"swift","type":"file","fileName":"SyncUpDetail.swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @ObservableState","  struct State: Equatable {","    @Presents var alert: AlertState<Action.Alert>?","    @Presents var editSyncUp: SyncUpForm.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case alert(PresentationAction<Alert>)","    case cancelEditButtonTapped","    case deleteButtonTapped","    case doneEditingButtonTapped","    case editButtonTapped","    case editSyncUp(PresentationAction<SyncUpForm.Action>)","    @CasePathable","    enum Alert {","      case confirmButtonTapped","    }","  }","","  @Dependency(\\.dismiss) var dismiss","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .alert(.presented(.confirmButtonTapped)):","        @Shared(.syncUps) var syncUps","        $syncUps.withLock { _ = $0.remove(id: state.syncUp.id) }","        return .run { _ in await dismiss() }","","      case .alert(.dismiss):","        return .none","","      case .cancelEditButtonTapped:","        state.editSyncUp = nil","        return .none","","      case .deleteButtonTapped:","        state.alert = .deleteSyncUp","        return .none","","      case .doneEditingButtonTapped:","        guard let editedSyncUp = state.editSyncUp?.syncUp","        else { return .none }","        state.$syncUp.withLock { $0 = editedSyncUp }","        state.editSyncUp = nil","        return .none","","      case .editButtonTapped:","        state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        return .none","","      case .editSyncUp:","        return .none","      }","    }","    .ifLet(\\.$editSyncUp, action: \\.editSyncUp) {","      SyncUpForm()","    }","    .ifLet(\\.$alert, action: \\.alert) ","  }","}","","extension AlertState where Action == SyncUpDetail.Action.Alert {","  static let deleteSyncUp = Self {","    TextState(\"Delete?\")","  } actions: {","    ButtonState(role: .destructive, action: .confirmButtonTapped) {","      TextState(\"Yes\")","    }","    ButtonState(role: .cancel) {","      TextState(\"Nevermind\")","    }","  } message: {","    TextState(\"Are you sure you want to delete this meeting?\")","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}",""],"highlights":[{"line":34}],"fileType":"swift","identifier":"EditingAndDeletingSyncUp-02-code-0013.swift"},"EditingAndDeletingSyncUp-02-code-0001.swift":{"identifier":"EditingAndDeletingSyncUp-02-code-0001.swift","type":"file","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @ObservableState","  struct State: Equatable {","    @Presents var editSyncUp: SyncUpForm.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case cancelEditButtonTapped","    case deleteButtonTapped","    case doneEditingButtonTapped","    case editButtonTapped","    case editSyncUp(PresentationAction<SyncUpForm.Action>)","    @CasePathable","    enum Alert {","      case confirmButtonTapped","    }","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .cancelEditButtonTapped:","        state.editSyncUp = nil","        return .none","","      case .deleteButtonTapped:","        return .none","","      case .doneEditingButtonTapped:","        guard let editedSyncUp = state.editSyncUp?.syncUp","        else { return .none }","        state.$syncUp.withLock { $0 = editedSyncUp }","        state.editSyncUp = nil","        return .none","","      case .editButtonTapped:","        state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        return .none","","      case .editSyncUp:","        return .none","      }","    }","    .ifLet(\\.$editSyncUp, action: \\.editSyncUp) {","      SyncUpForm()","    }","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"highlights":[{"line":18},{"line":19},{"line":20},{"line":21}],"syntax":"swift","fileType":"swift","fileName":"SyncUpDetail.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpFormPresentation#Adding-a-sync-up":{"url":"\/tutorials\/composablearchitecture\/testingsyncupformpresentation#Adding-a-sync-up","role":"pseudoSymbol","type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpFormPresentation#Adding-a-sync-up","abstract":[{"text":"We have now integrated two moderately complex features, the ","type":"text"},{"type":"codeVoice","code":"SyncUpsList"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"SyncUpForm"},{"text":", and","type":"text"},{"text":" ","type":"text"},{"text":"so its time to write some tests. This will give us the opportunity to prove that the features","type":"text"},{"text":" ","type":"text"},{"text":"work in tandem as we expect, and we will explore “non-exhaustive” testing to make our tests less","type":"text"},{"text":" ","type":"text"},{"text":"fragile.","type":"text"}],"title":"Adding a sync-up","kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ListsOfSyncUps#SyncUpsList-feature":{"title":"SyncUpsList feature","abstract":[{"type":"text","text":"We will begin building the SyncUps app from scratch by implementing the feature that powers the"},{"type":"text","text":" "},{"type":"text","text":"list of sync-ups. It starts out as a simple feature, but it will become increasingly complex as"},{"type":"text","text":" "},{"type":"text","text":"the app evolves."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps#SyncUpsList-feature","type":"section","role":"pseudoSymbol","kind":"section","url":"\/tutorials\/composablearchitecture\/listsofsyncups#SyncUpsList-feature"},"EditingAndDeletingSyncUp-01-code-0010.swift":{"identifier":"EditingAndDeletingSyncUp-01-code-0010.swift","type":"file","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @ObservableState","  struct State: Equatable {","    @Presents var editSyncUp: SyncUpForm.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case cancelEditButtonTapped","    case deleteButtonTapped","    case doneEditingButtonTapped","    case editButtonTapped","    case editSyncUp(PresentationAction<SyncUpForm.Action>)","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .cancelEditButtonTapped:","        state.editSyncUp = nil","        return .none","","      case .deleteButtonTapped:","        return .none","","      case .editButtonTapped:","        state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        return .none","","      case .editSyncUp:","        return .none","      }","    }","    .ifLet(\\.$editSyncUp, action: \\.editSyncUp) {","      SyncUpForm()","    }","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"highlights":[{"line":23},{"line":24},{"line":25},{"line":26}],"syntax":"swift","fileType":"swift","fileName":"SyncUpDetail.swift"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/Persisting-sync-ups-to-disk":{"role":"article","title":"Persisting sync-ups to disk","kind":"article","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Persisting-sync-ups-to-disk","url":"\/tutorials\/buildingsyncups\/persisting-sync-ups-to-disk","abstract":[]},"EditingAndDeletingSyncUp-03-code-0005.swift":{"highlights":[{"line":54},{"line":55},{"line":56},{"line":69},{"line":70},{"line":71},{"line":72},{"line":73}],"syntax":"swift","fileName":"SyncUpDetail.swift","fileType":"swift","identifier":"EditingAndDeletingSyncUp-03-code-0005.swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @Reducer","  enum Destination {","    case alert(AlertState<Alert>)","    case edit(SyncUpForm)","    @CasePathable","    enum Alert {","      case confirmButtonTapped","    }","  }","","  @ObservableState","  struct State: Equatable {","    @Presents var destination: Destination.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case cancelEditButtonTapped","    case deleteButtonTapped","    case destination(PresentationAction<Destination.Action>)","    case doneEditingButtonTapped","    case editButtonTapped","  }","","  @Dependency(\\.dismiss) var dismiss","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .alert(.presented(.confirmButtonTapped)):","        @Shared(.syncUps) var syncUps","        $syncUps.withLock { _ = $0.remove(id: state.syncUp.id) }","        return .run { _ in await dismiss() }","","      case .alert(.dismiss):","        return .none","","      case .cancelEditButtonTapped:","        state.editSyncUp = nil","        return .none","","      case .delegate:","        return .none","","      case .deleteButtonTapped:","        state.alert = .deleteSyncUp","        return .none","","      case .destination:","        return .none","","      case .doneEditingButtonTapped:","        guard let editedSyncUp = state.editSyncUp?.syncUp","        else { return .none }","        state.$syncUp.withLock { $0 = editedSyncUp }","        state.editSyncUp = nil","        return .none","","      case .editButtonTapped:","        state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        return .none","      }","    }","    \/\/ .ifLet(\\.$editSyncUp, action: \\.editSyncUp) {","    \/\/   SyncUpForm()","    \/\/ }","    \/\/ .ifLet(\\.$alert, action: \\.alert)","    .ifLet(\\.$destination, action: \\.destination)","  }","}","extension SyncUpDetail.Destination.State: Equatable {}","","extension AlertState where Action == SyncUpDetail.Action.Alert {","  static let deleteSyncUp = Self {","    TextState(\"Delete?\")","  } actions: {","    ButtonState(role: .destructive, action: .confirmButtonTapped) {","      TextState(\"Yes\")","    }","    ButtonState(role: .cancel) {","      TextState(\"Nevermind\")","    }","  } message: {","    TextState(\"Are you sure you want to delete this meeting?\")","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"type":"file"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer()":{"abstract":[{"type":"text","text":"Helps implement the conformance to the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","isActive":true},{"type":"text","text":" protocol for a type."}],"kind":"symbol","role":"symbol","title":"Reducer()","type":"topic","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Reducer"},{"kind":"text","text":"()"}],"url":"\/documentation\/composablearchitecture\/reducer()","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},"EditingAndDeletingSyncUp-02-code-0002.swift":{"syntax":"swift","type":"file","fileName":"SyncUpDetail.swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @ObservableState","  struct State: Equatable {","    @Presents var alert: AlertState<Action.Alert>?","    @Presents var editSyncUp: SyncUpForm.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case cancelEditButtonTapped","    case deleteButtonTapped","    case doneEditingButtonTapped","    case editButtonTapped","    case editSyncUp(PresentationAction<SyncUpForm.Action>)","    @CasePathable","    enum Alert {","      case confirmButtonTapped","    }","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .cancelEditButtonTapped:","        state.editSyncUp = nil","        return .none","","      case .deleteButtonTapped:","        return .none","","      case .doneEditingButtonTapped:","        guard let editedSyncUp = state.editSyncUp?.syncUp","        else { return .none }","        state.$syncUp.withLock { $0 = editedSyncUp }","        state.editSyncUp = nil","        return .none","","      case .editButtonTapped:","        state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        return .none","","      case .editSyncUp:","        return .none","      }","    }","    .ifLet(\\.$editSyncUp, action: \\.editSyncUp) {","      SyncUpForm()","    }","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"highlights":[{"line":8}],"fileType":"swift","identifier":"EditingAndDeletingSyncUp-02-code-0002.swift"},"http://github.com/pointfreeco/swiftui-navigation":{"identifier":"http:\/\/github.com\/pointfreeco\/swiftui-navigation","titleInlineContent":[{"type":"text","text":"SwiftUINavigation"}],"type":"link","title":"SwiftUINavigation","url":"http:\/\/github.com\/pointfreeco\/swiftui-navigation"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/EditingAndDeletingSyncUp#Editing-the-sync-up":{"title":"Editing the sync-up","kind":"section","url":"\/tutorials\/composablearchitecture\/editinganddeletingsyncup#Editing-the-sync-up","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp#Editing-the-sync-up","abstract":[{"text":"Let’s implement two major pieces of functionality in the detail screen: editing the sync-up and","type":"text"},{"text":" ","type":"text"},{"text":"deleting the sync-up. This will force us to face a number of common problems in app development","type":"text"},{"text":" ","type":"text"},{"text":"all at once, including view reuse, navigation, alerts, and parent-child communication patterns.","type":"text"}],"type":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpForm":{"kind":"project","url":"\/tutorials\/composablearchitecture\/testingsyncupform","estimatedTime":"10min","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpForm","abstract":[{"type":"text","text":"We now have a moderately complex feature for editing the details of a sync-up, the "},{"type":"codeVoice","code":"SyncUpForm"},{"type":"text","text":" "},{"type":"text","text":"reducer. Let’s get some test coverage on the feature, and doing so will force us to come"},{"type":"text","text":" "},{"type":"text","text":"face-to-face with dependencies for the first time in this tutorial."}],"type":"topic","role":"project","title":"Testing the sync-up form"},"EditingAndDeletingSyncUp-02-code-0008.swift":{"type":"file","fileType":"swift","syntax":"swift","fileName":"SyncUpDetail.swift","highlights":[{"line":29},{"line":31},{"line":32}],"identifier":"EditingAndDeletingSyncUp-02-code-0008.swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @ObservableState","  struct State: Equatable {","    @Presents var alert: AlertState<Action.Alert>?","    @Presents var editSyncUp: SyncUpForm.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case alert(PresentationAction<Alert>)","    case cancelEditButtonTapped","    case deleteButtonTapped","    case doneEditingButtonTapped","    case editButtonTapped","    case editSyncUp(PresentationAction<SyncUpForm.Action>)","    @CasePathable","    enum Alert {","      case confirmButtonTapped","    }","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .alert(.presented(.confirmButtonTapped)):","        ","      case .alert(.dismiss):","","      case .cancelEditButtonTapped:","        state.editSyncUp = nil","        return .none","","      case .deleteButtonTapped:","        state.alert = .deleteSyncUp","        return .none","","      case .doneEditingButtonTapped:","        guard let editedSyncUp = state.editSyncUp?.syncUp","        else { return .none }","        state.$syncUp.withLock { $0 = editedSyncUp }","        state.editSyncUp = nil","        return .none","","      case .editButtonTapped:","        state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        return .none","","      case .editSyncUp:","        return .none","      }","    }","    .ifLet(\\.$editSyncUp, action: \\.editSyncUp) {","      SyncUpForm()","    }","    .ifLet(\\.$alert, action: \\.alert) ","  }","}","","extension AlertState where Action == SyncUpDetail.Action.Alert {","  static let deleteSyncUp = Self {","    TextState(\"Delete?\")","  } actions: {","    ButtonState(role: .destructive, action: .confirmButtonTapped) {","      TextState(\"Yes\")","    }","    ButtonState(role: .cancel) {","      TextState(\"Nevermind\")","    }","  } message: {","    TextState(\"Are you sure you want to delete this meeting?\")","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"]},"EditingAndDeletingSyncUp-01-code-0004.swift":{"syntax":"swift","type":"file","fileName":"SyncUpDetail.swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @ObservableState","  struct State: Equatable {","    @Presents var editSyncUp: SyncUpForm.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case deleteButtonTapped","    case editButtonTapped","    case editSyncUp(PresentationAction<SyncUpForm.Action>)","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .deleteButtonTapped:","        return .none","","      case .editButtonTapped:","        state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        return .none","","      case .editSyncUp:","        return .none","      }","    }","    .ifLet(\\.$editSyncUp, action: \\.editSyncUp) {","      SyncUpForm()","    }","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"highlights":[{"line":25}],"fileType":"swift","identifier":"EditingAndDeletingSyncUp-01-code-0004.swift"},"EditingAndDeletingSyncUp-02-code-0006.swift":{"syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @ObservableState","  struct State: Equatable {","    @Presents var alert: AlertState<Action.Alert>?","    @Presents var editSyncUp: SyncUpForm.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case alert(PresentationAction<Alert>)","    case cancelEditButtonTapped","    case deleteButtonTapped","    case doneEditingButtonTapped","    case editButtonTapped","    case editSyncUp(PresentationAction<SyncUpForm.Action>)","    @CasePathable","    enum Alert {","      case confirmButtonTapped","    }","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .alert:","        return .none","        ","      case .cancelEditButtonTapped:","        state.editSyncUp = nil","        return .none","","      case .deleteButtonTapped:","        state.alert = AlertState {","          TextState(\"Delete?\")","        } actions: {","          ButtonState(role: .destructive, action: .confirmButtonTapped) {","            TextState(\"Yes\")","          }","          ButtonState(role: .cancel) {","            TextState(\"Nevermind\")","          }","        } message: {","          TextState(\"Are you sure you want to delete this meeting?\")","        }","        return .none","","      case .doneEditingButtonTapped:","        guard let editedSyncUp = state.editSyncUp?.syncUp","        else { return .none }","        state.$syncUp.withLock { $0 = editedSyncUp }","        state.editSyncUp = nil","        return .none","","      case .editButtonTapped:","        state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        return .none","","      case .editSyncUp:","        return .none","      }","    }","    .ifLet(\\.$editSyncUp, action: \\.editSyncUp) {","      SyncUpForm()","    }","    .ifLet(\\.$alert, action: \\.alert) ","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"identifier":"EditingAndDeletingSyncUp-02-code-0006.swift","fileName":"SyncUpDetail.swift","type":"file","fileType":"swift","highlights":[{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44},{"line":45},{"line":46},{"line":47},{"line":48}]},"EditingAndDeletingSyncUp-01-code-0002.swift":{"highlights":[{"line":15}],"syntax":"swift","fileName":"SyncUpDetail.swift","fileType":"swift","identifier":"EditingAndDeletingSyncUp-01-code-0002.swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @ObservableState","  struct State: Equatable {","    @Presents var editSyncUp: SyncUpForm.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case deleteButtonTapped","    case editButtonTapped","    case editSyncUp(PresentationAction<SyncUpForm.Action>)","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .deleteButtonTapped:","        return .none","","      case .editButtonTapped:","        return .none","      }","    }","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"type":"file"},"EditingAndDeletingSyncUp-02-cover-480p.mov":{"identifier":"EditingAndDeletingSyncUp-02-cover-480p.mov","type":"video","alt":null,"variants":[{"traits":["1x","light"],"url":"\/videos\/ComposableArchitecture\/EditingAndDeletingSyncUp-02-cover-480p.mov"}],"poster":null},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationState":{"url":"\/documentation\/composablearchitecture\/presentationstate","abstract":[{"text":"A property wrapper for state that can be presented.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState","navigatorTitle":[{"text":"PresentationState","kind":"identifier"}],"type":"topic","title":"PresentationState","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PresentationState","kind":"identifier"}],"role":"symbol","kind":"symbol"},"EditingAndDeletingSyncUp-01-code-0003.swift":{"identifier":"EditingAndDeletingSyncUp-01-code-0003.swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @ObservableState","  struct State: Equatable {","    @Presents var editSyncUp: SyncUpForm.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case deleteButtonTapped","    case editButtonTapped","    case editSyncUp(PresentationAction<SyncUpForm.Action>)","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .deleteButtonTapped:","        return .none","","      case .editButtonTapped:","        return .none","","      case .editSyncUp:","        return .none","      }","    }","    .ifLet(\\.$editSyncUp, action: \\.editSyncUp) {","      SyncUpForm()","    }","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"type":"file","highlights":[{"line":26},{"line":27},{"line":28},{"line":31},{"line":32},{"line":33}],"fileName":"SyncUpDetail.swift","fileType":"swift","syntax":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpFormPresentation":{"type":"topic","title":"Testing the add sync-up flow","abstract":[{"text":"We have now integrated two moderately complex features, the ","type":"text"},{"code":"SyncUpsList","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"SyncUpForm","type":"codeVoice"},{"text":", and","type":"text"},{"text":" ","type":"text"},{"text":"so its time to write some tests. This will give us the opportunity to prove that the features","type":"text"},{"text":" ","type":"text"},{"text":"work in tandem as we expect, and we will explore “non-exhaustive” testing to make our tests less","type":"text"},{"text":" ","type":"text"},{"text":"fragile.","type":"text"}],"role":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpFormPresentation","estimatedTime":"10min","kind":"project","url":"\/tutorials\/composablearchitecture\/testingsyncupformpresentation"},"EditingAndDeletingSyncUp-03-code-0013.swift":{"syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  \/\/ ...","}","","struct SyncUpDetailView: View {","  @Bindable var store: StoreOf<SyncUpDetail>","","  var body: some View {","    Form {","      Section {","        NavigationLink {","        } label: {","          Label(\"Start Meeting\", systemImage: \"timer\")","            .font(.headline)","            .foregroundColor(.accentColor)","        }","        HStack {","          Label(\"Length\", systemImage: \"clock\")","          Spacer()","          Text(store.syncUp.duration.formatted(.units()))","        }","","        HStack {","          Label(\"Theme\", systemImage: \"paintpalette\")","          Spacer()","          Text(store.syncUp.theme.name)","            .padding(4)","            .foregroundColor(store.syncUp.theme.accentColor)","            .background(store.syncUp.theme.mainColor)","            .cornerRadius(4)","        }","      } header: {","        Text(\"Sync-up Info\")","      }","","      if !store.syncUp.meetings.isEmpty {","        Section {","          ForEach(store.syncUp.meetings) { meeting in","            Button {","            } label: {","              HStack {","                Image(systemName: \"calendar\")","                Text(meeting.date, style: .date)","                Text(meeting.date, style: .time)","              }","            }","          }","        } header: {","          Text(\"Past meetings\")","        }","      }","","      Section {","        ForEach(store.syncUp.attendees) { attendee in","          Label(attendee.name, systemImage: \"person\")","        }","      } header: {","        Text(\"Attendees\")","      }","","      Section {","        Button(\"Delete\") {","          store.send(.deleteButtonTapped)","        }","        .foregroundColor(.red)","        .frame(maxWidth: .infinity)","      }","    }","    .toolbar {","      Button(\"Edit\") {","        store.send(.editButtonTapped)","      }","    }","    .navigationTitle(Text(store.syncUp.title))","    .alert($store.scope(state: \\.destination?.alert, action: \\.destination.alert))","    .sheet(","      item: $store.scope(state: \\.destination?.edit, action: \\.destination.edit)","    ) { editSyncUpStore in","      NavigationStack {","        SyncUpFormView(store: editSyncUpStore)","          .navigationTitle(store.syncUp.title)","          .toolbar {","            ToolbarItem(placement: .cancellationAction) {","              Button(\"Cancel\") {","                store.send(.cancelEditButtonTapped)","              }","            }","            ToolbarItem(placement: .confirmationAction) {","              Button(\"Done\") {","                store.send(.doneEditingButtonTapped)","              }","            }","          }","      }","    }","  }","}","","#Preview {","  NavigationStack {","    SyncUpDetailView(","      store: Store(","        initialState: SyncUpDetail.State(","          syncUp: Shared(value: .mock)","        )","      ) {","        SyncUpDetail()","      }","    )","  }","}"],"identifier":"EditingAndDeletingSyncUp-03-code-0013.swift","fileName":"SyncUpDetail.swift","type":"file","fileType":"swift","highlights":[{"line":78},{"line":79},{"line":80},{"line":81},{"line":82}]},"EditingAndDeletingSyncUp-01-cover-480p.mov":{"identifier":"EditingAndDeletingSyncUp-01-cover-480p.mov","type":"video","alt":null,"variants":[{"traits":["1x","light"],"url":"\/videos\/ComposableArchitecture\/EditingAndDeletingSyncUp-01-cover-480p.mov"}],"poster":null},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","navigatorTitle":[{"text":"Reducer","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/reducer","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Reducer","kind":"identifier"}],"role":"symbol","title":"Reducer","abstract":[{"text":"A protocol that describes how to evolve the current state of an application to the next state,","type":"text"},{"text":" ","type":"text"},{"text":"given an action, and describes what ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","isActive":true,"type":"reference"},{"text":"s should be executed later by the store, if any.","type":"text"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/DismissEffect":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DismissEffect","kind":"identifier"}],"role":"symbol","type":"topic","abstract":[{"text":"An effect that dismisses the current presentation.","type":"text"}],"url":"\/documentation\/composablearchitecture\/dismisseffect","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DismissEffect","kind":"symbol","title":"DismissEffect","navigatorTitle":[{"text":"DismissEffect","kind":"identifier"}]},"EditingAndDeletingSyncUp-03-code-0012.swift":{"highlights":[{"line":70}],"syntax":"swift","fileName":"SyncUpDetail.swift","fileType":"swift","identifier":"EditingAndDeletingSyncUp-03-code-0012.swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @Reducer","  enum Destination {","    case alert(AlertState<Alert>)","    case edit(SyncUpForm)","    @CasePathable","    enum Alert {","      case confirmButtonTapped","    }","  }","","  @ObservableState","  struct State: Equatable {","    @Presents var destination: Destination.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case cancelEditButtonTapped","    case deleteButtonTapped","    case destination(PresentationAction<Destination.Action>)","    case doneEditingButtonTapped","    case editButtonTapped","  }","","  @Dependency(\\.dismiss) var dismiss","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      \/\/ case .alert(.presented(.confirmButtonTapped)):","      case .destination(.presented(.alert(.confirmButtonTapped))):","        @Shared(.syncUps) var syncUps","        $syncUps.withLock { _ = $0.remove(id: state.syncUp.id) }","        return .run { _ in await dismiss() }","","      case .destination:","        return .none","","      case .cancelEditButtonTapped:","        state.destination = nil","        return .none","","      case .deleteButtonTapped:","        state.destination = .alert(.deleteSyncUp)","        return .none","","      case .doneEditingButtonTapped:","        guard let editedSyncUp = state.destination?.edit?.syncUp","        else { return .none }","        state.$syncUp.withLock { $0 = editedSyncUp }","        state.destination = nil","        return .none","","      case .editButtonTapped:","        \/\/ state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        state.destination = .edit(SyncUpForm.State(syncUp: state.syncUp))","        return .none","      }","    }","    .ifLet(\\.$destination, action: \\.destination)","  }","}","extension SyncUpDetail.Destination.State: Equatable {}","","extension AlertState where Action == SyncUpDetail.Destination.Alert {","  static let deleteSyncUp = Self {","    TextState(\"Delete?\")","  } actions: {","    ButtonState(role: .destructive, action: .confirmButtonTapped) {","      TextState(\"Yes\")","    }","    ButtonState(role: .cancel) {","      TextState(\"Nevermind\")","    }","  } message: {","    TextState(\"Are you sure you want to delete this meeting?\")","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"type":"file"},"EditingAndDeletingSyncUp-03-code-0002.swift":{"syntax":"swift","type":"file","identifier":"EditingAndDeletingSyncUp-03-code-0002.swift","highlights":[{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13}],"fileName":"SyncUpDetail.swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @Reducer","  enum Destination {","    case alert(AlertState<Alert>)","    case edit(SyncUpForm)","    @CasePathable","    enum Alert {","      case confirmButtonTapped","    }","  }","  \/\/ ...","}","extension SyncUpDetail.Destination.State: Equatable {}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"fileType":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpDetail":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetail","title":"Sync-up detail","estimatedTime":"5min","type":"topic","url":"\/tutorials\/composablearchitecture\/syncupdetail","kind":"project","abstract":[{"text":"The “sync-up detail” screen shows all the information of a sync-up, and has many actions that","type":"text"},{"text":" ","type":"text"},{"text":"can take place in the screen. The user can edit the sync-up, or start a new meeting in the sync","type":"text"},{"text":" ","type":"text"},{"text":"up, or drill-down to a past meeting, or even delete the meeting.","type":"text"}],"role":"project"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/MeetingNavigation":{"role":"project","estimatedTime":"5min","kind":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/MeetingNavigation","url":"\/tutorials\/composablearchitecture\/meetingnavigation","title":"Navigating to a meeting","abstract":[{"type":"text","text":"Now that we have a navigation stack in place we can start navigating to other features in the"},{"type":"text","text":" "},{"type":"text","text":"application. The simplest is the meeting screen, which allows you to see the details of a"},{"type":"text","text":" "},{"type":"text","text":"previous recorded meeting."}],"type":"topic"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/RecordMeetingFeature#Create-a-new-feature":{"role":"pseudoSymbol","type":"section","abstract":[{"type":"text","text":"Let’s get the basics of a new feature into place that we can navigate to, and then we will"},{"type":"text","text":" "},{"type":"text","text":"slowly layer on its complex logic and behavior, such as the timer and speech recognizer."}],"kind":"section","title":"Create a new feature","url":"\/tutorials\/composablearchitecture\/recordmeetingfeature#Create-a-new-feature","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/RecordMeetingFeature#Create-a-new-feature"},"EditingAndDeletingSyncUp-01-code-0008.swift":{"identifier":"EditingAndDeletingSyncUp-01-code-0008.swift","type":"file","highlights":[{"line":85},{"line":90}],"content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  \/\/ ...","}","","struct SyncUpDetailView: View {","  @Bindable var store: StoreOf<SyncUpDetail>","","  var body: some View {","    Form {","      Section {","        NavigationLink {","        } label: {","          Label(\"Start Meeting\", systemImage: \"timer\")","            .font(.headline)","            .foregroundStyle(Color.accentColor)","        }","        HStack {","          Label(\"Length\", systemImage: \"clock\")","          Spacer()","          Text(store.syncUp.duration.formatted(.units()))","        }","","        HStack {","          Label(\"Theme\", systemImage: \"paintpalette\")","          Spacer()","          Text(store.syncUp.theme.name)","            .padding(4)","            .foregroundStyle(store.syncUp.theme.accentColor)","            .background(store.syncUp.theme.mainColor)","            .clipShape(.rect(cornerRadius: 4))","        }","      } header: {","        Text(\"Sync-up Info\")","      }","","      if !store.syncUp.meetings.isEmpty {","        Section {","          ForEach(store.syncUp.meetings) { meeting in","            Button {","            } label: {","              HStack {","                Image(systemName: \"calendar\")","                Text(meeting.date, style: .date)","                Text(meeting.date, style: .time)","              }","            }","          }","        } header: {","          Text(\"Past meetings\")","        }","      }","","      Section {","        ForEach(store.syncUp.attendees) { attendee in","          Label(attendee.name, systemImage: \"person\")","        }","      } header: {","        Text(\"Attendees\")","      }","","      Section {","        Button(\"Delete\", role: .destructive) {","          store.send(.deleteButtonTapped)","        }","        .frame(maxWidth: .infinity)","      }","    }","    .navigationTitle(Text(store.syncUp.title))","    .toolbar {","      Button(\"Edit\") {","        store.send(.editButtonTapped)","      }","    }","    .sheet(item: $store.scope(state: \\.editSyncUp, action: \\.editSyncUp)) { editSyncUpStore in","      NavigationStack {","        SyncUpFormView(store: editSyncUpStore)","          .navigationTitle(store.syncUp.title)","          .toolbar {","            ToolbarItem(placement: .cancellationAction) {","              Button(\"Cancel\") {","                store.send(.cancelEditButtonTapped)","              }","            }","            ToolbarItem(placement: .confirmationAction) {","              Button(\"Done\") {","                store.send(.doneEditingButtonTapped)","              }","            }","          }","      }","    }","  }","}","","#Preview {","  NavigationStack {","    SyncUpDetailView(","      store: Store(","        initialState: SyncUpDetail.State(","          syncUp: Shared(value: .mock)","        )","      ) {","        SyncUpDetail()","      }","    )","  }","}"],"fileType":"swift","fileName":"SyncUpDetail.swift","syntax":"swift"},"EditingAndDeletingSyncUp-02-code-0014.swift":{"highlights":[{"line":79}],"syntax":"swift","fileName":"SyncUpDetail.swift","fileType":"swift","identifier":"EditingAndDeletingSyncUp-02-code-0014.swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  \/\/ ...","}","","struct SyncUpDetailView: View {","  @Bindable var store: StoreOf<SyncUpDetail>","","  var body: some View {","    Form {","      Section {","        NavigationLink {","        } label: {","          Label(\"Start Meeting\", systemImage: \"timer\")","            .font(.headline)","            .foregroundColor(.accentColor)","        }","        HStack {","          Label(\"Length\", systemImage: \"clock\")","          Spacer()","          Text(store.syncUp.duration.formatted(.units()))","        }","","        HStack {","          Label(\"Theme\", systemImage: \"paintpalette\")","          Spacer()","          Text(store.syncUp.theme.name)","            .padding(4)","            .foregroundColor(store.syncUp.theme.accentColor)","            .background(store.syncUp.theme.mainColor)","            .cornerRadius(4)","        }","      } header: {","        Text(\"Sync-up Info\")","      }","","      if !store.syncUp.meetings.isEmpty {","        Section {","          ForEach(store.syncUp.meetings) { meeting in","            Button {","            } label: {","              HStack {","                Image(systemName: \"calendar\")","                Text(meeting.date, style: .date)","                Text(meeting.date, style: .time)","              }","            }","          }","        } header: {","          Text(\"Past meetings\")","        }","      }","","      Section {","        ForEach(store.syncUp.attendees) { attendee in","          Label(attendee.name, systemImage: \"person\")","        }","      } header: {","        Text(\"Attendees\")","      }","","      Section {","        Button(\"Delete\") {","          store.send(.deleteButtonTapped)","        }","        .foregroundColor(.red)","        .frame(maxWidth: .infinity)","      }","    }","    .navigationTitle(Text(store.syncUp.title))","    .toolbar {","      Button(\"Edit\") {","        store.send(.editButtonTapped)","      }","    }","    .alert($store.scope(state: \\.alert, action: \\.alert))","    .sheet(item: $store.scope(state: \\.editSyncUp, action: \\.editSyncUp)) { editSyncUpStore in","      NavigationStack {","        SyncUpFormView(store: editSyncUpStore)","          .navigationTitle(store.syncUp.title)","          .toolbar {","            ToolbarItem(placement: .cancellationAction) {","              Button(\"Cancel\") {","                store.send(.cancelEditButtonTapped)","              }","            }","            ToolbarItem(placement: .confirmationAction) {","              Button(\"Done\") {","                store.send(.doneEditingButtonTapped)","              }","            }","          }","      }","    }","  }","}","","#Preview {","  NavigationStack {","    SyncUpDetailView(","      store: Store(","        initialState: SyncUpDetail.State(","          syncUp: Shared(value: .mock)","        )","      ) {","        SyncUpDetail()","      }","    )","  }","}"],"type":"file"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PresentingSyncUpForm#Integrating-the-feature-views-together":{"kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm#Integrating-the-feature-views-together","url":"\/tutorials\/composablearchitecture\/presentingsyncupform#Integrating-the-feature-views-together","title":"Integrating the feature views together","type":"section","abstract":[{"text":"We now have two features built: the sync-ups list and the sync-up form. These features do not","type":"text"},{"type":"text","text":" "},{"type":"text","text":"exist in isolation, but rather are meant to be integrated in a deep way. One should be able to"},{"type":"text","text":" "},{"type":"text","text":"navigate to the sync-up form from the list view, enter the details of a new sync-up, and then"},{"type":"text","text":" "},{"type":"text","text":"add that sync-up to the root list."}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/EditingAndDeletingSyncUp#Deleting-the-sync-up":{"title":"Deleting the sync-up","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp#Deleting-the-sync-up","type":"section","role":"pseudoSymbol","abstract":[{"type":"text","text":"Let’s implement two major pieces of functionality in the detail screen: editing the sync-up and"},{"type":"text","text":" "},{"type":"text","text":"deleting the sync-up. This will force us to face a number of common problems in app development"},{"type":"text","text":" "},{"type":"text","text":"all at once, including view reuse, navigation, alerts, and parent-child communication patterns."}],"kind":"section","url":"\/tutorials\/composablearchitecture\/editinganddeletingsyncup#Deleting-the-sync-up"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingListOfSyncUps":{"kind":"project","title":"Testing the list of sync-ups","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingListOfSyncUps","abstract":[{"text":"The SyncUpsList feature we have built so far isn’t very complex. In fact, it only has one","type":"text"},{"text":" ","type":"text"},{"text":"primary action, that of deleting sync-ups from its collection. However, it can be good practice","type":"text"},{"text":" ","type":"text"},{"text":"to test new features as you add them, and in the future we will have much more complicated","type":"text"},{"text":" ","type":"text"},{"text":"behavior to test.","type":"text"}],"role":"project","url":"\/tutorials\/composablearchitecture\/testinglistofsyncups","estimatedTime":"5min","type":"topic"},"EditingAndDeletingSyncUp-01-code-0007.swift":{"highlights":[{"line":81},{"line":82},{"line":83},{"line":84},{"line":85},{"line":86},{"line":87},{"line":88},{"line":89},{"line":90},{"line":91}],"content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  \/\/ ...","}","","struct SyncUpDetailView: View {","  @Bindable var store: StoreOf<SyncUpDetail>","","  var body: some View {","    Form {","      Section {","        NavigationLink {","        } label: {","          Label(\"Start Meeting\", systemImage: \"timer\")","            .font(.headline)","            .foregroundStyle(Color.accentColor)","        }","        HStack {","          Label(\"Length\", systemImage: \"clock\")","          Spacer()","          Text(store.syncUp.duration.formatted(.units()))","        }","","        HStack {","          Label(\"Theme\", systemImage: \"paintpalette\")","          Spacer()","          Text(store.syncUp.theme.name)","            .padding(4)","            .foregroundStyle(store.syncUp.theme.accentColor)","            .background(store.syncUp.theme.mainColor)","            .clipShape(.rect(cornerRadius: 4))","        }","      } header: {","        Text(\"Sync-up Info\")","      }","","      if !store.syncUp.meetings.isEmpty {","        Section {","          ForEach(store.syncUp.meetings) { meeting in","            Button {","            } label: {","              HStack {","                Image(systemName: \"calendar\")","                Text(meeting.date, style: .date)","                Text(meeting.date, style: .time)","              }","            }","          }","        } header: {","          Text(\"Past meetings\")","        }","      }","","      Section {","        ForEach(store.syncUp.attendees) { attendee in","          Label(attendee.name, systemImage: \"person\")","        }","      } header: {","        Text(\"Attendees\")","      }","","      Section {","        Button(\"Delete\", role: .destructive) {","          store.send(.deleteButtonTapped)","        }","        .frame(maxWidth: .infinity)","      }","    }","    .navigationTitle(Text(store.syncUp.title))","    .toolbar {","      Button(\"Edit\") {","        store.send(.editButtonTapped)","      }","    }","    .sheet(item: $store.scope(state: \\.editSyncUp, action: \\.editSyncUp)) { editSyncUpStore in","      NavigationStack {","        SyncUpFormView(store: editSyncUpStore)","          .navigationTitle(store.syncUp.title)","          .toolbar {","            ToolbarItem(placement: .cancellationAction) {","              Button(\"Cancel\") {","              }","            }","            ToolbarItem(placement: .confirmationAction) {","              Button(\"Done\") {","              }","            }","          }","      }","    }","  }","}","","#Preview {","  NavigationStack {","    SyncUpDetailView(","      store: Store(","        initialState: SyncUpDetail.State(","          syncUp: Shared(value: .mock)","        )","      ) {","        SyncUpDetail()","      }","    )","  }","}"],"type":"file","syntax":"swift","fileType":"swift","identifier":"EditingAndDeletingSyncUp-01-code-0007.swift","fileName":"SyncUpDetail.swift"},"EditingAndDeletingSyncUp-03-code-0010.swift":{"identifier":"EditingAndDeletingSyncUp-03-code-0010.swift","type":"file","highlights":[{"line":53},{"line":56}],"content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @Reducer","  enum Destination {","    case alert(AlertState<Alert>)","    case edit(SyncUpForm)","    @CasePathable","    enum Alert {","      case confirmButtonTapped","    }","  }","","  @ObservableState","  struct State: Equatable {","    @Presents var destination: Destination.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case cancelEditButtonTapped","    case deleteButtonTapped","    case destination(PresentationAction<Destination.Action>)","    case doneEditingButtonTapped","    case editButtonTapped","  }","","  @Dependency(\\.dismiss) var dismiss","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      \/\/ case .alert(.presented(.confirmButtonTapped)):","      case .destination(.presented(.alert(.confirmButtonTapped))):","        @Shared(.syncUps) var syncUps","        $syncUps.withLock { _ = $0.remove(id: state.syncUp.id) }","        return .run { _ in await dismiss() }","","      case .destination:","        return .none","","      case .cancelEditButtonTapped:","        state.destination = nil","        return .none","","      case .deleteButtonTapped:","        state.destination = .alert(.deleteSyncUp)","        return .none","","      case .doneEditingButtonTapped:","        guard let editedSyncUp = state.destination?.edit?.syncUp","        else { return .none }","        state.$syncUp.withLock { $0 = editedSyncUp }","        state.destination = nil","        return .none","","      case .editButtonTapped:","        state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        return .none","      }","    }","    .ifLet(\\.$destination, action: \\.destination)","  }","}","extension SyncUpDetail.Destination.State: Equatable {}","","extension AlertState where Action == SyncUpDetail.Action.Alert {","  static let deleteSyncUp = Self {","    TextState(\"Delete?\")","  } actions: {","    ButtonState(role: .destructive, action: .confirmButtonTapped) {","      TextState(\"Yes\")","    }","    ButtonState(role: .cancel) {","      TextState(\"Nevermind\")","    }","  } message: {","    TextState(\"Are you sure you want to delete this meeting?\")","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"fileType":"swift","fileName":"SyncUpDetail.swift","syntax":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingSpeechRecognizer#Asking-for-speech-recognition-permission":{"abstract":[{"text":"We have just one feature left to implement, and it’s one of the most complicated ones. We need","type":"text"},{"text":" ","type":"text"},{"text":"to use Apple’s ","type":"text"},{"code":"SFSpeechRecognizer","type":"codeVoice"},{"text":" API to ask the user for permission to transcribe their","type":"text"},{"text":" ","type":"text"},{"text":"audio, and then start a speech recognition task to live transcribe the meeting while it is","type":"text"},{"text":" ","type":"text"},{"text":"in progress.","type":"text"}],"kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingSpeechRecognizer#Asking-for-speech-recognition-permission","type":"section","title":"Asking for speech recognition permission","url":"\/tutorials\/composablearchitecture\/implementingspeechrecognizer#Asking-for-speech-recognition-permission","role":"pseudoSymbol"},"EditingAndDeletingSyncUp-03-code-0006.swift":{"identifier":"EditingAndDeletingSyncUp-03-code-0006.swift","type":"file","highlights":[{"line":35},{"line":36}],"content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @Reducer","  enum Destination {","    case alert(AlertState<Alert>)","    case edit(SyncUpForm)","    @CasePathable","    enum Alert {","      case confirmButtonTapped","    }","  }","","  @ObservableState","  struct State: Equatable {","    @Presents var destination: Destination.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case cancelEditButtonTapped","    case deleteButtonTapped","    case destination(PresentationAction<Destination.Action>)","    case doneEditingButtonTapped","    case editButtonTapped","  }","","  @Dependency(\\.dismiss) var dismiss","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      \/\/ case .alert(.presented(.confirmButtonTapped)):","      case .destination(.presented(.alert(.confirmButtonTapped))):","        @Shared(.syncUps) var syncUps","        $syncUps.withLock { _ = $0.remove(id: state.syncUp.id) }","        return .run { _ in await dismiss() }","","      case .alert(.dismiss):","        return .none","","      case .cancelEditButtonTapped:","        state.editSyncUp = nil","        return .none","","      case .delegate:","        return .none","","      case .deleteButtonTapped:","        state.alert = .deleteSyncUp","        return .none","","      case .destination:","        return .none","","      case .doneEditingButtonTapped:","        guard let editedSyncUp = state.editSyncUp?.syncUp","        else { return .none }","        state.$syncUp.withLock { $0 = editedSyncUp }","        state.editSyncUp = nil","        return .none","","      case .editButtonTapped:","        state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        return .none","      }","    }","    .ifLet(\\.$destination, action: \\.destination)","  }","}","extension SyncUpDetail.Destination.State: Equatable {}","","extension AlertState where Action == SyncUpDetail.Action.Alert {","  static let deleteSyncUp = Self {","    TextState(\"Delete?\")","  } actions: {","    ButtonState(role: .destructive, action: .confirmButtonTapped) {","      TextState(\"Yes\")","    }","    ButtonState(role: .cancel) {","      TextState(\"Nevermind\")","    }","  } message: {","    TextState(\"Are you sure you want to delete this meeting?\")","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"fileType":"swift","fileName":"SyncUpDetail.swift","syntax":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingTimer#Testing-the-timer":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#Testing-the-timer","url":"\/tutorials\/composablearchitecture\/implementingtimer#Testing-the-timer","role":"pseudoSymbol","title":"Testing the timer","abstract":[{"text":"The first major piece of logic and behavior we will introduce to the record meeting feature is","type":"text"},{"text":" ","type":"text"},{"text":"the timer. This is a long-living effect that runs in parallel with the rest of the feature, and","type":"text"},{"text":" ","type":"text"},{"text":"we need to implement nuanced logic to figure out when to proceed to the next speaker.","type":"text"}],"type":"section","kind":"section"}}}