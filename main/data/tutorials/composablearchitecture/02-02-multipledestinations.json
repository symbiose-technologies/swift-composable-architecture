{"metadata":{"title":"Multiple presentation destinations","role":"project","categoryPathComponent":"MeetComposableArchitecture","category":"The Composable Architecture"},"hierarchy":{"modules":[{"projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Create-a-reducer","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-with-SwiftUI","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-into-the-app","kind":"task"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#What-is-a-side-effect"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Performing-a-network-request"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Managing-a-timer"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-state-changes","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-effects","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-network-requests","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Controlling-dependencies","kind":"task"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Adding-a-tab-view"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Composing-reducers"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Deriving-child-stores"}]}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials"},{"projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Project-set-up"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-reducers"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-views"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Child-to-parent-communication"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Delete-contacts","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Improve-domain-modeling","kind":"task"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-add-contact-flow"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Non-exhaustive-testing"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-delete-contact-flow"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Contact-detail-feature"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Drill-down-to-contact-detail"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Deleting-a-contact"}]}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation"}],"paths":[["doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/$volume","doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation"]],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations"},"sections":[{"title":"Multiple presentation destinations","estimatedTimeInMinutes":30,"content":[{"inlineContent":[{"type":"text","text":"In the previous section you learned how to model your domains so that a parent feature can"},{"type":"text","text":" "},{"type":"text","text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be"},{"type":"text","text":" "},{"type":"text","text":"able to present "},{"type":"emphasis","inlineContent":[{"type":"text","text":"many"}]},{"type":"text","text":" features."}],"type":"paragraph"}],"kind":"hero","chapter":"Navigation"},{"kind":"tasks","tasks":[{"title":"Delete contacts","stepsSection":[{"content":[{"inlineContent":[{"text":"Go back to ContactsFeature.swift that we worked in from the last section. Add a new action","type":"text"},{"text":" ","type":"text"},{"text":"that will be sent when the delete button is tapped on a row in the contacts list.","type":"text"}],"type":"paragraph"}],"runtimePreview":null,"media":null,"caption":[],"code":"02-02-01-code-0000.swift","type":"step"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When the delete button is tapped we want to show an alert asking the user to confirm deletion"},{"type":"text","text":" "},{"type":"text","text":"of the contact."}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Add a piece of optional ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Presents()","isActive":true,"type":"reference"},{"text":" state to the","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"ContactsFeature"},{"text":" state. We will further use ","type":"text"},{"type":"codeVoice","code":"AlertState"},{"text":" as it allows us to describe all","type":"text"},{"text":" ","type":"text"},{"text":"of the details of the alert in a manner that is test friendly since it is ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"text":".","type":"text"}]}],"runtimePreview":null,"media":null,"caption":[],"code":"02-02-01-code-0001.swift","type":"step"},{"content":[{"inlineContent":[{"type":"text","text":"Add a new case to the "},{"type":"codeVoice","code":"ContactsFeature"},{"type":"text","text":"’s action that represents the actions that can"},{"type":"text","text":" "},{"type":"text","text":"happen in the alert. We will use "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","isActive":true},{"type":"text","text":" for this."}],"type":"paragraph"}],"runtimePreview":null,"media":null,"caption":[{"name":"Note","type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"The only choices in the alert are to cancel or confirm deletion, but we do not need","type":"text"},{"text":" ","type":"text"},{"text":"to model the cancel action. That will be handled automatically for us.","type":"text"}]}]}],"code":"02-02-01-code-0002.swift","type":"step"},{"type":"paragraph","inlineContent":[{"text":"Now that we have new state modeled in our domain for the presentation of the alert, we can","type":"text"},{"text":" ","type":"text"},{"text":"properly implement the ","type":"text"},{"type":"codeVoice","code":"deleteButtonTapped"},{"text":" action.","type":"text"}]},{"content":[{"inlineContent":[{"text":"When the delete button is tapped we can populate the ","type":"text"},{"code":"alert","type":"codeVoice"},{"text":" state in order to ask the user","type":"text"},{"text":" ","type":"text"},{"text":"to confirm deletion of the contact.","type":"text"}],"type":"paragraph"}],"runtimePreview":null,"media":null,"caption":[],"code":"02-02-01-code-0003.swift","type":"step"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Integrate the alert’s logic into the "},{"code":"ContactsFeature","type":"codeVoice"},{"type":"text","text":" by making another use of the"},{"type":"text","text":" "},{"code":"ComposableArchitecture\/Reducer\/ifLet(_:action:destination:fileID:filePath:line:column:)-4ub6q","type":"codeVoice"},{"type":"text","text":" operator."}]}],"runtimePreview":null,"media":null,"caption":[],"code":"02-02-01-code-0004.swift","type":"step"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Listen for when the confirmation action is sent in the alert, and at that time we can"},{"type":"text","text":" "},{"type":"text","text":"actually remove the element from the array."}]}],"runtimePreview":null,"media":null,"caption":[],"code":"02-02-01-code-0005.swift","type":"step"},{"type":"paragraph","inlineContent":[{"type":"text","text":"That’s all it takes to integrate the alert it the "},{"code":"ContactsFeature","type":"codeVoice"},{"type":"text","text":" and implement all of its"},{"type":"text","text":" "},{"type":"text","text":"logic. Next we need to integrate the alert into the view. The library ships a special"},{"type":"text","text":" "},{"code":"SwiftUI\/View\/alert(store:)","type":"codeVoice"},{"type":"text","text":" view modifier that is tuned specifically for"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","isActive":true},{"type":"text","text":"s."}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Add the ","type":"text"},{"type":"codeVoice","code":"SwiftUI\/View\/alert(_:)"},{"text":" view modifier to the ","type":"text"},{"type":"codeVoice","code":"ContactsView"},{"text":", and hand it a","type":"text"},{"text":" ","type":"text"},{"text":"store that is scoped to the alert domain.","type":"text"}]}],"runtimePreview":null,"media":null,"caption":[{"type":"aside","name":"Note","content":[{"inlineContent":[{"type":"text","text":"In order for the "},{"type":"codeVoice","code":"$store.scope"},{"type":"text","text":" syntax to work you must hold onto the store in the"},{"type":"text","text":" "},{"type":"text","text":"view using the "},{"type":"codeVoice","code":"@Bindable"},{"type":"text","text":" property wrapper, or "},{"type":"codeVoice","code":"@Perception.Bindable"},{"type":"text","text":" if you are"},{"type":"text","text":" "},{"type":"text","text":"targeting older platforms."}],"type":"paragraph"}],"style":"note"}],"code":"02-02-01-code-0006.swift","type":"step"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a button to each row of the contacts list in order to send the "},{"code":"deleteButtonTapped","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"action to the store."}]}],"runtimePreview":null,"media":null,"caption":[],"code":"02-02-01-code-0007.swift","type":"step"},{"content":[{"inlineContent":[{"type":"text","text":"Run the app in the preview to see that deletion works as expected. After tapping the trash"},{"type":"text","text":" "},{"type":"text","text":"icon, an alert shows, and if you confirm deletion the item is removed from the list."}],"type":"paragraph"}],"runtimePreview":null,"media":"ch02-sub02-sec01-0000.mov","caption":[],"code":null,"type":"step"},{"type":"paragraph","inlineContent":[{"type":"text","text":"We’ve now added a new feature, that of deleting a contact, but unfortunately our domain"},{"type":"text","text":" "},{"type":"text","text":"is not modeled as concisely as it could be."}]}],"contentSection":[{"content":[{"inlineContent":[{"type":"text","text":"Let’s add a new feature to the contacts list that allows you to delete a contact, but first"},{"type":"text","text":" "},{"type":"text","text":"you must confirm deletion. We will implement the confirmation step using an alert. The tools"},{"type":"text","text":" "},{"type":"text","text":"that we used last section, such as "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Presents()"},{"type":"text","text":","},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction"},{"type":"text","text":" and"},{"type":"text","text":" "},{"code":"ComposableArchitecture\/Reducer\/ifLet(_:action:destination:fileID:filePath:line:column:)-4ub6q","type":"codeVoice"},{"type":"text","text":", all work"},{"type":"text","text":" "},{"type":"text","text":"for presenting alerts from optional state too."}],"type":"paragraph"}],"mediaPosition":"trailing","kind":"contentAndMedia"}],"anchor":"Delete-contacts"},{"title":"Improve domain modeling","stepsSection":[{"caption":[],"media":null,"content":[{"inlineContent":[{"text":"Define a new reducer, called ","type":"text"},{"type":"codeVoice","code":"Destination"},{"text":", nested inside the ","type":"text"},{"type":"codeVoice","code":"ContactsFeature"},{"text":". This","type":"text"},{"text":" ","type":"text"},{"text":"reducer will hold the domain and logic for every feature that can be navigated to from","type":"text"},{"text":" ","type":"text"},{"text":"the contacts feature, and as such it will be an enum.","type":"text"}],"type":"paragraph"}],"code":"02-02-02-code-0000.swift","type":"step","runtimePreview":null},{"caption":[],"media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Add a case for the “Add contact” feature. Note that we are holding onto the actual","type":"text"},{"text":" ","type":"text"},{"code":"AddContactFeature","type":"codeVoice"},{"text":" reducer in the case, not the state. The","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","isActive":true,"type":"reference"},{"text":" macro will fill in all the requirements for the reducer","type":"text"},{"text":" ","type":"text"},{"text":"protocol for us automatically.","type":"text"}]}],"code":"02-02-02-code-0001.swift","type":"step","runtimePreview":null},{"caption":[],"media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add another case to the "},{"type":"codeVoice","code":"Destination"},{"type":"text","text":" for the alert state that can be displayed in the"},{"type":"text","text":" "},{"type":"text","text":"feature."}]}],"code":"02-02-02-code-0002.swift","type":"step","runtimePreview":null},{"inlineContent":[{"type":"text","text":"That is all it takes to define a single reducer that combines multiple mutually exclusive"},{"type":"text","text":" "},{"type":"text","text":"reducers together. You can expand the macro code in Xcode to see all the code that is"},{"type":"text","text":" "},{"type":"text","text":"being written for you. And if in the future this feature can navigate to another feature,"},{"type":"text","text":" "},{"type":"text","text":"you will only have to add a single case to the "},{"type":"codeVoice","code":"Destination"},{"type":"text","text":" enum."}],"type":"paragraph"},{"caption":[],"media":null,"content":[{"inlineContent":[{"text":"Replace the two pieces of optional ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Presents()"},{"text":" with a single","type":"text"},{"text":" ","type":"text"},{"text":"optional pointed at ","type":"text"},{"type":"codeVoice","code":"Destination.State"},{"text":".","type":"text"}],"type":"paragraph"}],"code":"02-02-02-code-0003.swift","type":"step","runtimePreview":null},{"inlineContent":[{"type":"text","text":"Note that this now creates a compilation error letting you know that "},{"code":"ContactsFeature.State","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"is no longer "},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":". This is happening because "},{"code":"Destination.State","type":"codeVoice"},{"type":"text","text":" is not "},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and that type is generated by the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","isActive":true,"type":"reference","overridingTitleInlineContent":[{"code":"@Reducer","type":"codeVoice"}],"overridingTitle":"@Reducer"},{"type":"text","text":" macro."}],"type":"paragraph"},{"caption":[],"media":null,"content":[{"inlineContent":[{"type":"text","text":"Extend the macro-generated "},{"type":"codeVoice","code":"Destination.State"},{"type":"text","text":" to apply an "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":" conformance."}],"type":"paragraph"}],"code":"02-02-02-code-0004.swift","type":"step","runtimePreview":null},{"caption":[],"media":null,"content":[{"inlineContent":[{"text":"Replace the two action cases that held onto ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"with a single case that holds onto ","type":"text"},{"code":"Destination.Action","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}],"code":"02-02-02-code-0005.swift","type":"step","runtimePreview":null},{"inlineContent":[{"type":"text","text":"Now our model is more concisely defined, and we have compile time guarantees that only"},{"type":"text","text":" "},{"type":"text","text":"one destination can be active at a time. But, also now have a lot of compiler errors we need"},{"type":"text","text":" "},{"type":"text","text":"to fix."}],"type":"paragraph"},{"caption":[],"media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Instead of populating a piece of "},{"code":"addContact","type":"codeVoice"},{"type":"text","text":" optional state in order to drive navigation"},{"type":"text","text":" "},{"type":"text","text":"to that feature, we will now mutate "},{"code":"destination","type":"codeVoice"},{"type":"text","text":" to point it to the "},{"code":"addContact","type":"codeVoice"},{"type":"text","text":" case."}]}],"code":"02-02-02-code-0006.swift","type":"step","runtimePreview":null},{"caption":[],"media":null,"content":[{"inlineContent":[{"type":"text","text":"And when listening for actions happening in child domains we now need to destructure the"},{"type":"text","text":" "},{"type":"codeVoice","code":".destination(.presented(_))"},{"type":"text","text":" case, such as when the “Add Contact” feature tells us to"},{"type":"text","text":" "},{"type":"text","text":"save the contact."}],"type":"paragraph"}],"code":"02-02-02-code-0007.swift","type":"step","runtimePreview":null},{"caption":[],"media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"And when the alert confirms deletion of the contact."}]}],"code":"02-02-02-code-0008.swift","type":"step","runtimePreview":null},{"caption":[],"media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"We can handle all other destination actions by simply returning a ","type":"text"},{"code":".none","type":"codeVoice"},{"text":" effect to","type":"text"},{"text":" ","type":"text"},{"text":"represent there is no other work to perform.","type":"text"}]}],"code":"02-02-02-code-0009.swift","type":"step","runtimePreview":null},{"caption":[],"media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Update the state mutation for showing an alert to instead point the ","type":"text"},{"code":"destination","type":"codeVoice"},{"text":" to the","type":"text"},{"text":" ","type":"text"},{"code":"alert","type":"codeVoice"},{"text":" case.","type":"text"}]}],"code":"02-02-02-code-0010.swift","type":"step","runtimePreview":null},{"caption":[],"media":null,"content":[{"inlineContent":[{"type":"text","text":"Replace the two "},{"type":"codeVoice","code":"ifLet"},{"type":"text","text":"s that were used at the bottom of the reducer with a single one that"},{"type":"text","text":" "},{"type":"text","text":"is focused on the "},{"type":"codeVoice","code":"Destination"},{"type":"text","text":" domain. It is not even necessary to specify the"},{"type":"text","text":" "},{"type":"codeVoice","code":"Destination"},{"type":"text","text":" type in this expression because it can be inferred from how the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","type":"reference","isActive":true},{"type":"text","text":" "},{"type":"text","text":"macro was applied to the "},{"type":"codeVoice","code":"Destination"},{"type":"text","text":" enum."}],"type":"paragraph"}],"code":"02-02-02-code-0011.swift","type":"step","runtimePreview":null},{"inlineContent":[{"type":"text","text":"That’s all it takes to convert two independent, imprecisely modeled optional values into a"},{"type":"text","text":" "},{"type":"text","text":"single optional enum, and we can now prove that only one destination can be active at a time."},{"type":"text","text":" "},{"type":"text","text":"All that is left is to update the view so that we can specify which case of the destination"},{"type":"text","text":" "},{"type":"text","text":"enum drives the sheet and alert."}],"type":"paragraph"},{"caption":[],"media":null,"content":[{"inlineContent":[{"type":"text","text":"When you model all of your destinations in a single optional value, you start by scoping to"},{"type":"text","text":" "},{"type":"text","text":"the destination domain and then you further scope into the state and action cases"},{"type":"text","text":" "},{"type":"text","text":"associated with the specific destination using familiar key path dot-chaining syntax. This"},{"type":"text","text":" "},{"type":"text","text":"can be done with familiar dot syntax because the"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","isActive":true},{"type":"text","text":" macro applies the "},{"type":"codeVoice","code":"@CasePathable"},{"type":"text","text":" macro to each enum."}],"type":"paragraph"}],"code":"02-02-02-code-0012.swift","type":"step","runtimePreview":null},{"caption":[],"media":null,"content":[{"inlineContent":[{"type":"text","text":"The same can be done for the "},{"code":"alert","type":"codeVoice"},{"type":"text","text":" view modifier."}],"type":"paragraph"}],"code":"02-02-02-code-0013.swift","type":"step","runtimePreview":null},{"inlineContent":[{"type":"text","text":"That completes the refactor of the reducer and view to use a single piece of optional enum"},{"type":"text","text":" "},{"type":"text","text":"state instead using multiple optional values. The application works exactly as it did before,"},{"type":"text","text":" "},{"type":"text","text":"but now its domain is more concisely modeled."}],"type":"paragraph"}],"contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"text":"Currently the ","type":"text"},{"type":"codeVoice","code":"ContactsFeature"},{"text":" can navigate to two possible destinations: either the “Add","type":"text"},{"text":" ","type":"text"},{"text":"Contact” sheet or the delete alert. Importantly, it is not possible to be navigated to both","type":"text"},{"text":" ","type":"text"},{"text":"destinations at once. However, that currently is possible since we are representing each of","type":"text"},{"text":" ","type":"text"},{"text":"those destinations as optional pieces of ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Presents()"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The number of invalid states explodes exponentially when you use optionals to represent"},{"text":" ","type":"text"},{"text":"features you can navigate to. For example, 2 optionals has 1 invalid state, but 3 optionals","type":"text"},{"text":" ","type":"text"},{"text":"has 4 invalid states, and 4 optionals has 11 invalid states. This imprecise domain modeling","type":"text"},{"text":" ","type":"text"},{"text":"leaks complexity into your application since you can never truly know which feature is being","type":"text"},{"text":" ","type":"text"},{"text":"presented.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Let’s see how to more concisely model our domains for navigating to multiple destinations.","type":"text"}]}]}],"anchor":"Improve-domain-modeling"}]},{"title":"Testing presentation","action":{"overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"overridingTitle":"Get started","type":"reference","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation","isActive":true},"kind":"callToAction","featuredEyebrow":"Tutorial","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"type":"text","text":" "},{"type":"text","text":"how multiple features integrate together and communicate with each other."}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/composablearchitecture\/02-02-multipledestinations"]}],"kind":"project","schemaVersion":{"minor":3,"major":0,"patch":0},"references":{"02-02-02-code-0011.swift":{"identifier":"02-02-02-code-0011.swift","type":"file","fileType":"swift","content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @Presents var destination: Destination.State?","  }","  enum Action {","    case addButtonTapped","    case deleteButtonTapped(id: Contact.ID)","    case destination(PresentationAction<Destination.Action>)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.destination = .addContact(","          AddContactFeature.State(","            contact: Contact(id: UUID(), name: \"\")","          )","        )","        return .none","        ","      case let .destination(.presented(.addContact(.delegate(.saveContact(contact))))):","        state.contacts.append(contact)","        return .none","        ","      case let .destination(.presented(.alert(.confirmDeletion(id: id)))):","        state.contacts.remove(id: id)","        return .none","        ","      case .destination:","        return .none","        ","      case let .deleteButtonTapped(id: id):","        state.destination = .alert(","          AlertState {","            TextState(\"Are you sure?\")","          } actions: {","            ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","              TextState(\"Delete\")","            }","          }","        )","        return .none","      }","    }","    .ifLet(\\.$destination, action: \\.destination) {","      Destination.body","    }","  }","}"],"fileName":"ContactsFeatures.swift","highlights":[{"line":51},{"line":52}],"syntax":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks":{"abstract":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"type":"text","text":" "},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}],"kind":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks","type":"topic","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks","role":"project","estimatedTime":"30min","title":"Navigation stacks"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-effects":{"abstract":[{"text":"Learn how to write test for the counter built in previous tutorials, including how to assert","type":"text"},{"text":" ","type":"text"},{"text":"against state changes and how effects execute and feed data back into the system.","type":"text"}],"title":"Testing effects","kind":"section","role":"pseudoSymbol","type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-effects","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-effects"},"02-02-01-code-0002.swift":{"syntax":"swift","content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    @Presents var addContact: AddContactFeature.State?","    @Presents var alert: AlertState<Action.Alert>?","    var contacts: IdentifiedArrayOf<Contact> = []","  }","  enum Action {","    case addButtonTapped","    case addContact(PresentationAction<AddContactFeature.Action>)","    case alert(PresentationAction<Alert>)","    case deleteButtonTapped(id: Contact.ID)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.addContact = AddContactFeature.State(","          contact: Contact(id: UUID(), name: \"\")","        )","        return .none","        ","      case let .addContact(.presented(.delegate(.saveContact(contact)))):","        state.contacts.append(contact)","        return .none","        ","      case .addContact:","        return .none","        ","      case let .deleteButtonTapped(id: id):","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \\.addContact) {","      AddContactFeature()","    }","  }","}"],"identifier":"02-02-01-code-0002.swift","fileType":"swift","type":"file","fileName":"ContactsFeatures.swift","highlights":[{"line":12},{"line":15}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Contact-detail-feature":{"role":"pseudoSymbol","kind":"section","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Contact-detail-feature","title":"Contact detail feature","type":"section","abstract":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"type":"text","text":" "},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Contact-detail-feature"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#Managing-a-timer":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Managing-a-timer","kind":"section","title":"Managing a timer","abstract":[{"text":"Learn how to communicate with the outside world in your features, and feed data from the outside","type":"text"},{"text":" ","type":"text"},{"text":"back into your feature.","type":"text"}],"type":"section","role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#Managing-a-timer"},"02-02-02-code-0013.swift":{"fileName":"ContactsFeatures.swift","identifier":"02-02-02-code-0013.swift","syntax":"swift","highlights":[{"line":38}],"type":"file","fileType":"swift","content":["struct ContactsView: View {","  @Bindable var store: StoreOf<ContactsFeature>","  ","  var body: some View {","    NavigationStack {","      List {","        ForEach(store.contacts) { contact in","          HStack {","            Text(contact.name)","            Spacer()","            Button {","              store.send(.deleteButtonTapped(id: contact.id))","            } label: {","              Image(systemName: \"trash\")","                .foregroundColor(.red)","            }","          }","        }","      }","      .navigationTitle(\"Contacts\")","      .toolbar {","        ToolbarItem {","          Button {","            store.send(.addButtonTapped)","          } label: {","            Image(systemName: \"plus\")","          }","        }","      }","    }","    .sheet(","      item: $store.scope(state: \\.destination?.addContact, action: \\.destination.addContact)","    ) { addContactStore in","      NavigationStack {","        AddContactView(store: addContactStore)","      }","    }","    .alert($store.scope(state: \\.destination?.alert, action: \\.destination.alert))","  }","}"]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Project-set-up":{"title":"Project set up","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}],"type":"section","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Project-set-up","role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Project-set-up"},"02-02-02-code-0009.swift":{"fileType":"swift","identifier":"02-02-02-code-0009.swift","highlights":[{"line":35},{"line":36},{"line":37}],"content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @Presents var destination: Destination.State?","  }","  enum Action {","    case addButtonTapped","    case deleteButtonTapped(id: Contact.ID)","    case destination(PresentationAction<Destination.Action>)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.destination = .addContact(","          AddContactFeature.State(","            contact: Contact(id: UUID(), name: \"\")","          )","        )","        return .none","        ","      case let .destination(.presented(.addContact(.delegate(.saveContact(contact))))):","        state.contacts.append(contact)","        return .none","        ","      case let .destination(.presented(.alert(.confirmDeletion(id: id)))):","        state.contacts.remove(id: id)","        return .none","        ","      case .destination:","        return .none","        ","      case let .deleteButtonTapped(id: id):","        state.alert = AlertState {","          TextState(\"Are you sure?\")","        } actions: {","          ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","            TextState(\"Delete\")","          }","        }","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \\.addContact) {","      AddContactFeature()","    }","    .ifLet(\\.$alert, action: \\.alert)","  }","}"],"fileName":"ContactsFeatures.swift","type":"file","syntax":"swift"},"02-02-02-code-0002.swift":{"identifier":"02-02-02-code-0002.swift","type":"file","content":["extension ContactsFeature {","  @Reducer","  enum Destination {","    case addContact(AddContactFeature)","    case alert(AlertState<ContactsFeature.Action.Alert>)","  }","}"],"highlights":[{"line":5}],"fileName":"ContactsFeatures.swift","fileType":"swift","syntax":"swift"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","navigatorTitle":[{"text":"Reducer","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/reducer","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Reducer","kind":"identifier"}],"role":"symbol","title":"Reducer","abstract":[{"text":"A protocol that describes how to evolve the current state of an application to the next state,","type":"text"},{"text":" ","type":"text"},{"text":"given an action, and describes what ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","isActive":true,"type":"reference"},{"text":"s should be executed later by the store, if any.","type":"text"}],"kind":"symbol"},"02-02-01-code-0000.swift":{"identifier":"02-02-01-code-0000.swift","highlights":[{"line":11},{"line":28},{"line":29},{"line":30}],"syntax":"swift","fileName":"ContactsFeatures.swift","type":"file","content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    @Presents var addContact: AddContactFeature.State?","    var contacts: IdentifiedArrayOf<Contact> = []","  }","  enum Action {","    case addButtonTapped","    case addContact(PresentationAction<AddContactFeature.Action>)","    case deleteButtonTapped(id: Contact.ID)","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.addContact = AddContactFeature.State(","          contact: Contact(id: UUID(), name: \"\")","        )","        return .none","        ","      case let .addContact(.presented(.delegate(.saveContact(contact)))):","        state.contacts.append(contact)","        return .none","        ","      case .addContact:","        return .none","        ","      case let .deleteButtonTapped(id: id):","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \\.addContact) {","      AddContactFeature()","    }","  }","}"],"fileType":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Drill-down-to-contact-detail":{"url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Drill-down-to-contact-detail","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Drill-down-to-contact-detail","title":"Drill-down to contact detail","abstract":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"type":"text","text":" "},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}],"type":"section","role":"pseudoSymbol"},"02-02-02-code-0008.swift":{"fileName":"ContactsFeatures.swift","content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @Presents var destination: Destination.State?","  }","  enum Action {","    case addButtonTapped","    case deleteButtonTapped(id: Contact.ID)","    case destination(PresentationAction<Destination.Action>)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.destination = .addContact(","          AddContactFeature.State(","            contact: Contact(id: UUID(), name: \"\")","          )","        )","        return .none","        ","      case let .destination(.presented(.addContact(.delegate(.saveContact(contact))))):","        state.contacts.append(contact)","        return .none","        ","      case let .destination(.presented(.alert(.confirmDeletion(id: id)))):","        state.contacts.remove(id: id)","        return .none","        ","      case let .deleteButtonTapped(id: id):","        state.alert = AlertState {","          TextState(\"Are you sure?\")","        } actions: {","          ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","            TextState(\"Delete\")","          }","        }","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \\.addContact) {","      AddContactFeature()","    }","    .ifLet(\\.$alert, action: \\.alert)","  }","}"],"identifier":"02-02-02-code-0008.swift","highlights":[{"line":31}],"type":"file","syntax":"swift","fileType":"swift"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction":{"url":"\/documentation\/composablearchitecture\/presentationaction","title":"PresentationAction","role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PresentationAction","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","kind":"symbol","abstract":[{"text":"A wrapper type for actions that can be presented.","type":"text"}],"type":"topic","navigatorTitle":[{"text":"PresentationAction","kind":"identifier"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature":{"role":"project","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature","type":"topic","kind":"project","estimatedTime":"1hr 0min","title":"Testing your feature","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature","abstract":[{"text":"Learn how to write test for the counter built in previous tutorials, including how to assert","type":"text"},{"text":" ","type":"text"},{"text":"against state changes and how effects execute and feed data back into the system.","type":"text"}]},"02-02-02-code-0000.swift":{"syntax":"swift","fileType":"swift","content":["extension ContactsFeature {","  @Reducer","  enum Destination {","  }","}"],"type":"file","highlights":[],"fileName":"ContactsFeatures.swift","identifier":"02-02-02-code-0000.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Deleting-a-contact":{"url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Deleting-a-contact","role":"pseudoSymbol","title":"Deleting a contact","type":"section","abstract":[{"text":"We will continue with the contacts application built in previous sections by adding","type":"text"},{"text":" ","type":"text"},{"text":"a navigation stack to the root of the application so that we can drill down to a contact.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Deleting-a-contact","kind":"section"},"02-02-01-code-0004.swift":{"syntax":"swift","identifier":"02-02-01-code-0004.swift","type":"file","fileType":"swift","content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    @Presents var addContact: AddContactFeature.State?","    @Presents var alert: AlertState<Action.Alert>?","    var contacts: IdentifiedArrayOf<Contact> = []","  }","  enum Action {","    case addButtonTapped","    case addContact(PresentationAction<AddContactFeature.Action>)","    case alert(PresentationAction<Alert>)","    case deleteButtonTapped(id: Contact.ID)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.addContact = AddContactFeature.State(","          contact: Contact(id: UUID(), name: \"\")","        )","        return .none","        ","      case let .addContact(.presented(.delegate(.saveContact(contact)))):","        state.contacts.append(contact)","        return .none","        ","      case .addContact:","        return .none","        ","      case let .deleteButtonTapped(id: id):","        state.alert = AlertState {","          TextState(\"Are you sure?\")","        } actions: {","          ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","            TextState(\"Delete\")","          }","        }","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \\.addContact) {","      AddContactFeature()","    }","    .ifLet(\\.$alert, action: \\.alert)","  }","}"],"fileName":"ContactsFeatures.swift","highlights":[{"line":48}]},"02-02-02-code-0010.swift":{"type":"file","identifier":"02-02-02-code-0010.swift","syntax":"swift","content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @Presents var destination: Destination.State?","  }","  enum Action {","    case addButtonTapped","    case deleteButtonTapped(id: Contact.ID)","    case destination(PresentationAction<Destination.Action>)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.destination = .addContact(","          AddContactFeature.State(","            contact: Contact(id: UUID(), name: \"\")","          )","        )","        return .none","        ","      case let .destination(.presented(.addContact(.delegate(.saveContact(contact))))):","        state.contacts.append(contact)","        return .none","        ","      case let .destination(.presented(.alert(.confirmDeletion(id: id)))):","        state.contacts.remove(id: id)","        return .none","        ","      case .destination:","        return .none","        ","      case let .deleteButtonTapped(id: id):","        state.destination = .alert(","          AlertState {","            TextState(\"Are you sure?\")","          } actions: {","            ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","              TextState(\"Delete\")","            }","          }","        )","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \\.addContact) {","      AddContactFeature()","    }","    .ifLet(\\.$alert, action: \\.alert)","  }","}"],"fileName":"ContactsFeatures.swift","fileType":"swift","highlights":[{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44},{"line":45},{"line":47}]},"02-02-01-code-0005.swift":{"syntax":"swift","type":"file","fileType":"swift","identifier":"02-02-01-code-0005.swift","fileName":"ContactsFeatures.swift","highlights":[{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40}],"content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    @Presents var addContact: AddContactFeature.State?","    @Presents var alert: AlertState<Action.Alert>?","    var contacts: IdentifiedArrayOf<Contact> = []","  }","  enum Action {","    case addButtonTapped","    case addContact(PresentationAction<AddContactFeature.Action>)","    case alert(PresentationAction<Alert>)","    case deleteButtonTapped(id: Contact.ID)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.addContact = AddContactFeature.State(","          contact: Contact(id: UUID(), name: \"\")","        )","        return .none","        ","      case let .addContact(.presented(.delegate(.saveContact(contact)))):","        state.contacts.append(contact)","        return .none","        ","      case .addContact:","        return .none","        ","      case let .alert(.presented(.confirmDeletion(id: id))):","        state.contacts.remove(id: id)","        return .none","        ","      case .alert:","        return .none","        ","      case let .deleteButtonTapped(id: id):","        state.alert = AlertState {","          TextState(\"Are you sure?\")","        } actions: {","          ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","            TextState(\"Delete\")","          }","        }","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \\.addContact) {","      AddContactFeature()","    }","    .ifLet(\\.$alert, action: \\.alert)","  }","}"]},"02-02-02-code-0004.swift":{"syntax":"swift","identifier":"02-02-02-code-0004.swift","type":"file","fileType":"swift","content":["extension ContactsFeature {","  @Reducer","  enum Destination {","    case addContact(AddContactFeature)","    case alert(AlertState<ContactsFeature.Action.Alert>)","  }","}","extension ContactsFeature.Destination.State: Equatable {}"],"fileName":"ContactsFeatures.swift","highlights":[{"line":8}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures":{"type":"topic","title":"Composing features","abstract":[{"text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent","type":"text"},{"text":" ","type":"text"},{"text":"feature that contains the ","type":"text"},{"code":"CounterFeature","type":"codeVoice"},{"text":" we have been building thus far.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures","role":"project","kind":"project","estimatedTime":"30min"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects":{"estimatedTime":"30min","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects","kind":"project","abstract":[{"text":"Learn how to communicate with the outside world in your features, and feed data from the outside","type":"text"},{"text":" ","type":"text"},{"text":"back into your feature.","type":"text"}],"type":"topic","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects","title":"Adding side effects","role":"project"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Presents()":{"url":"\/documentation\/composablearchitecture\/presents()","type":"topic","abstract":[{"text":"Wraps a property with ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState","isActive":true,"type":"reference"},{"text":" and observes it.","type":"text"}],"title":"Presents()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Presents"},{"kind":"text","text":"()"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Presents()","kind":"symbol","role":"symbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations#Delete-contacts":{"kind":"section","title":"Delete contacts","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Delete-contacts","type":"section","abstract":[{"text":"In the previous section you learned how to model your domains so that a parent feature can","type":"text"},{"text":" ","type":"text"},{"text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be","type":"text"},{"text":" ","type":"text"},{"text":"able to present ","type":"text"},{"inlineContent":[{"type":"text","text":"many"}],"type":"emphasis"},{"text":" features.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations#Delete-contacts","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Integrating-into-the-app":{"abstract":[{"text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then","type":"text"},{"text":" ","type":"text"},{"text":"learn how to hook up that feature to a SwiftUI view.","type":"text"}],"type":"section","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Integrating-into-the-app","role":"pseudoSymbol","title":"Integrating into the app","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-into-the-app","kind":"section"},"02-02-02-code-0007.swift":{"type":"file","highlights":[{"line":27}],"syntax":"swift","identifier":"02-02-02-code-0007.swift","content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @Presents var destination: Destination.State?","  }","  enum Action {","    case addButtonTapped","    case deleteButtonTapped(id: Contact.ID)","    case destination(PresentationAction<Destination.Action>)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.destination = .addContact(","          AddContactFeature.State(","            contact: Contact(id: UUID(), name: \"\")","          )","        )","        return .none","        ","      case let .destination(.presented(.addContact(.delegate(.saveContact(contact))))):","        state.contacts.append(contact)","        return .none","        ","      case let .alert(.presented(.confirmDeletion(id: id))):","        state.contacts.remove(id: id)","        return .none","        ","      case .alert:","        return .none","        ","      case let .deleteButtonTapped(id: id):","        state.alert = AlertState {","          TextState(\"Are you sure?\")","        } actions: {","          ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","            TextState(\"Delete\")","          }","        }","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \\.addContact) {","      AddContactFeature()","    }","    .ifLet(\\.$alert, action: \\.alert)","  }","}"],"fileType":"swift","fileName":"ContactsFeatures.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations":{"title":"Multiple presentation destinations","type":"topic","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations","kind":"project","abstract":[{"type":"text","text":"In the previous section you learned how to model your domains so that a parent feature can"},{"type":"text","text":" "},{"type":"text","text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be"},{"type":"text","text":" "},{"type":"text","text":"able to present "},{"inlineContent":[{"type":"text","text":"many"}],"type":"emphasis"},{"type":"text","text":" features."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations","estimatedTime":"30min","role":"project"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationState":{"url":"\/documentation\/composablearchitecture\/presentationstate","abstract":[{"text":"A property wrapper for state that can be presented.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState","navigatorTitle":[{"text":"PresentationState","kind":"identifier"}],"type":"topic","title":"PresentationState","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PresentationState","kind":"identifier"}],"role":"symbol","kind":"symbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-state-changes":{"kind":"section","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-state-changes","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"title":"Testing state changes","role":"pseudoSymbol","type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-state-changes"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation":{"estimatedTime":"30min","abstract":[{"text":"The Composable Architecture offers a variety of tools to help you present child features from","type":"text"},{"text":" ","type":"text"},{"text":"parent features. To begin, we will explore presenting a feature that is driven off of optional","type":"text"},{"text":" ","type":"text"},{"text":"state.","type":"text"}],"type":"topic","kind":"project","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation","role":"project","title":"Your first presentation"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture":{"kind":"overview","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a","type":"text"},{"text":" ","type":"text"},{"text":"consistent and understandable way, with composition, testing, and ergonomics in mind. It can be","type":"text"},{"text":" ","type":"text"},{"text":"used in SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"title":"Meet the Composable Architecture","role":"overview","url":"\/tutorials\/meetcomposablearchitecture","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","type":"topic"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#What-is-a-side-effect":{"kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#What-is-a-side-effect","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"type":"text","text":" "},{"type":"text","text":"back into your feature."}],"title":"What is a side effect?","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#What-is-a-side-effect","role":"pseudoSymbol","type":"section"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture/Essentials":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials","title":"Essentials","kind":"article","abstract":[],"url":"\/tutorials\/meetcomposablearchitecture\/essentials","role":"article","type":"topic"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Non-exhaustive-testing":{"kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Non-exhaustive-testing","type":"section","title":"Non-exhaustive testing","abstract":[{"text":"Learn how to write tests for features built using the library’s navigation tools, including","type":"text"},{"text":" ","type":"text"},{"text":"how multiple features integrate together and communicate with each other.","type":"text"}],"role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Non-exhaustive-testing"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation":{"abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"type":"text","text":" "},{"type":"text","text":"how multiple features integrate together and communicate with each other."}],"title":"Testing presentation","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation","estimatedTime":"40min","role":"project","kind":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation","type":"topic"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures#Adding-a-tab-view":{"type":"section","url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures#Adding-a-tab-view","kind":"section","role":"pseudoSymbol","title":"Adding a tab view","abstract":[{"type":"text","text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent"},{"type":"text","text":" "},{"type":"text","text":"feature that contains the "},{"type":"codeVoice","code":"CounterFeature"},{"type":"text","text":" we have been building thus far."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Adding-a-tab-view"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer()":{"abstract":[{"type":"text","text":"Helps implement the conformance to the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","isActive":true},{"type":"text","text":" protocol for a type."}],"kind":"symbol","role":"symbol","title":"Reducer()","type":"topic","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Reducer"},{"kind":"text","text":"()"}],"url":"\/documentation\/composablearchitecture\/reducer()","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Testing-the-delete-contact-flow":{"type":"section","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Testing-the-delete-contact-flow","abstract":[{"text":"Learn how to write tests for features built using the library’s navigation tools, including","type":"text"},{"text":" ","type":"text"},{"text":"how multiple features integrate together and communicate with each other.","type":"text"}],"kind":"section","role":"pseudoSymbol","title":"Testing the delete contact flow","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-delete-contact-flow"},"02-02-01-code-0003.swift":{"type":"file","highlights":[{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41}],"content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    @Presents var addContact: AddContactFeature.State?","    @Presents var alert: AlertState<Action.Alert>?","    var contacts: IdentifiedArrayOf<Contact> = []","  }","  enum Action {","    case addButtonTapped","    case addContact(PresentationAction<AddContactFeature.Action>)","    case alert(PresentationAction<Alert>)","    case deleteButtonTapped(id: Contact.ID)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.addContact = AddContactFeature.State(","          contact: Contact(id: UUID(), name: \"\")","        )","        return .none","        ","      case let .addContact(.presented(.delegate(.saveContact(contact)))):","        state.contacts.append(contact)","        return .none","        ","      case .addContact:","        return .none","        ","      case let .deleteButtonTapped(id: id):","        state.alert = AlertState {","          TextState(\"Are you sure?\")","        } actions: {","          ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","            TextState(\"Delete\")","          }","        }","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \\.addContact) {","      AddContactFeature()","    }","  }","}"],"syntax":"swift","identifier":"02-02-01-code-0003.swift","fileName":"ContactsFeatures.swift","fileType":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Testing-the-add-contact-flow":{"role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Testing-the-add-contact-flow","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-add-contact-flow","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"type":"text","text":" "},{"type":"text","text":"how multiple features integrate together and communicate with each other."}],"type":"section","kind":"section","title":"Testing the add contact flow"},"02-02-02-code-0006.swift":{"identifier":"02-02-02-code-0006.swift","highlights":[{"line":20},{"line":21},{"line":22},{"line":23}],"fileType":"swift","content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @Presents var destination: Destination.State?","  }","  enum Action {","    case addButtonTapped","    case deleteButtonTapped(id: Contact.ID)","    case destination(PresentationAction<Destination.Action>)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.destination = .addContact(","          AddContactFeature.State(","            contact: Contact(id: UUID(), name: \"\")","          )","        )","        return .none","        ","      case let .addContact(.presented(.delegate(.saveContact(contact)))):","        state.contacts.append(contact)","        return .none","        ","      case .addContact:","        return .none","        ","      case let .alert(.presented(.confirmDeletion(id: id))):","        state.contacts.remove(id: id)","        return .none","        ","      case .alert:","        return .none","        ","      case let .deleteButtonTapped(id: id):","        state.alert = AlertState {","          TextState(\"Are you sure?\")","        } actions: {","          ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","            TextState(\"Delete\")","          }","        }","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \\.addContact) {","      AddContactFeature()","    }","    .ifLet(\\.$alert, action: \\.alert)","  }","}"],"type":"file","fileName":"ContactsFeatures.swift","syntax":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures#Composing-reducers":{"title":"Composing reducers","role":"pseudoSymbol","type":"section","kind":"section","url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures#Composing-reducers","abstract":[{"type":"text","text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent"},{"type":"text","text":" "},{"type":"text","text":"feature that contains the "},{"type":"codeVoice","code":"CounterFeature"},{"type":"text","text":" we have been building thus far."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Composing-reducers"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#Performing-a-network-request":{"kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Performing-a-network-request","type":"section","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#Performing-a-network-request","title":"Performing a network request","role":"pseudoSymbol","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"type":"text","text":" "},{"type":"text","text":"back into your feature."}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Integrate-reducers":{"url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Integrate-reducers","role":"pseudoSymbol","type":"section","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-reducers","title":"Integrate reducers","abstract":[{"text":"The Composable Architecture offers a variety of tools to help you present child features from","type":"text"},{"text":" ","type":"text"},{"text":"parent features. To begin, we will explore presenting a feature that is driven off of optional","type":"text"},{"text":" ","type":"text"},{"text":"state.","type":"text"}]},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture/Navigation":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation","abstract":[],"title":"Navigation","type":"topic","kind":"article","role":"article","url":"\/tutorials\/meetcomposablearchitecture\/navigation"},"02-02-02-code-0001.swift":{"syntax":"swift","identifier":"02-02-02-code-0001.swift","content":["extension ContactsFeature {","  @Reducer","  enum Destination {","    case addContact(AddContactFeature)","  }","}"],"fileType":"swift","type":"file","highlights":[{"line":4}],"fileName":"ContactsFeatures.swift"},"02-02-01-code-0001.swift":{"content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    @Presents var addContact: AddContactFeature.State?","    @Presents var alert: AlertState<Action.Alert>?","    var contacts: IdentifiedArrayOf<Contact> = []","  }","  enum Action {","    case addButtonTapped","    case addContact(PresentationAction<AddContactFeature.Action>)","    case deleteButtonTapped(id: Contact.ID)","    enum Alert: Equatable {","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.addContact = AddContactFeature.State(","          contact: Contact(id: UUID(), name: \"\")","        )","        return .none","        ","      case let .addContact(.presented(.delegate(.saveContact(contact)))):","        state.contacts.append(contact)","        return .none","        ","      case .addContact:","        return .none","        ","      case let .deleteButtonTapped(id: id):","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \\.addContact) {","      AddContactFeature()","    }","  }","}"],"syntax":"swift","highlights":[{"line":6},{"line":13},{"line":14}],"type":"file","fileName":"ContactsFeatures.swift","identifier":"02-02-01-code-0001.swift","fileType":"swift"},"02-02-01-code-0007.swift":{"fileType":"swift","identifier":"02-02-01-code-0007.swift","highlights":[{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17}],"type":"file","fileName":"ContactsFeatures.swift","syntax":"swift","content":["struct ContactsView: View {","  @Bindable var store: StoreOf<ContactsFeature>","  ","  var body: some View {","    NavigationStack {","      List {","        ForEach(store.contacts) { contact in","          HStack {","            Text(contact.name)","            Spacer()","            Button {","              store.send(.deleteButtonTapped(id: contact.id))","            } label: {","              Image(systemName: \"trash\")","                .foregroundColor(.red)","            }","          }","        }","      }","      .navigationTitle(\"Contacts\")","      .toolbar {","        ToolbarItem {","          Button {","            store.send(.addButtonTapped)","          } label: {","            Image(systemName: \"plus\")","          }","        }","      }","    }","    .sheet(","      item: $store.scope(state: \\.addContact, action: \\.addContact)","    ) { addContactStore in","      NavigationStack {","        AddContactView(store: addContactStore)","      }","    }","    .alert($store.scope(state: \\.alert, action: \\.alert))","  }","}"]},"02-02-02-code-0003.swift":{"content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    \/\/ @Presents var addContact: AddContactFeature.State?","    \/\/ @Presents var alert: AlertState<Action.Alert>?","    @Presents var destination: Destination.State?","  }","  enum Action {","    case addButtonTapped","    case addContact(PresentationAction<AddContactFeature.Action>)","    case alert(PresentationAction<Alert>)","    case deleteButtonTapped(id: Contact.ID)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.addContact = AddContactFeature.State(","          contact: Contact(id: UUID(), name: \"\")","        )","        return .none","        ","      case let .addContact(.presented(.delegate(.saveContact(contact)))):","        state.contacts.append(contact)","        return .none","        ","      case .addContact:","        return .none","        ","      case let .alert(.presented(.confirmDeletion(id: id))):","        state.contacts.remove(id: id)","        return .none","        ","      case .alert:","        return .none","        ","      case let .deleteButtonTapped(id: id):","        state.alert = AlertState {","          TextState(\"Are you sure?\")","        } actions: {","          ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","            TextState(\"Delete\")","          }","        }","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \\.addContact) {","      AddContactFeature()","    }","    .ifLet(\\.$alert, action: \\.alert)","  }","}"],"syntax":"swift","highlights":[{"line":6},{"line":7},{"line":8}],"type":"file","fileName":"ContactsFeatures.swift","identifier":"02-02-02-code-0003.swift","fileType":"swift"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Store"}],"kind":"symbol","title":"Store","url":"\/documentation\/composablearchitecture\/store","abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"role":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Store"}]},"02-02-02-code-0005.swift":{"content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @Presents var destination: Destination.State?","  }","  enum Action {","    case addButtonTapped","    case deleteButtonTapped(id: Contact.ID)","    \/\/ case addContact(PresentationAction<AddContactFeature.Action>)","    \/\/ case alert(PresentationAction<Alert>)","    case destination(PresentationAction<Destination.Action>)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.addContact = AddContactFeature.State(","          contact: Contact(id: UUID(), name: \"\")","        )","        return .none","        ","      case let .addContact(.presented(.delegate(.saveContact(contact)))):","        state.contacts.append(contact)","        return .none","        ","      case .addContact:","        return .none","        ","      case let .alert(.presented(.confirmDeletion(id: id))):","        state.contacts.remove(id: id)","        return .none","        ","      case .alert:","        return .none","        ","      case let .deleteButtonTapped(id: id):","        state.alert = AlertState {","          TextState(\"Are you sure?\")","        } actions: {","          ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","            TextState(\"Delete\")","          }","        }","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \\.addContact) {","      AddContactFeature()","    }","    .ifLet(\\.$alert, action: \\.alert)","  }","}"],"syntax":"swift","highlights":[{"line":11},{"line":12},{"line":13}],"type":"file","fileName":"ContactsFeatures.swift","identifier":"02-02-02-code-0005.swift","fileType":"swift"},"ch02-sub02-sec01-0000.mov":{"alt":null,"poster":null,"type":"video","identifier":"ch02-sub02-sec01-0000.mov","variants":[{"url":"\/videos\/ComposableArchitecture\/ch02-sub02-sec01-0000.mov","traits":["1x","light"]}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature":{"url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature","kind":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature","type":"topic","title":"Your first feature","abstract":[{"type":"text","text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then"},{"type":"text","text":" "},{"type":"text","text":"learn how to hook up that feature to a SwiftUI view."}],"role":"project","estimatedTime":"20min"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Controlling-dependencies":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Controlling-dependencies","role":"pseudoSymbol","kind":"section","type":"section","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"title":"Controlling dependencies","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Controlling-dependencies"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Integrate-views":{"role":"pseudoSymbol","title":"Integrate views","type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-views","kind":"section","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Integrate-views","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}]},"02-02-01-code-0006.swift":{"syntax":"swift","content":["struct ContactsView: View {","  @Bindable var store: StoreOf<ContactsFeature>","  ","  var body: some View {","    NavigationStack {","      List {","        ForEach(store.contacts) { contact in","          Text(contact.name)","        }","      }","      .navigationTitle(\"Contacts\")","      .toolbar {","        ToolbarItem {","          Button {","            store.send(.addButtonTapped)","          } label: {","            Image(systemName: \"plus\")","          }","        }","      }","    }","    .sheet(","      item: $store.scope(state: \\.addContact, action: \\.addContact)","    ) { addContactStore in","      NavigationStack {","        AddContactView(store: addContactStore)","      }","    }","    .alert($store.scope(state: \\.alert, action: \\.alert))","  }","}"],"identifier":"02-02-01-code-0006.swift","type":"file","highlights":[{"line":29}],"fileName":"ContactsFeatures.swift","fileType":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Child-to-parent-communication":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Child-to-parent-communication","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Child-to-parent-communication","type":"section","abstract":[{"text":"The Composable Architecture offers a variety of tools to help you present child features from","type":"text"},{"text":" ","type":"text"},{"text":"parent features. To begin, we will explore presenting a feature that is driven off of optional","type":"text"},{"text":" ","type":"text"},{"text":"state.","type":"text"}],"title":"Child-to-parent communication","role":"pseudoSymbol","kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Integrating-with-SwiftUI":{"url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Integrating-with-SwiftUI","role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-with-SwiftUI","type":"section","abstract":[{"type":"text","text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then"},{"type":"text","text":" "},{"type":"text","text":"learn how to hook up that feature to a SwiftUI view."}],"title":"Integrating with SwiftUI"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures#Deriving-child-stores":{"type":"section","kind":"section","role":"pseudoSymbol","abstract":[{"type":"text","text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent"},{"type":"text","text":" "},{"type":"text","text":"feature that contains the "},{"type":"codeVoice","code":"CounterFeature"},{"type":"text","text":" we have been building thus far."}],"title":"Deriving child stores","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Deriving-child-stores","url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures#Deriving-child-stores"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-network-requests":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-network-requests","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-network-requests","title":"Testing network requests","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"kind":"section","role":"pseudoSymbol","type":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Create-a-reducer":{"abstract":[{"text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then","type":"text"},{"text":" ","type":"text"},{"text":"learn how to hook up that feature to a SwiftUI view.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Create-a-reducer","kind":"section","role":"pseudoSymbol","title":"Create a reducer","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Create-a-reducer","type":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations#Improve-domain-modeling":{"type":"section","kind":"section","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations#Improve-domain-modeling","abstract":[{"type":"text","text":"In the previous section you learned how to model your domains so that a parent feature can"},{"type":"text","text":" "},{"type":"text","text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be"},{"type":"text","text":" "},{"type":"text","text":"able to present "},{"type":"emphasis","inlineContent":[{"type":"text","text":"many"}]},{"type":"text","text":" features."}],"role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Improve-domain-modeling","title":"Improve domain modeling"},"02-02-02-code-0012.swift":{"fileName":"ContactsFeatures.swift","highlights":[{"line":15},{"line":32}],"fileType":"swift","identifier":"02-02-02-code-0012.swift","type":"file","syntax":"swift","content":["struct ContactsView: View {","  @Bindable var store: StoreOf<ContactsFeature>","  ","  var body: some View {","    NavigationStack {","      List {","        ForEach(store.contacts) { contact in","          HStack {","            Text(contact.name)","            Spacer()","            Button {","              store.send(.deleteButtonTapped(id: contact.id))","            } label: {","              Image(systemName: \"trash\")","                .foregroundColor(.red)","            }","          }","        }","      }","      .navigationTitle(\"Contacts\")","      .toolbar {","        ToolbarItem {","          Button {","            store.send(.addButtonTapped)","          } label: {","            Image(systemName: \"plus\")","          }","        }","      }","    }","    .sheet(","      item: $store.scope(state: \\.destination?.addContact, action: \\.destination.addContact)","    ) { addContactStore in","      NavigationStack {","        AddContactView(store: addContactStore)","      }","    }","    .alert($store.scope(state: \\.alert, action: \\.alert))","  }","}"]}}}